setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')

load('4_2024_At_Spike_ins5.RData')
colnames(D) = sub('At1', 'A111-113', sub('At2', 'A114-116', sub('At3', 'A117-119', sub('At4', 'A120-122', colnames(D)))))
colnames(g1) = sub('At1', 'A111-113', sub('At2', 'A114-116', sub('At3', 'A117-119', sub('At4', 'A120-122', colnames(g1)))))
colnames(g2) = sub('At1', 'A111-113', sub('At2', 'A114-116', sub('At3', 'A117-119', sub('At4', 'A120-122', colnames(g2)))))
D_4 = D
g1_4 = g1
g2_4 = g2

load('7-8_2024_At_4.RData')
D_7_8 = D
g1_7_8 = g1
g2_7_8 = g2


load('11_2024_At.RData')
colnames(D) = sub('S2_L002_', '', sub('S1-8_', '', sub('S3_L002_', '', colnames(D))))
colnames(g1) = sub('S2_L002_', '', sub('S1-8_', '', sub('S3_L002_', '', colnames(g1))))
colnames(g2) = sub('S2_L002_', '', sub('S1-8_', '', sub('S3_L002_', '', colnames(g2))))
D_11 = D
g1_11 = g1
g2_11 = g2

load('12_2024_At.RData')
colnames(D) = sub('S187_L007_', '', sub('S188_L007_', '', colnames(D)))
colnames(g1) = sub('S187_L007_', '', sub('S188_L007_', '', colnames(g1)))
colnames(g2) = sub('S187_L007_', '', sub('S188_L007_', '', colnames(g2)))
D_12 = D
g1_12 = g1
g2_12 = g2


D = cbind(D_4, D_7_8, D_11, D_12)
g1 = cbind(g1_4, g1_7_8, g1_11, g1_12)
g2 = cbind(g2_4, g2_7_8, g2_11, g2_12)


library(readxl)
At_Stages <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/At_Stages2.xlsx")

#At_meta <- At_Stages[rep(row.names(At_Stages), times = 8), ]
library(tidyverse)
#At_meta = arrange(At_meta, Bud_order)
#At_meta$Sample = c(paste(rep('A111-113_', times = 24), 1:24, rep('s', times=24), sep=''), paste(rep('A114-116_', times = 24), 25:48, rep('s', times=24), sep=''), paste(rep('A117-119_', times = 24), 49:72, rep('s', times=24), sep=''), paste(rep('A120-122_', times = 24), 73:96, rep('s', times=24), sep=''), paste(rep('A155-168_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A182-193_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A194-205_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A206-217_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A218-229_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A230-241_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A242-253_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A254-266_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A267-277_', times = 64), 33:96, rep('s', times=64), sep=''), paste(rep('A268-287_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A288-301_', times = 96), 1:96, rep('s', times=96), sep=''))
#write.csv(At_meta, "At_meta2.csv")
#edited in excel, saved as At_meta2.xlsx
At_meta <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/At_meta2.xlsx")
rownames(At_meta) = At_meta$Sample

stages = as.character(At_meta$Stage)
stages = factor(stages, levels = c('tetrad','UM', 'UM/BM', 'BM', 'BM/Tri', 'Tri'))

D = D[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]

D = D[,At_meta$Sample]
g1 = g1[,At_meta$Sample]
g2 = g2[,At_meta$Sample]

No_cell = At_meta$Sample[which(At_meta$No_cell_well == 'Y')]
Yellow = At_meta$Sample[which(At_meta$Yellow == 'Y')]

summary(colSums(D[,No_cell]))


plotChr = function (cell, chr = 1, pad = 3) 
{
    Cdat = data.frame(f_col0 = AlleleFrac[, cell], Chr = floor(as.numeric(rownames(AlleleFrac))/10^6), 
        Position = (as.numeric(rownames(AlleleFrac))%%10^6) + 
            0.5)
    Cdat = Cdat[Cdat$Chr == chr, ]
    ggplot(Cdat) + geom_rect(data = data.frame(xmin = -pad, xmax = max(genes[,2])/10^6 + 
        pad, ymin = 0, ymax = 1), aes(xmin = xmin, xmax = xmax, 
        ymin = ymin, ymax = ymax), fill = "#EEEEEE") + geom_point(aes(y = f_col0, 
        x = Position), cex = 3) + geom_hline(yintercept = 0.5, 
        linetype = "dashed") + theme(panel.background = element_blank(), 
        axis.title = element_blank(), panel.border = element_blank(), 
        panel.grid = element_blank(), axis.ticks.x = element_blank(), 
        axis.text.x = element_blank()) + scale_y_continuous(breaks = seq(0, 
        1, 0.25), labels = c("0%", "", "50%", "", "100%"), limits = c(-0.4, 
        1.05)) + scale_x_continuous(expand = c(0, 0)) + annotate("segment", 
        x = -pad, xend = -pad, y = 0, yend = 1) + theme(plot.margin = margin(0, 
        0, 0.15, 0, "cm"))
}

plotScaleBar = ggplot() + scale_x_continuous(expand=c(0,0), limits = c(-3, max(genes[,2])/10^6 + 3), breaks = seq(0,300,5)) + theme(panel.background = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.line.x=element_line(), plot.margin = margin(0,0,0,0,'cm')) + xlab('Chromosome position (Mb)')

plotCell2 = function (cell) 
{
    annotate_figure(ggarrange(plotChr(cell, chr = 1), plotChr(cell, 
        chr = 2), plotChr(cell, chr = 3), plotChr(cell, chr = 4), 
        plotChr(cell, chr = 5), plotScaleBar, ncol = 1, nrow = 6, 
        align = "v", heights = c(rep(1, 5), 0.4)), left = text_grob("          % Transcripts from Col-0 allele", 
        rot = 90, size = 10), top = cell)
}

BIN2 = function (xx, bin = 10^6) 
{
    bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1)))
    colnames(out2) = colnames(g1)
    rownames(out2) = names(out)
    return(out2)
}


library(ggplot2)
library(ggpubr)
g1_bin = BIN2(g1)
g2_bin = BIN2(g2)
g1_frac = g1_bin/(g1_bin + g2_bin)
AlleleFrac = g1_frac
AlleleFrac[(g1_bin+g2_bin) < 10] = NA #remove bins with <10 genoinformative transcripts
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 10000)] ###491/1120 passed >= 10000, 5 of these are no cell controls
###124/192 passed >5000 89/192 passed >= 10000 from 12_2024_At
###478/672 passed >=5000, 318/672 passed >=10000 with the first big data set
###68/160 passed >5000 25/160 passed >= 10000 from 11_2024_At (A254-266, A267-277)
###124/192 passed >5000 89/192 passed >= 10000 from 12_2024_At (A268-287, A288-301)

#remove no cell controls that made it through 10,000 UMI cut off, there are 5
#AlleleFrac3 = as.data.frame(AlleleFrac2) %>% select(-c(No_cell[which(No_cell %in% colnames(AlleleFrac2))]))


library('ComplexHeatmap')

FracMono = 100*colMeans(abs(AlleleFrac2 - .5) >= .3, na.rm=T)

Heatmap(AlleleFrac2, cluster_rows=F, cluster_columns=T)                   



pseudocount = 1*10^6/quantile(colSums(D), p = .1)
A2 = sweep(D, 2, colSums(D), '/')*10^6  # Transcripts per million normalization
A2b = log(A2+pseudocount,10)  # Log transform
A3 = A2b[rowSums(A2[,colnames(AlleleFrac2)] > 0) >= 20,colnames(AlleleFrac2)]
A3 = A3[rank(-apply(A3,1,sd)) <= 1000,]
PCs = prcomp(t(A3))

###
ords = order(PCs$x[,1])

stages2 = as.character(At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))])
stages2 = factor(stages2, levels = c('tetrad', 'UM', 'UM/BM', 'BM', 'BM/Tri', 'Tri'))
No_cell2 = At_meta$No_cell_well[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))]
Yellow2 = At_meta$Yellow[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))]

svg('4-12_2024_At_cor_heatmap.svg', width=6, height=5)
Heatmap(cor(A3[,order(stages2)], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono[order(stages2)], UMIcounts = log(colSums(D[,colnames(AlleleFrac2)][,order(stages2)]),10),
    Stage = At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))][order(stages2)], "No cell" = No_cell2[order(stages2)], "Yellow" = Yellow2[order(stages2)],
    col = list(Stage = c("tetrad" = "#ffffff", "UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"), 
    "No cell" = c("Y" = "#111111", "N" = "#eeeeee"), "Yellow" = c("Y" = "#111111", "N" = "#eeeeee"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T, show_row_names = FALSE, show_column_names = FALSE)
dev.off()



A2d = A2b[rowSums(D[,colnames(A2b)] >= 10) >= 10, ]  # Require each gene to have at least 10 UMIs in at least 10 cells
fano = apply(A2d, 1, var)/rowMeans(A2d)  # fano factor is a measure of gene variance
hmat = A2d[rank(-fano[rownames(A2d)]) <= 500,colnames(AlleleFrac2)]
minmax = function(x) {
	sweep(x - log(pseudocount, 10), 1, apply(x - log(pseudocount, 10), 1, max), '/')
}


Heatmap(minmax(hmat[,order(stages2)]), name = 'expression
level (TPM)', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono[order(stages2)], UMIcounts = log(colSums(D[,colnames(AlleleFrac2)][,order(stages2)]),10), 
    Stage = At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))][order(stages2)], "No cell" = No_cell2[order(stages2)], "Yellow" = Yellow2[order(stages2)],
    col = list(Stage = c("tetrad" = "#ffffff", "UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"), 
    "No cell" = c("Y" = "#111111", "N" = "#eeeeee"), "Yellow" = c("Y" = "#111111", "N" = "#eeeeee"))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F, show_row_names = FALSE, show_column_names = FALSE)



FracMono_all = 100*colMeans(abs(AlleleFrac - .5) >= .3, na.rm=T)
plot(colSums(D), FracMono_all, cex = 3, pch=20, xlab = '# of transcripts', ylab = '% of genes with monoallelic expression')
points(colSums(D[,No_cell]), FracMono_all[No_cell], cex=3, pch=20, col = 'red2')
abline(v=10000)

over30000 = names(which(colSums(D) >= 2000)) #change this threshold to check different UMI cutoffs
A4 = A2b[rowSums(A2[,over30000] > 0) >= 20,over30000]
A4 = A4[rank(-apply(A4,1,sd)) <= 1000,]

stages3 = as.character(At_meta$Stage[which(colnames(AlleleFrac) %in% over30000)])
stages3 = factor(stages3, levels = c('tetrad', 'UM', 'UM/BM', 'BM', 'BM/Tri', 'Tri'))
No_cell3 = At_meta$No_cell_well[which(colnames(AlleleFrac) %in% over30000)]
Yellow3 = At_meta$Yellow[which(colnames(AlleleFrac) %in% over30000)]


Heatmap(cor(A4[,order(stages3)], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono_all[over30000][order(stages3)], UMIcounts = log(colSums(D[,over30000][,order(stages3)]),10),
    Stage = At_meta$Stage[which(colnames(AlleleFrac) %in% over30000)][order(stages3)], "No cell" = No_cell3[order(stages3)], "Yellow" = Yellow3[order(stages3)],
    col = list(Stage = c("tetrad" = "#ffffff", "UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"), 
    "No cell" = c("Y" = "#111111", "N" = "#eeeeee"), "Yellow" = c("Y" = "#111111", "N" = "#eeeeee"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T, show_row_names = FALSE, show_column_names = FALSE)



hmat2 = A2d[rank(-fano[rownames(A2d)]) <= 500,over30000]

Heatmap(minmax(hmat2[,order(stages3)]), name = 'expression
level (TPM)', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono_all[over30000][order(stages3)], UMIcounts = log(colSums(D[,over30000][,order(stages3)]),10),
    Stage = At_meta$Stage[which(colnames(AlleleFrac) %in% over30000)][order(stages3)], "No cell" = No_cell3[order(stages3)], "Yellow" = Yellow3[order(stages3)],
    col = list(Stage = c("tetrad" = "#ffffff", "UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"), 
    "No cell" = c("Y" = "#111111", "N" = "#eeeeee"), "Yellow" = c("Y" = "#111111", "N" = "#eeeeee"))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F, show_row_names = FALSE, show_column_names = FALSE)





binUse = which(abs(rowMeans(AlleleFrac, na.rm=T) - .5) < .4)  # Exclude bins with >90% of all transcripts mapping to the same allele across all samples
AlleleFrac[-binUse,] = NA
FracMono_all = 100*colMeans(abs(AlleleFrac - .5) >= .3, na.rm=T)
FracMono_all[which(colSums(!is.na(AlleleFrac)) < 10)] = NA

At_nc = rep(which(At_meta$No_cell_well == "Y"), times=8)
At_nc = At_nc[order(At_nc)]
At_nc2 = c(rep(NA, times=960), At_nc)
At_minus_nc = log(colSums(D) - (colSums(D[,At_nc2])))
At_minus_nc[which(At_meta$No_cell_well =="Y")] = NA

intermediates = names(FracMono_all[names(which(FracMono_all[names(which(FracMono_all > 0))] <= 20))])
intermediates2 = which(colnames(D) %in% names(which(colSums(D[,intermediates]) > 5000)))


FracMono_row = 100*rowMeans(abs(AlleleFrac[,intermediates] - .5) >= .3, na.rm=T)
FracMono_row[which(rowSums(!is.na(AlleleFrac[,intermediates])) < 10)] = NA


#svg('At_Allele_bin_hm.svg', width=20, height=12)
Heatmap(AlleleFrac[,intermediates2], name = 'At AlleleFrac', right_annotation = rowAnnotation("FracMono row" = FracMono_row),
    top_annotation = HeatmapAnnotation(UMIcounts = log(colSums(D[,intermediates2]),10), "Sample-NC" = At_minus_nc[intermediates2],
    "No cell" = At_meta$No_cell_well[intermediates2], "FracMono" = FracMono_all[intermediates2],
    "Stage" = At_meta$Stage[intermediates2],
    col = list(Stage = c("tetrad" = "#eeeeee", "UM" = "#cccccc", "UM/BM" = "#aaaaaa", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"), 
    "No cell" = c("Y" = "#111111", "N" = "#eeeeee"), "Fresh or Fixed" = c("Fresh" = "green3", "Fixed" = "yellow3"), 
    "Over 5,000 UMIs" = c("TRUE" = "red3", "FALSE" = "blue3"))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), 
    cluster_rows=F, cluster_columns=F, show_row_names = F, show_column_names = F)
#dev.off()

"Anther" = as.factor(At_meta$Bud[intermediates2]), 
which(rowSums(!is.na(AlleleFrac[,intermediates2])) > 15)



#########

BIN2 = function (xx, bin = 10^6) 
{
    bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1)))
    colnames(out2) = colnames(g1)
    rownames(out2) = names(out)
    return(out2)
}

library(ggplot2)
library(ggpubr)
g1_bin = BIN2(g1)
g2_bin = BIN2(g2)
g1_frac = g1_bin/(g1_bin + g2_bin)
AlleleFrac = g1_frac
AlleleFrac[(g1_bin+g2_bin) < 10] = NA #remove bins with <10 genoinformative transcripts
binUse = which(abs(rowMeans(AlleleFrac, na.rm=T) - .5) < .4)  # Exclude bins with >90% of all transcripts mapping to the same allele across all samples
AlleleFrac[-binUse,] = NA
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 10000)] 
FracMono_all = 100*colMeans(abs(AlleleFrac - .5) >= .3, na.rm=T)
FracMono_all[which(colSums(!is.na(AlleleFrac)) < 10)] = NA

FracMono2 = FracMono_all[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))]


pseudocount = 1*10^6/quantile(colSums(D), p = .1)
A2 = sweep(D, 2, colSums(D), '/')*10^6  # Transcripts per million normalization
A2b = log(A2+pseudocount,10)  # Log transform


stages2 = as.character(At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))])
stages2 = factor(stages2, levels = c('tetrad', 'UM', 'UM/BM', 'BM', 'BM/Tri', 'Tri'))
No_cell2 = At_meta$No_cell_well[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))]

A2d = A2b[rowSums(D[,colnames(A2b)] >= 10) >= 10, ]  # Require each gene to have at least 10 UMIs in at least 10 cells
fano = apply(A2d, 1, var)/rowMeans(A2d)  # fano factor is a measure of gene variance
hmat = A2d[rank(-fano[rownames(A2d)]) <= 500,colnames(AlleleFrac2)]
minmax = function(x) {
	sweep(x - log(pseudocount, 10), 1, apply(x - log(pseudocount, 10), 1, max), '/')
}

library(circlize)
FracMono_col = colorRamp2(c(0, 100), c("white", "purple4"))
UMI_col = colorRamp2(c(4, 5.3), c("white", "forestgreen"))

library('ComplexHeatmap')

svg('4-12_2024_At_gene_heatmap.svg', width=6, height=5)
Heatmap(minmax(hmat[,order(stages2)]), name = 'expression
level (TPM)', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono2[order(stages2)], UMIcounts = log(colSums(D[,colnames(AlleleFrac2)][,order(stages2)]),10), 
    Stage = At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))][order(stages2)], "No cell" = No_cell2[order(stages2)],
    col = list(FracMono = FracMono_col, UMIcounts = UMI_col, Stage = c("tetrad" = "#ffffff", "UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"), 
    "No cell" = c("Y" = "#111111", "N" = "#eeeeee"), "Yellow" = c("Y" = "#111111", "N" = "#eeeeee"))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F, show_row_names = FALSE, show_column_names = FALSE)
dev.off()


plotChr = function (cell, chr = 1, pad = 3) 
{
    Cdat = data.frame(f_col0 = AlleleFrac[, cell], Chr = floor(as.numeric(rownames(AlleleFrac))/10^6), 
        Position = (as.numeric(rownames(AlleleFrac))%%10^6) + 
            0.5)
    Cdat = Cdat[Cdat$Chr == chr, ]
    ggplot(Cdat) + geom_rect(data = data.frame(xmin = -pad, xmax = max(genes[,2])/10^6 + 
        pad, ymin = 0, ymax = 1), aes(xmin = xmin, xmax = xmax, 
        ymin = ymin, ymax = ymax), fill = "#EEEEEE") + geom_point(aes(y = f_col0, 
        x = Position), cex = 1) + geom_hline(yintercept = 0.5, 
        linetype = "dashed") + theme(panel.background = element_blank(), 
        axis.title = element_blank(), panel.border = element_blank(), 
        panel.grid = element_blank(), axis.ticks.x = element_blank(), 
        axis.text.x = element_blank()) + scale_y_continuous(breaks = seq(0, 
        1, 0.25), labels = c("0%", "", "50%", "", "100%"), limits = c(-0.4, 
        1.05)) + scale_x_continuous(expand = c(0, 0)) + annotate("segment", 
        x = -pad, xend = -pad, y = 0, yend = 1) + theme(plot.margin = margin(0, 
        0, 0.15, 0, "cm"))
}

plotScaleBar = ggplot() + scale_x_continuous(expand=c(0,0), limits = c(-3, max(genes[,2])/10^6 + 3), breaks = seq(0,300,5)) + theme(panel.background = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.line.x=element_line(), plot.margin = margin(0,0,0,0,'cm')) + xlab('Chromosome position (Mb)')


plotCell3 = function (cell) 
{
    annotate_figure(ggarrange(plotChr(cell, chr = 1), plotChr(cell, 
        chr = 2), plotChr(cell, chr = 3), plotScaleBar, ncol = 1, nrow = 4, 
        align = "v", heights = c(rep(1, 5), 0.4)), left = text_grob("          % Transcripts from Col-0 allele", 
        rot = 90, size = 10), top = cell)
}


svg('At_3chr_plots.svg', width = 4, height = 3)
ggarrange(plotCell3('A230-241_1s'), plotCell3('A242-253_61s'), ncol = 2, align = 'v')
dev.off()


Haplo = AlleleFrac2
Haplo[Haplo >= 0.7] = 1
Haplo[Haplo <= 0.3] = 0
Haplo[Haplo < 0.7 & Haplo > 0.3] = 0.5
Heatmap(Haplo, cluster_rows=F, cluster_columns=F, show_column_names=F, show_row_names=F)

XGEN = as.factor(At_meta$Xgen_primer[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))])
XGEN_cor = c(rep(NA, times = length(colnames(AlleleFrac2))))
for (x in c(3:6, 1, 7:12, 2, 13:15)){
    XGEN_cor[which(XGEN == levels(XGEN)[x])] = colMeans(cor(Haplo, use = 'pairwise.complete.obs', method = 'pearson')[which(XGEN == levels(XGEN)[x]),which(XGEN == levels(XGEN)[x])], na.rm=T)
}
names(XGEN_cor) = colnames(AlleleFrac2)

#Used these to check that XGEN_cor for loop worked
#colSums(cor(Haplo, use = 'pairwise.complete.obs', method = 'pearson')[1:8,1:8], na.rm=T)
#colSums(cor(Haplo, use = 'pairwise.complete.obs', method = 'pearson')[463:494,463:494], na.rm=T)



Cor_col = colorRamp2(c(-0.25, 0.4, 1), c("blue2", "white", "red2"))



Heatmap(cor(Haplo, use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono2, UMIcounts = log(colSums(D[,colnames(AlleleFrac2)]),10), 
    Cor = XGEN_cor, XGEN = XGEN,
    Stage = At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))], "No cell" = No_cell2,
    col = list(FracMono = FracMono_col, UMIcounts = UMI_col, Cor = Cor_col, Stage = c("tetrad" = "#ffffff", "UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"), 
    "No cell" = c("Y" = "#111111", "N" = "#eeeeee"), "Yellow" = c("Y" = "#111111", "N" = "#eeeeee"))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F, show_row_names = F, show_column_names = F)


not_na = names(which(colSums(!is.na(Haplo)) > 30))
Cor2_col = colorRamp2(c(0.4, 1), c("white", "red2"))


Heatmap(cor(Haplo[,not_na], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono2[not_na], UMIcounts = log(colSums(D[,colnames(AlleleFrac2)])[not_na],10), 
    Cor = XGEN_cor[not_na], XGEN = XGEN[not_na], Cor2 = XGEN_cor2,
    Stage = At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2[,not_na]))], "No cell" = No_cell2[not_na],
    col = list(FracMono = FracMono_col, UMIcounts = UMI_col, Cor = Cor_col, Cor2 = Cor2_col, Stage = c("tetrad" = "#ffffff", "UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"), 
    "No cell" = c("Y" = "#111111", "N" = "#eeeeee"), "Yellow" = c("Y" = "#111111", "N" = "#eeeeee"))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T, show_row_names = F, show_column_names = F)


cutoff = 0.4

Good_samps_og = names(which(XGEN_cor <= cutoff))
Good_samps = names(which(colSums(!is.na(Haplo[,Good_samps_og])) > 20))
names(XGEN) = colnames(AlleleFrac2)
names(No_cell2) = colnames(AlleleFrac2)

Heatmap(cor(Haplo[,Good_samps], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono2[Good_samps], UMIcounts = log(colSums(D[,colnames(AlleleFrac2)])[Good_samps],10), 
    Cor = XGEN_cor[Good_samps], XGEN = XGEN[Good_samps],
    Stage = At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2[,Good_samps]))], "No cell" = No_cell2[Good_samps],
    col = list(FracMono = FracMono_col, UMIcounts = UMI_col, Cor = Cor_col, Stage = c("tetrad" = "#ffffff", "UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"), 
    "No cell" = c("Y" = "#111111", "N" = "#eeeeee"), "Yellow" = c("Y" = "#111111", "N" = "#eeeeee"))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F, show_row_names = F, show_column_names = F)


Haplo_cor = cor(Haplo[,not_na], use = 'pairwise.complete.obs', method = 'pearson')
diag(Haplo_cor) = NA
XGEN_cor2 = apply(Haplo_cor, 1, max, na.rm=T)


Max_cor = c(rep(NA, times = length(colnames(AlleleFrac2))))
for (x in 1:length(colnames(AlleleFrac2))){
    Max_cor[x] = max(cor(Haplo, use = 'pairwise.complete.obs', method = 'pearson')[-x,x], na.rm=T)
}
names(Max_cor) = colnames(AlleleFrac2)

max(cor(Haplo, use = 'pairwise.complete.obs', method = 'pearson')[-1,1], na.rm=T)



Heatmap(Haplo[,Good_samps], name = 'Haplo', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono2[Good_samps], UMIcounts = log(colSums(D[,colnames(AlleleFrac2)])[Good_samps],10), 
    Cor = XGEN_cor[Good_samps], XGEN = XGEN[Good_samps],
    Stage = At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))][Good_samps], "No cell" = No_cell2[Good_samps],
    col = list(FracMono = FracMono_col, UMIcounts = UMI_col, Cor = Cor_col, Stage = c("tetrad" = "#ffffff", "UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"), 
    "No cell" = c("Y" = "#111111", "N" = "#eeeeee"), "Yellow" = c("Y" = "#111111", "N" = "#eeeeee"))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F, show_row_names = F, show_column_names = F)


Heatmap(minmax(hmat[,order(stages2)][,which((XGEN_cor <= cutoff)[order(stages2)])]), name = 'expression
level (TPM)', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono2[order(stages2)][which((XGEN_cor <= cutoff)[order(stages2)])], UMIcounts = log(colSums(D[,colnames(AlleleFrac2)][,order(stages2)][,which((XGEN_cor <= cutoff)[order(stages2)])]),10), 
    Stage = At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))][order(stages2)][which((XGEN_cor <= cutoff)[order(stages2)])], "No cell" = No_cell2[order(stages2)][which((XGEN_cor <= cutoff)[order(stages2)])],
    col = list(FracMono = FracMono_col, UMIcounts = UMI_col, Stage = c("tetrad" = "#ffffff", "UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"), 
    "No cell" = c("Y" = "#111111", "N" = "#eeeeee"), "Yellow" = c("Y" = "#111111", "N" = "#eeeeee"))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F, show_row_names = FALSE, show_column_names = FALSE)




###
cutoff = 0.2

Good_samps_og = names(which(XGEN_cor <= cutoff))
Good_samps = names(which(colSums(!is.na(Haplo[,Good_samps_og])) > 20))


intermediates = names(FracMono_all[names(which(FracMono_all[names(which(FracMono_all >= 10))] <= 20))])
intermediates2.0 = which(colnames(D) %in% names(which(colSums(D[,intermediates]) > 5000)))
intermediates2 = intermediates2.0[which(colnames(D[,intermediates2.0]) %in% Good_samps)][141:171]


FracMono_row = 100*rowMeans(abs(AlleleFrac[,intermediates2] - .5) >= .3, na.rm=T)
FracMono_row[which(rowSums(!is.na(AlleleFrac[,intermediates2])) < 10)] = NA
Frac_Most_common_row = abs(100*rowMeans(AlleleFrac[,intermediates2], na.rm=T) - 50) + 50
Frac_Most_common_row[which(rowSums(!is.na(AlleleFrac[,intermediates2])) < 10)] = NA
Bin_UMIcounts = log(rowSums(BIN2(D)[,intermediates2]),10)
Bin_UMIcounts[which(Bin_UMIcounts == -Inf)] = NA
Bin_UMI_col = colorRamp2(c(1.5, 4.8), c("white", "forestgreen"))

Bin_genes = rowMeans(BIN2(D > 3)[,intermediates2])

#svg('At_Allele_bin_hm.svg', width=20, height=12)
Heatmap(AlleleFrac[,intermediates2], name = 'At AlleleFrac', right_annotation = rowAnnotation("FracMono row" = FracMono_row, "Frac_Most
common_row" = Frac_Most_common_row, "Bin_UMIcounts" = Bin_UMIcounts, "Bin_genes>3" = Bin_genes, col = list("Bin_UMIcounts" = Bin_UMI_col)),
    top_annotation = HeatmapAnnotation("UMIcounts" = log(colSums(D[,intermediates2]),10), "Sample-NC" = At_minus_nc[intermediates2],
    "No cell" = At_meta$No_cell_well[intermediates2], "FracMono" = FracMono_all[intermediates2],
    "Stage" = At_meta$Stage[intermediates2],
    col = list(FracMono = FracMono_col, UMIcounts = UMI_col, Stage = c("tetrad" = "#eeeeee", "UM" = "#cccccc", "UM/BM" = "#aaaaaa", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"), 
    "No cell" = c("Y" = "#111111", "N" = "#eeeeee"), "Fresh or Fixed" = c("Fresh" = "green3", "Fixed" = "yellow3"), 
    "Over 5,000 UMIs" = c("TRUE" = "red3", "FALSE" = "blue3"))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), 
    cluster_rows=F, cluster_columns=F, show_row_names = F, show_column_names = F)
#dev.off()


c(3,4,6,7,8,9,20,21,27,28,31,33)

save(file = "4-12_At.Rda")
save(D,g1,g2,genes, file = "4-12_At.RData")


#download code and data from mouse single sperm RNAseq paper to get code for making haplotype calls
ssh jms53460@xfer.gacrc.uga.edu
cd /scratch/jms53460
mkdir mouse_code_data
cd mouse_code_data
curl -s https://zenodo.org/records/4162383/files/ohana_gims_code_data.tar.gz?download=1 > mouse_code_data.tar.gz
#gzip -d mouse_code_data.tar.gz
tar xf mouse_code_data.tar.gz -C /scratch/jms53460/mouse_code_data



#######################

plotCellChr = function(cell, chr, maxs = 20) {
	keeps = ((g1[,cell] + g2[,cell]) > 0) & (genes$Chr == chr)
    keeps2 = which(round(as.numeric(rownames(AlleleFrac))/(10^6)) == chr)
    keeps3 = which(!is.na(AlleleFrac[keeps2,cell]))

    g1a = g1[keeps,cell]
	g1a[g1a > maxs] = maxs
    g1b = g1[,cell]
    g1b[g1b > maxs] = maxs
	g2a = g2[keeps,cell]
	g2a[g2a > maxs] = maxs
    g2b = g2[,cell]
    g2b[g2b > maxs] = maxs

    par(mar = c(5.1, 5.1, 4.1, 4.1))
	plot(genes$Position[keeps], g1a, pch = 19, cex=0.5, col = 'red', ylab=NA, xlab = 'chromosome position (Mb)', ylim = c(-maxs,maxs), xaxt = 'n', yaxt = 'n')
	abline(h=0)
	for (ii in which(keeps)) { lines(rep(genes$Position[ii], times=2), c(g1b[ii], -g2b[ii])) }
	points(genes$Position[keeps], -g2a, pch = 19, cex=0.5, col = 'blue')
	points(genes$Position[keeps], g1a, pch = 19, cex=0.5, col = 'red')
    lines(((1:length(keeps2) - 0.5)*10^6)[keeps3], (AlleleFrac[names(keeps3),cell]*40)-20, col='purple2', lwd = 2, lty='dashed')

    axis(1, at=seq(0,max(genes$Position[keeps]),(5*10^6)), labels=seq(0,max(genes$Position[keeps])/(10^6),5))
    axis(2, at=seq(-20,0,10), labels=c(20,10,0), col = 'blue', col.axis = 'blue', las=2)
    axis(2, at=seq(20,0,-10), labels=c(20,10,0), col = 'red', col.axis = 'red', las=2)
    axis(2, at=0, labels=0, las=2)
    axis(4, at=seq(-20,20,10), labels=seq(0,100,25), col = 'purple2', col.axis = 'purple2', las=2)
    mtext("% of transcripts from Col-0 allele", side=4, line=3, col="purple2")
    mtext("transcript counts", side=2, line=4)
    mtext("Col-0", side=2, at=10, line=2.5, col="red")
    mtext("Ler-0", side=2, at=-10, line=2.5, col="blue")
}
plotCellChr(cell = 'A194-205_55s', 4)

par(mar = c(bottom, left, top, right))
par(mar = c(5.1, 4.1, 4.1, 2.1))


svg('At_UMI_counts_plot.svg', width=5, height=4)
plotCellChr(cell = 'A194-205_55s', 4)
dev.off()

plotCellChr(cell = "A288-301_6s", 4)
plotCellChr(cell = 'A230-241_1s', 2)

cell = "A194-205_55s"
cell = "A288-301_6s"
maxs = 20
keeps = ((g1[,cell] + g2[,cell]) > 0) & (genes$Chr == 2)
	g1a = g1[keeps,cell]
	g1a[g1a > maxs] = maxs
	g2a = g2[keeps,cell]
	g2a[g2a > maxs] = maxs

	plot(genes$Position[keeps], g1a, pch = 19, col = 'red', ylab = 'Counts', xlab = 'position', ylim = c(-maxs,maxs))
	abline(h=0)
	for (ii in which(keeps)) { lines(rep(genes$Position[ii], times=2), c(g1[ii,cell], -g2[ii,cell])) }
	points(genes$Position[keeps], -g2a, pch = 19, col = 'blue')
	points(genes$Position[keeps], g1a, pch = 19, col = 'red')

keeps2 = ((g1[,cell] + g2[,cell]) > 2) & (genes$Chr == chr)
names(which(abs(rowMeans(g1[keeps2,])/(rowMeans(g1[keeps2,])+rowMeans(g2[keeps2,])) - .5) <= .4))
    g1c = g1[keeps3,cell]
    g2c = g2[keeps3,cell]
#lines(genes[keeps3,2], ((g1c/(g1c + g2c))*40)-20, col='purple2', lty='dashed')




ratio = g1/(g1+g2)
ratio[(g1+g2) < 5] = NA
geneUse = which(abs(rowMeans(g1/(g1+g2), na.rm=T) - .5) < .4)  # Exclude genes with >90% of all transcripts mapping to the same allele across all samples
ratio[-geneUse,] = NA

ratioHist = function(cell = NULL, vals = NULL) {
	if (is.null(vals)) { vals = ratio[,paste(cell)] } 
	gghistogram(data.frame(ratio = vals[geneUse]), x = 'ratio', fill = 'black', bins = 15) + theme(strip.background = element_blank(), strip.text.x = element_blank(), legend.position = 'none') + scale_y_continuous(expand = c(0,0)) + xlab('% transcripts 
from Col-0 allele') + ylab('genes') + scale_x_continuous(breaks = seq(0,1,.1), labels=c('0', rep('',4), '50', rep('',4), '100')) }

ratioHist('A194-205_76s')
ratioHist('A242-253_13s')

svg('At_pollen_hist.svg', width=2.2, height=2)
ratioHist('A242-253_13s')
dev.off()


#loaded maize data and ran code up to where g1 and g2 are made

ratio_Zm = g1/(g1+g2)
ratio_Zm[(g1+g2) < 5] = NA
geneUse_Zm = which(abs(rowMeans(g1/(g1+g2), na.rm=T) - .5) < .4)  # Exclude genes with >90% of all transcripts mapping to the same allele across all samples
ratio_Zm[-geneUse_Zm,] = NA

ratioHist_Zm = function(cell = NULL, vals = NULL) {
	if (is.null(vals)) { vals = ratio_Zm[,paste(cell)] } 
	gghistogram(data.frame(ratio_Zm = vals[geneUse_Zm]), x = 'ratio_Zm', fill = 'black', bins = 15) + theme(strip.background = element_blank(), strip.text.x = element_blank(), legend.position = 'none') + scale_y_continuous(expand = c(0,0)) + xlab('% transcripts 
from B73 allele') + ylab('genes') + scale_x_continuous(breaks = seq(0,1,.1), labels=c('0', rep('',4), '50', rep('',4), '100')) }

ratioHist_Zm('Lane1_RPI6_90s_g1') #pollen
ratioHist_Zm('Lane1_RPI5_13s_g1') #pollen mother cell

#2.2 x 8 for nrow=4
svg('Zm_At_Sl_pollen_hist.svg', width=9, height=2)
ggarrange(ratioHist_Zm('Lane1_RPI5_13s_g1'), ratioHist_Zm('Lane1_RPI6_90s_g1'), ratioHist('A242-253_13s'), ratioHist_Sl('S14-25_10s'), ncol = 4, align = 'v')
dev.off()



for (x in 1:96){
    print(x)
    print(summary(colSums(D[,grep(paste('_', x, 's', sep=''), colnames(D))])))
}

by(colSums(D), sub('.+_','',colnames(D)), summary)

save(D,g1,g2,genes, file = "4-12_At.RData")



________________________________

#load("4-12_At.RData")

load("At_data_9_2025.RData")

library(readxl)
At_Stages <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/At_Stages2.xlsx")

At_meta <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/At_meta2.xlsx")
At_meta = as.data.frame(At_meta)
rownames(At_meta) = At_meta$Sample
At_meta[grep("tetrad", At_meta[,9]),9] = "tetrads"
At_meta[which(At_meta[,8] == "35"),8] = "0.35"

No_cell = At_meta$Sample[which(At_meta$No_cell_well == 'Y')]

summary(colSums(D[,No_cell]))


plotChr = function (cell, chr = 1, pad = 3) 
{
    Cdat = data.frame(f_col0 = AlleleFrac[, cell], Chr = floor(as.numeric(rownames(AlleleFrac))/10^6), 
        Position = (as.numeric(rownames(AlleleFrac))%%10^6) + 
            0.5)
    Cdat = Cdat[Cdat$Chr == chr, ]
    ggplot(Cdat) + geom_rect(data = data.frame(xmin = -pad, xmax = max(genes[,2])/10^6 + 
        pad, ymin = 0, ymax = 1), aes(xmin = xmin, xmax = xmax, 
        ymin = ymin, ymax = ymax), fill = "#EEEEEE") + geom_point(aes(y = f_col0, 
        x = Position), cex = 3) + geom_hline(yintercept = 0.5, 
        linetype = "dashed") + theme(panel.background = element_blank(), 
        axis.title = element_blank(), panel.border = element_blank(), 
        panel.grid = element_blank(), axis.ticks.x = element_blank(), 
        axis.text.x = element_blank()) + scale_y_continuous(breaks = seq(0, 
        1, 0.25), labels = c("0%", "", "50%", "", "100%"), limits = c(-0.4, 
        1.05)) + scale_x_continuous(expand = c(0, 0)) + annotate("segment", 
        x = -pad, xend = -pad, y = 0, yend = 1) + theme(plot.margin = margin(0, 
        0, 0.15, 0, "cm"))
}

plotScaleBar = ggplot() + scale_x_continuous(expand=c(0,0), limits = c(-3, max(genes[,2])/10^6 + 3), breaks = seq(0,300,5)) + theme(panel.background = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.line.x=element_line(), plot.margin = margin(0,0,0,0,'cm')) + xlab('Chromosome position (Mb)')

plotCell2 = function (cell) 
{
    annotate_figure(ggarrange(plotChr(cell, chr = 1), plotChr(cell, 
        chr = 2), plotChr(cell, chr = 3), plotChr(cell, chr = 4), 
        plotChr(cell, chr = 5), plotScaleBar, ncol = 1, nrow = 6, 
        align = "v", heights = c(rep(1, 5), 0.4)), left = text_grob("          % Transcripts from Col-0 allele", 
        rot = 90, size = 10), top = cell)
}

BIN2 = function (xx, bin = 10^6) 
{
    bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1)))
    colnames(out2) = colnames(g1)
    rownames(out2) = names(out)
    return(out2)
}


library(ggplot2)
library(ggpubr)
g1_bin = BINR(g1)
g2_bin = BINR(g2)
AlleleFrac_bin = g1_bin/(g1_bin + g2_bin)
AlleleFrac_bin[(g1_bin+g2_bin) < 10] = NA #remove bins with <10 genoinformative transcripts
R_binUse = which(abs(rowMeans(AlleleFrac_bin, na.rm=T) - .5) < .4)  # Exclude bins with >90% of all transcripts mapping to the same allele across all samples
AlleleFrac_bin[-R_binUse,] = NA
FracMono_all = 100*colMeans(abs(AlleleFrac_bin - .5) >= .3, na.rm=T)

over30k = names(which(colSums(D) >25000))
length(which(At_meta[over30k,9] == "tetrads")) #2 tetrads, 25 UM, 8 UM/BM, 44 BM, 2 BM/Tri, 67 Tri passed QC >30k
length(which(At_meta[over30k,9] == "tetrads")) #2 tetrads, 33 UM, 11 UM/BM, 54 BM, 2 BM/Tri, 71 Tri passed QC >25k
length(which(At_meta[which(At_meta[,9] == "Tri"),12] == "N")) #7 tetrads, 354 UM, 93 UM/BM, 301 BM, 45 BM/Tri, 300 Tri samples total
#28.6% tetrads, 7.1% UM, 8.6% UM/BM, 14.6% BM, 4.4% BM/Tri, 22.3% Tri passed QC >30k

pseudocount = 1*10^6/quantile(colSums(D), p = .1)
A2 = sweep(D, 2, colSums(D), '/')*10^6  # Transcripts per million normalization
A2b = log(A2+pseudocount,10)  # Log transform


A2d = A2b[rowSums(D[,colnames(A2b)] >= 10) >= 10, ]  # Require each gene to have at least 10 UMIs in at least 10 cells
fano = apply(A2d, 1, var)/rowMeans(A2d)  # fano factor is a measure of gene variance
hmat = A2d[rank(-fano[rownames(A2d)]) <= 500,over30k]
minmax = function(x) {
	sweep(x - log(pseudocount, 10), 1, apply(x - log(pseudocount, 10), 1, max), '/')
}

library(circlize)
HapFrac_col = colorRamp2(c(0.5, 1), c("white", "purple4"))
UMI_col = colorRamp2(c(4.4, 5.3), c("white", "forestgreen"))


#source('Pseudotime Velocity Functions.R')


stages = as.character(At_meta[over30k,9])
stages = factor(stages, levels = c('tetrads','UM','UM/BM','BM','BM/Tri','Tri'))

pseudotime = function (x, stages) 
{
    PCs = pcaFn(x)
    pT = principal_curve(PCs)$lambda
    pT = pT * sign(cor(pT, stages[rownames(x)]))
    names(pT) = rownames(x)
    return(pT)
}

pVel = function (xx, nboot = 200) 
{
    xx = t(xx)
    stages = as.numeric(stages)
    names(stages) = rownames(xx)
    set.seed(1)
    out = NULL
    for (i in 1:nboot) {
        samps = sample(rownames(xx), replace = T)
        pT = pseudotime(xx[samps, ], stages)
        #pT = pseudotime(xx[samps, ])


        #pT[, 2] = pT[, 2] - mean(apply(pT, 1, diff), na.rm = T)
        #pT = rowMeans(pT, na.rm = T)
        pT = 100 * (pT - quantile(pT, 0.1))/diff(quantile(pT, c(0.1, 0.9)))
        names(pT) = samps
        out = c(out, pT)
        if (i == 1) {
            cat("0% |---------|---------|---------|---------| 100%\n   .")
        }
        if ((i%%round(nboot/40)) == 0) {
            cat(".")
        }
    }
    pT = by(out, names(out), mean)[rownames(xx)]
    pV = c(rep(NA, 4), velFn(pT[order(pT)]), rep(NA, 4))
    pV = pV/median(pV, na.rm = T)
    return(list(pT = pT, pV = pV))
}

pseudos = pVel(A2d[rank(-fano) <= 2000,over30k], nboot = 80)  # Calculate pseudotime and pseudotime velocity using accessory functions in R script
ords = order(stages, pseudos$pT)  # order samples based on morphologically-defined stage, then order samples within a stage by pseudotime

#peaks = pseudoPeaks(pseudos,ords)

hmat2 = A2d[,over30k][rank(-fano[rownames(A2d)]) <= 500,ords]

#Bud_length_col = colorRamp2(c(0.5, 2.2), c("white", "#A8450C"))
#library(seriation)
o1 = seriate(dist(t(scale(t(hmat2)))), method = "OLO")

svg('At_expression_AntherL.svg', width=9, height=7)
Heatmap(minmax(hmat2), name = 'expression
level (TPM)', 
    top_annotation = HeatmapAnnotation(Stage = as.matrix(At_meta[over30k,9][ords]),
    HapFrac = HapFrac_all_fixed[over30k][ords], UMIcounts = log(colSums(D[,over30k][,ords]),10), Bud_length = as.numeric(At_meta[over30k,7][ords]),
    col = list(Stage = c("tetrads" = "#EB1E2C","tetrad_sep" = "#FD6F30", "UM" = "#F9A729", "UM/BM" = "#F9D23C", "BM" = "#5FBB68", 
    "BM/Tri" = "#64CDCC", "Tri" = "#A4A4D5", "Tri_shed" = "#BBC9E5"), HapFrac = HapFrac_col, UMIcounts = UMI_col, Bud_length = Bud_length_col)),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=as.dendrogram(o1[[1]]), cluster_columns=F, show_row_names = FALSE, show_column_names = FALSE)
dev.off()

Heatmap(minmax(hmat2), name = 'expression
level (TPM)', 
    top_annotation = HeatmapAnnotation(Stage = as.matrix(At_meta[over30k,9][ords]),
    HapFrac = HapFrac_all_fixed[over30k][ords], UMIcounts = log(colSums(D[,over30k][,ords]),10), Yellow = At_meta[over30k,13][ords],
    col = list(Stage = c("tetrads" = "#EB1E2C","tetrad_sep" = "#FD6F30", "UM" = "#F9A729", "UM/BM" = "#F9D23C", "BM" = "#5FBB68", 
    "BM/Tri" = "#64CDCC", "Tri" = "#A4A4D5", "Tri_shed" = "#BBC9E5"), HapFrac = HapFrac_col, UMIcounts = UMI_col, Yellow = c("Y" = "yellow", "N" = "white"))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=as.dendrogram(o1[[1]]), cluster_columns=F, show_row_names = FALSE, show_column_names = FALSE)


svg('At_expression_10_8_25.svg', width=6, height=4)
Heatmap(minmax(hmat2), name = 'expression
level (TPM)', heatmap_legend_param = list(at = c(0, 1), labels = c(0, "max")),
    top_annotation = HeatmapAnnotation(Stage = as.matrix(At_meta[over30k,9][ords]), 
    HapFrac = HapFrac_all_fixed[over30k][ords], 
    col = list(Stage = c("tetrads" = "#EB1E2C", "UM" = "#F9A729", "UM/BM" = "#F9D23C", "BM" = "#5FBB68", 
    "BM/Tri" = "#64CDCC", "Tri" = "#A4A4D5"), HapFrac = HapFrac_col),
    annotation_legend_param = list(Stage = list(at = c("tetrads", "UM", "UM/BM", "BM", "BM/Tri", "Tri")))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=as.dendrogram(o1[[1]]), cluster_columns=F, show_row_names = FALSE, show_column_names = FALSE)
dev.off()


svg('At_expression_10_8_25_noHap.svg', width=6, height=4)
Heatmap(minmax(hmat2), name = 'expression
level (TPM)', heatmap_legend_param = list(at = c(0, 1), labels = c(0, "max")),
    top_annotation = HeatmapAnnotation(Stage = as.matrix(At_meta[over30k,9][ords]), 
    col = list(Stage = c("tetrads" = "#EB1E2C", "UM" = "#F9A729", "UM/BM" = "#F9D23C", "BM" = "#5FBB68", 
    "BM/Tri" = "#64CDCC", "Tri" = "#A4A4D5")),
    annotation_legend_param = list(Stage = list(at = c("tetrads", "UM", "UM/BM", "BM", "BM/Tri", "Tri")))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=as.dendrogram(o1[[1]]), cluster_columns=F, show_row_names = FALSE, show_column_names = FALSE)
dev.off()



At_hmat2 = draw(Heatmap(minmax(hmat2), name = 'expression 
level (TPM)', 
    top_annotation = HeatmapAnnotation(Stage = as.matrix(At_meta[over30k,9][ords]), 
    HapFrac = HapFrac_all_fixed[over30k][ords], UMIcounts = log(colSums(D[,over30k][,ords]),10),
    col = list(Stage = c("tetrads" = "#EB1E2C","tetrad_sep" = "#FD6F30", "UM" = "#F9A729", "UM/BM" = "#F9D23C", "BM" = "#5FBB68", 
    "BM/Tri" = "#64CDCC", "Tri" = "#A4A4D5", "Tri_shed" = "#BBC9E5"), HapFrac = HapFrac_col, UMIcounts = UMI_col)),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=as.dendrogram(o1[[1]]), cluster_columns=F, show_row_names = TRUE, show_column_names = FALSE))
row_order(At_hmat2)

At_hmat2_genes = rownames(hmat2[row_order(At_hmat2),])

check_annot = matrix(data=NA, nrow=length(1:9), ncol=1)
for (n in 1:9){
    check_annot[(n)] = paste("grep", At_hmat2_genes[n], "TAIR10.1_Col_5.gff")
}
print(as.data.frame(check_annot), row.names=F) #These genes are almost all ribosomal RNAs. The first is a signal recognition particle 7S RNA, one is uncharacterized LOC138338492
#This was done with 30,000 UMI cutoff
#1:9 are:
ID=gene-AT1G76490;Name=HMG1;Note=Encodes a 3-hydroxy-3-methylglutaryl coenzyme A reductase%2C which is involved in melavonate biosynthesis and performs the first committed step in isoprenoid biosynthesis. Expression is activated in dark in leaf tissue but not controlled by light in the root 
ID=gene-AT2G23170;Name=GH3.3;Note=encodes an IAA-amido synthase that conjugates Asp and other amino acids to auxin in vitro
ID=gene-AT1G77590;Name=LACS9;Note=Encodes major plastidic long chain acyl-CoA synthetase with a slight substrate preference of oleic acid over any of the other fatty acids
ID=gene-AT3G47340;Name=ASN1;Note=encodes a glutamine-dependent asparagine synthetase%2C the predicted ASN1 peptide contains a purF-type glutamine-binding domain%2C and is expressed predominantly in shoot tissues%2C where light has a negative effect on its mRNA accumulation. Expression is induced within 3 hours of dark treatment%2C in senescing leaves and treatment with exogenous photosynthesis inhibitor. Induction of gene expression was suppressed in excised leaves supplied with sugar. The authors suggest that the gene's expression pattern is responding to the level of sugar in the cell
ID=gene-AT1G20450;Name=ERD10;Note=Encodes a gene induced by low temperature and dehydration. Inhibits e.coli growth while overexpressed. Belongs to the dehydrin protein family%2C which contains highly conserved stretches of 7-17 residues that are repetitively scattered in their sequences%2C the K-%2C S-%2C Y- and lysine rich segments. LTI29 and LTI30 double overexpressors confer cold tolerance. Localized to membranes and cytoplasm
ID=gene-AT1G20440;Name=COR47;Note=Belongs to the dehydrin protein family%2C which contains highly conserved stretches of 7-17 residues that are repetitively scattered in their sequences%2C the K-%2C S-%2C Y- and lysine rich segments. Cold regulated gene%2C amino acid sequence homology with Group II LEA (late embryogenesis abundant) proteins. Also responds to osmotic stress%2C ABA%2C dehydration and inhibits e.coli growth while overexpressed. COR47 and RAB18 double overexpressor plants are cold tolerant
ID=gene-AT3G10985;Name=SAG20;Note=A senescence-associated gene whose expression is induced in response to treatment with Nep1%2C a fungal protein that causes necrosis
ID=gene-AT3G22910;Name=AT3G22910;gene_synonym=ACA13,auto-inhibited Ca2+ ATPase 13
ID=gene-AT4G24380;Name=AT4G24380;gene_synonym=T22A6.210,T22A6_210;product=dihydrofolate reductase
