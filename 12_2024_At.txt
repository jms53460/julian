Transfering Dec2024seq data onto the cluster and backing it up
ssh jms53460@xfer.gacrc.uga.edu
cd /work/bnlab
mkdir Dec2024seq
cd Dec2024seq
ftp 38.122.175.98 2223
#enter the username: Brad.Nelms
#enter the password: Un8Czp
#the code they gave us to use for downloading the files with ftp didn't work at all.
get NE56-12-S12_S166_L007_R2_001.fastq.gz
get NE56-14-M_S178_L007_R1_001.fastq.gz
get S72-21-13-no2_S130_L007_R1_001.fastq.gz 
get NE56-12-S1_S168_L007_R1_001.fastq.gz 
get S72-21-9_S144_L007_R2_001.fastq.gz
get M72-3_S160_L007_R2_001.fastq.gz 
get S72-21-16-no2_S133_L007_R1_001.fastq.gz
get S72-21-4-no3_S131_L007_R1_001.fastq.gz
get S72-21-11_S143_L007_R2_001.fastq.gz
get NE56-12-S3_S170_L007_R1_001.fastq.gz
get M72-3_S160_L007_R1_001.fastq.gz 
get NE56-12-S1_S168_L007_R2_001.fastq.gz 
get S72-21-9_S144_L007_R1_001.fastq.gz 
get NE56-14-M_S178_L007_R2_001.fastq.gz 
get NE56-12-S12_S166_L007_R1_001.fastq.gz 
get S72-21-13-no2_S130_L007_R2_001.fastq.gz 
get S72-21-11_S143_L007_R1_001.fastq.gz
get NE56-12-S3_S170_L007_R2_001.fastq.gz 
get S72-21-4-no3_S131_L007_R2_001.fastq.gz
get S72-21-16-no2_S133_L007_R2_001.fastq.gz 
get S26-37_S190_L007_R1_001.fastq.gz
get NE56-12-S8_S180_L007_R1_001.fastq.gz
get A268-287_S187_L007_R2_001.fastq.gz
get NE56-12-S4_S181_L007_R2_001.fastq.gz
get NE56-3-M_S174_L007_R1_001.fastq.gz 
get S72-3-8_S162_L007_R2_001.fastq.gz 
get S72-21-3_S154_L007_R1_001.fastq.gz
get A268-287_S187_L007_R1_001.fastq.gz
get S26-37_S190_L007_R2_001.fastq.gz 
get NE56-12-S8_S180_L007_R2_001.fastq.gz
get S72-3-8_S162_L007_R1_001.fastq.gz 
get S72-21-3_S154_L007_R2_001.fastq.gz
get NE56-12-S4_S181_L007_R1_001.fastq.gz
get NE56-3-M_S174_L007_R2_001.fastq.gz
get NE56-12-S13_S165_L007_R1_001.fastq.gz
get S72-21-8-no2_S134_L007_R2_001.fastq.gz
get S72-21-5-no2_S138_L007_R2_001.fastq.gz
get M72-3_S159_L007_R1_001.fastq.gz
get S72-21-8-no2_S134_L007_R1_001.fastq.gz
get NE56-12-S13_S165_L007_R2_001.fastq.gz
get M72-3_S159_L007_R2_001.fastq.gz
get S72-21-5-no2_S138_L007_R1_001.fastq.gz
get S72-21-7-no2_S146_L007_R2_001.fastq.gz
get NE56-12-S7_S169_L007_R1_001.fastq.gz
get S72-21-1-no2_S126_L007_R1_001.fastq.gz
get M72-21_S128_L007_R1_001.fastq.gz
get M72-21-1_S147_L007_R1_001.fastq.gz
get S72-3-6_S158_L007_R2_001.fastq.gz
get S72-21-2-no3_S127_L007_R1_001.fastq.gz
get NE56-12-M2_S177_L007_R2_001.fastq.gz
get S72-21-11-no2_S135_L007_R1_001.fastq.gz
get M72-21-1_S147_L007_R2_001.fastq.gz
get M72-21_S128_L007_R2_001.fastq.gz
get S72-3-6_S158_L007_R1_001.fastq.gz
get S72-21-1-no2_S126_L007_R2_001.fastq.gz
get S72-21-7-no2_S146_L007_R1_001.fastq.gz
get NE56-12-S7_S169_L007_R2_001.fastq.gz
get S72-21-11-no2_S135_L007_R2_001.fastq.gz
get NE56-12-M2_S177_L007_R1_001.fastq.gz
get S72-21-2-no3_S127_L007_R2_001.fastq.gz
get S72-21-18_S157_L007_R2_001.fastq.gz
get A288-301_S188_L007_R2_001.fastq.gz
get NE56-12-S11_S175_L007_R2_001.fastq.gz
get S72-21-8-no3_S155_L007_R2_001.fastq.gz
get NE56-3-S1_S173_L007_R2_001.fastq.gz
get NE56-3-M2_S182_L007_R2_001.fastq.gz
get S72-21-5-no3_S132_L007_R2_001.fastq.gz
get S72-21-9-no2_S136_L007_R1_001.fastq.gz
get NE56-3-S11_S186_L007_R2_001.fastq.gz
get S72-3-11_S164_L007_R1_001.fastq.gz
get S72-21-3-no2_S141_L007_R2_001.fastq.gz
get S72-21-4-no2_S140_L007_R1_001.fastq.gz
get S72-21-7-no3_S150_L007_R1_001.fastq.gz
get S72-21-2-no3_S129_L007_R1_001.fastq.gz
get NE56-3-S1_S173_L007_R1_001.fastq.gz
get S72-21-8-no3_S155_L007_R1_001.fastq.gz
get NE56-12-S11_S175_L007_R1_001.fastq.gz 
get A288-301_S188_L007_R1_001.fastq.gz
get S72-21-18_S157_L007_R1_001.fastq.gz
get S72-21-7-no3_S150_L007_R2_001.fastq.gz
get S72-21-2-no3_S129_L007_R2_001.fastq.gz
get S72-3-11_S164_L007_R2_001.fastq.gz
get S72-21-3-no2_S141_L007_R1_001.fastq.gz
get S72-21-4-no2_S140_L007_R2_001.fastq.gz
get S72-21-9-no2_S136_L007_R2_001.fastq.gz
get NE56-3-S11_S186_L007_R1_001.fastq.gz
get NE56-3-M2_S182_L007_R1_001.fastq.gz
get S72-21-5-no3_S132_L007_R1_001.fastq.gz
get NE56-3-S6_S171_L007_R1_001.fastq.gz
get S72-21-12_S156_L007_R1_001.fastq.gz
get S72-21-10-no2_S137_L007_R2_001.fastq.gz
get NE56-12-S6_S179_L007_R1_001.fastq.gz
get L66-5_S500_L007_R2_001.fastq.gz
get S72-3-4_S161_L007_R2_001.fastq.gz
get NE56-12-S6_S179_L007_R2_001.fastq.gz
get S72-21-10-no2_S137_L007_R1_001.fastq.gz
get NE56-3-S6_S171_L007_R2_001.fastq.gz
get S72-21-12_S156_L007_R2_001.fastq.gz
get L66-5_S500_L007_R1_001.fastq.gz
get S72-3-4_S161_L007_R1_001.fastq.gz
get S72-21-12-no2_S152_L007_R2_001.fastq.gz
get S72-21-3-no3_S149_L007_R1_001.fastq.gz
get NE56-12-S16_S183_L007_R2_001.fastq.gz
get S14-25_S189_L007_R1_001.fastq.gz
get S72-21-8_S145_L007_R2_001.fastq.gz
get NE56-12-S14_S172_L007_R2_001.fastq.gz
get S72-21-1-no3_S151_L007_R2_001.fastq.gz
get M72-21-2_S148_L007_R2_001.fastq.gz
get NE56-14-S4_S163_L007_R2_001.fastq.gz
get NE56-12-S16_S183_L007_R1_001.fastq.gz
get S72-21-12-no2_S152_L007_R1_001.fastq.gz
get S72-21-3-no3_S149_L007_R2_001.fastq.gz 
get S72-21-1-no3_S151_L007_R1_001.fastq.gz
get NE56-14-S4_S163_L007_R1_001.fastq.gz
get M72-21-2_S148_L007_R1_001.fastq.gz
get S72-21-8_S145_L007_R1_001.fastq.gz
get NE56-12-S14_S172_L007_R1_001.fastq.gz
get S14-25_S189_L007_R2_001.fastq.gz 
get NE56-14-S6_S176_L007_R1_001.fastq.gz
get S72-21-7_S153_L007_R1_001.fastq.gz
get NE56-12-S15_S167_L007_R2_001.fastq.gz
get S72-21-18-no2_S139_L007_R2_001.fastq.gz
get NE56-3-S19_S184_L007_R1_001.fastq.gz
get S72-21-15_S142_L007_R1_001.fastq.gz 
get NE56-3-S3_S185_L007_R1_001.fastq.gz
get S72-21-6-no2_S125_L007_R1_001.fastq.gz
get NE56-12-S15_S167_L007_R1_001.fastq.gz
get S72-21-7_S153_L007_R2_001.fastq.gz
get NE56-14-S6_S176_L007_R2_001.fastq.gz
get S72-21-6-no2_S125_L007_R2_001.fastq.gz
get md5.txt
get NE56-3-S3_S185_L007_R2_001.fastq.gz
get S72-21-15_S142_L007_R2_001.fastq.gz
get S72-21-18-no2_S139_L007_R1_001.fastq.gz
get NE56-3-S19_S184_L007_R2_001.fastq.gz

mkdir 12_2024_At
mkdir 12_2024_At/Raw_Data
cp /work/bnlab/Dec2024seq/A* /scratch/jms53460/12_2024_At
mkdir 12_2024_Sl
mkdir 12_2024_Sl/Raw_Data
cp /work/bnlab/Dec2024seq/S14* /scratch/jms53460/12_2024_Sl/Raw_Data
cp /work/bnlab/Dec2024seq/S26* /scratch/jms53460/12_2024_Sl/Raw_Data

scp sapelo2:/scratch/jms53460/12_2024_At/Raw_Data/*.fastq.gz 'D:\12_2024_At_Data'
scp sapelo2:/scratch/jms53460/12_2024_Sl/Raw_Data/*.fastq.gz 'D:\12_2024_Sl_Data'

scp sapelo2:/work/bnlab/Dec2024seq/* 'D:\Dec2024Seq'

cp -r /home/jms53460/Ler_0_N-masked /scratch/jms53460/12_2024_At/
cp /home/jms53460/CELSeq_barcodes.txt /scratch/jms53460/12_2024_At/
cp /home/jms53460/Ler_SNPs.tab /scratch/jms53460/12_2024_At/
cp /home/jms53460/TAIR10.1_Col_5.gff /scratch/jms53460/12_2024_At/




#Demultiplex data in a way that it is nearly ready for upload with SRA.

#!/bin/bash
#SBATCH --job-name=At_dm                                                  # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=6:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_At/At_dm.out                   # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_At/At_dm.err                    # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_At/
mkdir Demultiplexed
ml Miniconda3/23.5.2-0
source activate /home/jms53460/Fastq-Multx

for file in Raw_Data/*_R1_*.gz; do
    filename=$(basename "$file")
    file2=$(echo "$filename" | sed 's/_R1.*//' | sed 's/_R2_001.fastq.gz//')

    if [ ! -f "Demultiplexed/""$file2""_1s.fastq.gz" ]; then
        module load fastp/0.23.2-GCC-11.3.0
	    fastp -w 6 -i "$file" -I "Raw_Data/""$file2""_R2_001.fastq.gz" -o "Demultiplexed/umi_""$file2""_R1.fastq.gz" -O "Demultiplexed/umi_""$file2""_R2.fastq.gz" -A -Q -L -G --umi --umi_loc read2 --umi_len 10 --umi_prefix UMI

	    fastq-multx -b -B "CELSeq_barcodes.txt" -m 0 "Demultiplexed/umi_""$file2""_R2.fastq.gz" "Demultiplexed/umi_""$file2""_R1.fastq.gz" "Raw_Data/""$file2""_R2_001.fastq.gz" -o "Demultiplexed/""$file2""_%_R2.fastq.gz" "Demultiplexed/""$file2""_%.fastq.gz" "Demultiplexed/""$file2""_%_umi.fastq.gz" # Split read 2 file by CELseq barcodes. Require perfect match to barcode in expected location

    fi
done
conda deactivate


###nohup: leaves the cluster doing the thing when you leave the wifi


#!/bin/bash
#SBATCH --job-name=At_hisat2                                              # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=100gb                                                       # Total memory for job
#SBATCH --time=6:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_At/At_hs2.out                  # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_At/At_hs2.err                   # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_At/

module load fastp/0.23.2-GCC-11.3.0
mkdir hisat2_out
for file in Demultiplexed/*s.fastq.gz; do
	file2="${file:14:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	fastp -w 6 -i "$file" -o "hisat2_out/""$file2"".fastq.gz" -y -x -3 -a AAAAAAAAAAAA

fi
done

ml HISAT2/3n-20201216-gompi-2022a
ml SAMtools/1.16.1-GCC-11.3.0
for file in hisat2_out/*s.fastq.gz
do
	file2="${file:11:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	hisat2 -p 6 --dta -x Ler_0_N-masked/merged_hisat2_index -U "hisat2_out/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out/""$file2""_unsorted.bam" -o "hisat2_out/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out/""$file2""_s.bam"
	
fi
done


###Running SNPsplit

#!/bin/bash
#SBATCH --job-name=At_SNPsplit                                                      # Job name
#SBATCH --partition=batch                                                           # Partition (queue) name
#SBATCH --ntasks=1                                                                  # Single task job
#SBATCH --cpus-per-task=6                                                           # Number of cores per task
#SBATCH --mem=50gb                                                                  # Total memory for job
#SBATCH --time=6:00:00                                                              # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_At/At_SNPsplit.out                       # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_At/At_SNPsplit.err                        # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                                # Where to send mail
#SBATCH --mail-type=END,FAIL                                                        # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_At/
mkdir At_SNPsplit
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
for file in "hisat2_out/"*_s.bam
do
    file2="${file:11:-6}"

    SNPsplit --conflicting -o At_SNPsplit --snp_file Ler_SNPs.tab "$file"
    samtools sort -@ 6 At_SNPsplit/"$file2"_s.allele_flagged.bam -o At_SNPsplit/"$file2"_SNPsplit.bam
    
done

for file in "At_SNPsplit/"*_s.genome1.bam
do
    file2="${file:12:-14}"
    samtools sort -@ 6 "$file" -o At_SNPsplit/"$file2"_SNPsplit_g1.bam
done

for file in "At_SNPsplit/"*_s.genome2.bam
do
    file2="${file:12:-14}"
    samtools sort -@ 6 "$file" -o At_SNPsplit/"$file2"_SNPsplit_g2.bam
done


#!/bin/bash
#SBATCH --job-name=At_features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=6:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_At/At_features_UMIs.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_At/At_features_UMIs.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_At/
mkdir featurecounts
mkdir bams
mkdir UMIcounts
mkdir UMIcounts_g1
mkdir UMIcounts_g2
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate /home/jms53460/subread-env

featureCounts -T 6 -s 1 -a TAIR10.1_Col_5.gff -t 'gene' -g 'ID' -o featurecounts/read_counts.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a TAIR10.1_Col_5.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g1.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a TAIR10.1_Col_5.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g2.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts/"*SNPsplit.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g1.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g1/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g2.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g2/${file2}.tsv"
    fi
done


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('TAIR10.1_Col_5.gff', sep = '\t', quote = "")[,9], ';')
annots = annots[grep('ID=gene-', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('ID=', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
D = B

files = dir('UMIcounts_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g1/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g1.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g1 = B

files = dir('UMIcounts_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g2/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g2.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g2 = B

genes = read.table('TAIR10.1_Col_5.gff', sep = '\t', quote = "")[,c(1,5)]
annots2 = strsplit(read.table('TAIR10.1_Col_5.gff', sep = '\t', quote = "")[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
annots2 = sub(';', '', sub(' ', '', unlist(lapply(annots2, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))
genes[,3] = annots2
genes2 = genes[grepl('ID=gene-', genes[,3]),]
genes = genes2[order(genes2[,2]),] #order by position
genes = genes[order(genes[,1]),] #order by chr
genes = genes[!duplicated(genes[,3]),]
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]

D = D[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]

save(D,g1,g2,genes, file = "12_2024_At.RData")
q()



###Copying this to my local computer
scp sapelo2:/scratch/jms53460/12_2024_At/12_2024_At.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'

###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('12_2024_At.RData')


plotCell2 = function (cell) 
{
    annotate_figure(ggarrange(plotChr(cell, chr = 1), plotChr(cell, 
        chr = 2), plotChr(cell, chr = 3), plotChr(cell, chr = 4), 
        plotChr(cell, chr = 5), plotScaleBar, ncol = 1, nrow = 6, 
        align = "v", heights = c(rep(1, 5), 0.4)), left = text_grob("          % Transcripts from Col-0 allele", 
        rot = 90, size = 10), top = cell)
}


BIN2 = function (xx, bin = 10^6) 
{
    bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1)))
    colnames(out2) = colnames(g1)
    rownames(out2) = names(out)
    return(out2)
}




setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('11_2024_At.RData')
colnames(D) = sub('S2_L002_', '', sub('S1-8_', '', sub('S3_L002_', '', colnames(D))))
colnames(g1) = sub('S2_L002_', '', sub('S1-8_', '', sub('S3_L002_', '', colnames(g1))))
colnames(g2) = sub('S2_L002_', '', sub('S1-8_', '', sub('S3_L002_', '', colnames(g2))))
D_11 = D
g1_11 = g1
g2_11 = g2

load('12_2024_At.RData')
colnames(D) = sub('S187_L007_', '', sub('S188_L007_', '', colnames(D)))
colnames(g1) = sub('S187_L007_', '', sub('S188_L007_', '', colnames(g1)))
colnames(g2) = sub('S187_L007_', '', sub('S188_L007_', '', colnames(g2)))
D_12 = D
g1_12 = g1
g2_12 = g2

D = cbind(D_11,D_12)
g1 = cbind(g1_11,g1_12)
g2 = cbind(g2_11,g2_12)

summary(colSums(D))          
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#    408    2876    6045   11513   13164  103711


library(readxl)
At_Stages <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/At_Stages.xlsx")

At_meta <- At_Stages[rep(row.names(At_Stages), times = 8), ]
library(tidyverse)
At_meta = arrange(At_meta, Bud_order)
At_meta$Sample = c(paste(rep('A254-266_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A267-277_', times = 64), 33:96, rep('s', times=64), sep=''), paste(rep('A268-287_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A288-301_', times = 96), 1:96, rep('s', times=96), sep=''))
write.csv(At_meta, "At_meta.csv")
#edited in excel, saved as At_meta.xlsx
At_meta <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/At_meta.xlsx")
rownames(At_meta) = At_meta$Sample

stages = as.character(At_meta$Stage)
stages = factor(stages, levels = c('tetrad','UM', 'UM/BM', 'BM', 'BM/Tri', 'Tri'))

At_meta_stageblind = At_meta[,c(1:7,9:12)]
rownames(At_meta_stageblind) = At_meta_stageblind$Sample
No_cell = At_meta_stageblind$Sample[which(At_meta_stageblind$No_cell_well == 'Y')]
Yellow = At_meta_stageblind$Sample[which(At_meta_stageblind$Yellow == 'Y')]

D = D[,At_meta_stageblind$Sample]
g1 = g1[,At_meta_stageblind$Sample]
g2 = g2[,At_meta_stageblind$Sample]

summary(colSums(D[,No_cell]))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#   1028    3747    5535    8112   10516   22950

plotChr = function (cell, chr = 1, pad = 3) 
{
    Cdat = data.frame(f_col0 = AlleleFrac[, cell], Chr = floor(as.numeric(rownames(AlleleFrac))/10^6), 
        Position = (as.numeric(rownames(AlleleFrac))%%10^6) + 
            0.5)
    Cdat = Cdat[Cdat$Chr == chr, ]
    ggplot(Cdat) + geom_rect(data = data.frame(xmin = -pad, xmax = mx + 
        pad, ymin = 0, ymax = 1), aes(xmin = xmin, xmax = xmax, 
        ymin = ymin, ymax = ymax), fill = "#EEEEEE") + geom_point(aes(y = f_col0, 
        x = Position), cex = 3) + geom_hline(yintercept = 0.5, 
        linetype = "dashed") + theme(panel.background = element_blank(), 
        axis.title = element_blank(), panel.border = element_blank(), 
        panel.grid = element_blank(), axis.ticks.x = element_blank(), 
        axis.text.x = element_blank()) + scale_y_continuous(breaks = seq(0, 
        1, 0.25), labels = c("0%", "", "50%", "", "100%"), limits = c(-0.4, 
        1.05)) + scale_x_continuous(expand = c(0, 0)) + annotate("segment", 
        x = -pad, xend = -pad, y = 0, yend = 1) + theme(plot.margin = margin(0, 
        0, 0.15, 0, "cm"))
}

plotCell2 = function (cell) 
{
    annotate_figure(ggarrange(plotChr(cell, chr = 1), plotChr(cell, 
        chr = 2), plotChr(cell, chr = 3), plotChr(cell, chr = 4), 
        plotChr(cell, chr = 5), plotScaleBar, ncol = 1, nrow = 6, 
        align = "v", heights = c(rep(1, 5), 0.4)), left = text_grob("          % Transcripts from Col-0 allele", 
        rot = 90, size = 10), top = cell)
}

BIN2 = function (xx, bin = 10^6) 
{
    bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1)))
    colnames(out2) = colnames(g1)
    rownames(out2) = names(out)
    return(out2)
}


library(ggplot2)
library(ggpubr)
g1_bin = BIN2(g1)
g2_bin = BIN2(g2)
g1_frac = g1_bin/(g1_bin + g2_bin)
AlleleFrac = g1_frac
AlleleFrac[(g1_bin+g2_bin) < 10] = NA #remove bins with <10 genoinformative transcripts
#AlleleFrac2 = AlleleFrac[,which(colSums(is.na(AlleleFrac)) <= 50)]
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 10000)] ###124/192 passed >5000 89/192 passed >= 10000 from 12_2024_At
###478/672 passed >=5000, 318/672 passed >=10000 with the first big data set
###68/160 passed >5000 25/160 passed >= 10000 from 11_2024_At (A254-266, A267-277)
###124/192 passed >5000 89/192 passed >= 10000 from 12_2024_At (A268-287, A288-301)

#remove no cell controls that made it through 10,000 UMI cut off
AlleleFrac3 = as.data.frame(AlleleFrac2) %>% select(-c(No_cell[which(No_cell %in% colnames(AlleleFrac2))]))


library('ComplexHeatmap')

FracMono = 100*colMeans(abs(AlleleFrac3 - .5) >= .3, na.rm=T)

Heatmap(AlleleFrac3, cluster_rows=F)                   



pseudocount = 1*10^6/quantile(colSums(D), p = .1)
A2 = sweep(D, 2, colSums(D), '/')*10^6  # Transcripts per million normalization
A2b = log(A2+pseudocount,10)  # Log transform
A3 = A2b[rowSums(A2[,colnames(AlleleFrac3)] > 0) >= 20,colnames(AlleleFrac3)]
A3 = A3[rank(-apply(A3,1,sd)) <= 1000,]
PCs = prcomp(t(A3))

###
ords = order(PCs$x[,1])

svg('11-12_2024_At_cor_heatmap.svg', width=6, height=5)
Heatmap(cor(A3[,ords], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono[ords], UMIcounts = log(colSums(D[,colnames(AlleleFrac3)][,ords]),10),
    Stage = At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac3))][ords],
    col = list(Stage = c("tetrad" = "#ffffff", "UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T, show_row_names = FALSE, show_column_names = FALSE)
dev.off()

#How many total buds at each stage:
length(which(At_Stages$Stage == "tetrad")) #1
length(which(At_Stages$Stage == "UM")) #13
length(which(At_Stages$Stage == "UM/BM")) #5
length(which(At_Stages$Stage == "BM")) #9
length(which(At_Stages$Stage == "BM/Tri")) #5
length(which(At_Stages$Stage == "Tri")) #11

#How many samples with >10,000 UMIs at each stage:
length(which(At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac3))] == "tetrad")) #7
length(which(At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac3))] == "UM")) #23
length(which(At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac3))] == "UM/BM")) #7
length(which(At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac3))] == "BM")) #44
length(which(At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac3))] == "BM/Tri")) #4
length(which(At_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac3))] == "Tri")) #24



#How many UMIs for each no cell control by stage
length(which(At_meta[No_cell,8] == "UM")) #used this to check how many no cell controls per stage
sum(D[,No_cell[which(At_meta[No_cell,8] == "tetrad")]]) #1
#   9665
summary(colSums(D[,No_cell[which(At_meta[No_cell,8] == "UM")]])) #6
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#   1028    6087   12008   12616   20693   22950
summary(colSums(D[,No_cell[which(At_meta[No_cell,8] == "UM/BM")]])) #3
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#   1539    3441    5343    4658    6218    7093
summary(colSums(D[,No_cell[which(At_meta[No_cell,8] == "BM")]])) #3   
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#   5263    6068    6873    8402    9971   13069
summary(colSums(D[,No_cell[which(At_meta[No_cell,8] == "BM/Tri")]])) #3
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#   2559    3616    4673    4320    5200    5727
summary(colSums(D[,No_cell[which(At_meta[No_cell,8] == "Tri")]])) #4   
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#   2058    2740    3487    6183    6930   15699



##########



svg('FracMono_hist.svg', width=3.5, height=4)
hist(FracMono, xlab = '% of bins with monoallelic expression', ylab = '# of samples', main = 'Monoallelic expression in 
Arabidopsis pollen precursors')
dev.off()

svg('AlleleFrac_hist.svg', width=3.5, height=4)
hist(AlleleFrac2, xlab = 'Fraction of transcripts
from Col-0 allele', ylab = '# of bins', main = 'All samples')
dev.off()


A2d = A2b[rowSums(D[,colnames(A2b)] >= 10) >= 10, ]  # For pseudotime analysis, require each gene to have at least 10 UMIs in at least 10 cells
fano = apply(A2d, 1, var)/rowMeans(A2d)  # fano factor is a measure of gene variance
hmat = A2d[rank(-fano[rownames(A2d)]) <= 500,order(stages)]

###
svg('7-8_2024_At_express_heatmap_Stages_UMIs_FracMono.svg', width = 7, height = 5)
Heatmap(minmax(hmat[,colnames(ord_AlleleFrac2)]), name = 'expression
level (TPM)', 
top_annotation = HeatmapAnnotation(FracMono = ord_FracMono[colnames(ord_AlleleFrac2)], UMIcounts = log(colSums(D[,colnames(ord_AlleleFrac2)]),10),
    Stage = At_Stages2[colnames(ord_AlleleFrac2),8],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F, show_column_names=F, show_row_names=F)
dev.off()

svg('7-8_2024_At_express_heatmap_Stages.svg', width = 7, height = 5)
Heatmap(minmax(hmat[,colnames(ord_AlleleFrac2)]), name = 'expression
level (TPM)', 
top_annotation = HeatmapAnnotation(Stage = At_Stages2[colnames(ord_AlleleFrac2),8],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F, show_column_names=F, show_row_names=F)
dev.off()


svg('7-8_2024_At_example_chr_plots.svg', width = 15, height = 6)
ggarrange(plotCell2('A194-205_44s'), plotCell2('A194-205_86s'), plotCell2('A182-193_60s'), plotCell2('A218-229_19s'), plotCell2('A242-253_61s'), plotCell2('A230-241_90s'), ncol = 6, align = 'v')
dev.off()
