qlogin #I do this every time I log onto the cluster

cd /scratch/jms53460/7_2024_Ns
cp /home/jms53460/Ns_N-masked_genome.fa .
cp /home/jms53460/Ns_N-masked_hisat2_index* .
cp /home/jms53460/Ns_SNPs3.tab .

cp /home/jms53460/CELSeq_barcodes.txt .
mkdir Raw_Data


###Downloaded raw data from Duke onto the cluster
cp /work/bnlab/July2024Sequencing/Somers_10237_240830A9/T104-115* Raw_Data


###Install fastq-multx and subread
ml Miniconda3/23.5.2-0
conda create -p /scratch/jms53460/7_2024_Ns/Fastq-Multx -c bioconda fastq-multx -y 
source activate /scratch/jms53460/7_2024_Ns/Fastq-Multx
fastq-multx
conda deactivate

ml purge
ml Miniconda3/23.5.2-0
conda create -p subread-env -y
source activate ./subread-env/
conda install -c bioconda subread -y
subread-align
conda deactivate


###Demultiplex the raw data

#!/bin/bash
#SBATCH --job-name=Ns_demultiplex                                         # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                       # Total memory for job
#SBATCH --time=2:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_dm.out                  # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_dm.err                   # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
mkdir Demultiplexed
ml Miniconda3/23.5.2-0
source activate /scratch/jms53460/7_2024_Ns/Fastq-Multx

for file in Raw_Data/*_R1_*.gz; do
    filename=$(basename "$file")
    file2=$(echo "$filename" | sed 's/_R1.*//' | sed 's/_R2_001.fastq.gz//')

    if [ ! -f "Demultiplexed/""$file2""_dT-1s.fastq.gz" ]; then
        module load fastp/0.23.2-GCC-11.3.0
	    fastp -w 6 -i "$file" -I "Raw_Data/""$file2""_R2_001.fastq.gz" -o "Demultiplexed/umi_""$file2""_R1.fastq.gz" -O "Demultiplexed/umi_""$file2""_R2.fastq.gz" -A -Q -L -G --umi --umi_loc read2 --umi_len 10 --umi_prefix UMI

	    fastq-multx -b -B "CELSeq_barcodes.txt" -m 0 "Demultiplexed/umi_""$file2""_R2.fastq.gz" "Demultiplexed/umi_""$file2""_R1.fastq.gz" -o "Demultiplexed/""$file2""_%_R2.fastq.gz" "Demultiplexed/""$file2""_%.fastq.gz"  # Split read 2 file by CELseq barcodes. Require perfect match to barcode in expected location

	    find "Demultiplexed/" -name "umi_*" -delete
	    find "Demultiplexed/" -name "*_R2*" -delete
    fi
done
conda deactivate

mkdir hisat2_out

for file in "Demultiplexed/"*.fastq*
do
	file2="${file:14:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	module load fastp/0.23.2-GCC-11.3.0
	fastp -w 6 -i "$file" -o "hisat2_out/""$file2"".fastq.gz" -y -x -3 -a AAAAAAAAAAAA

fi
done


###Takes ~20-30 mins per file pair (set of 96)


#Map to genome (hisat2), .bam output (samtools view), sort (samtools sort), index (samtools index)

#!/bin/bash
#SBATCH --job-name=Ns_hisat2                                              # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=2:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_hs2.out                 # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_hs2.err                  # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
ml HISAT2/3n-20201216-gompi-2022a
ml SAMtools/1.16.1-GCC-11.3.0
for file in "hisat2_out/"*s.fastq*
do
	file2="${file:11:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	hisat2 -p 6 --dta -x Ns_N-masked_hisat2_index -U "hisat2_out/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out/""$file2""_unsorted.bam" -o "hisat2_out/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out/""$file2""_s.bam"
	
fi
done


###Takes ~20-30 mins per set of 96


###Running SNPsplit and stringtie

#!/bin/bash
#SBATCH --job-name=Ns_SNPsplit_stringtie                                            # Job name
#SBATCH --partition=batch                                                           # Partition (queue) name
#SBATCH --ntasks=1                                                                  # Single task job
#SBATCH --cpus-per-task=6                                                           # Number of cores per task
#SBATCH --mem=50gb                                                                  # Total memory for job
#SBATCH --time=6:00:00                                                             # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_SNPsplit_stringtie.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_SNPsplit_stringtie.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                                # Where to send mail
#SBATCH --mail-type=END,FAIL                                                        # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
mkdir SNPsplit
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
for file in "hisat2_out/"*_s.bam
do
    file2="${file:11:-6}"

    SNPsplit --conflicting -o SNPsplit --snp_file Ns_SNPs3.tab "$file"
    samtools sort -@ 6 SNPsplit/"$file2"_s.allele_flagged.bam -o SNPsplit/"$file2"_SNPsplit.bam
    
done

for file in "SNPsplit/"*_s.genome1.bam
do
    file2="${file:9:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit/"$file2"_SNPsplit_g1.bam
done

for file in "SNPsplit/"*_s.genome2.bam
do
    file2="${file:9:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit/"$file2"_SNPsplit_g2.bam
done

ml StringTie/2.2.1-GCC-11.3.0
mkdir stringtie_out
for file in "hisat2_out/"*_s.bam
do
	stringtie -p 6 --rf -o "stringtie_out/""${file:11:-6}"".gtf" "$file"
done

# Merge StringTie transcripts
ls -1 "stringtie_out/"*.gtf | gawk '{print $0}' > mergelist.txt

# Merge GTF files
stringtie --merge -p 6 -o "stringtie_out/stringtie_merged.gtf" mergelist.txt
rm mergelist.txt


###Takes ~30 mins per set of 96
###I had an error when merging into one gtf file because 44s was empty. I removed 44s gtf and then it ran fine


#!/bin/bash
#SBATCH --job-name=Ns_features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=12:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_features_UMIs.out           # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_features_UMIs.err            # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
mkdir featurecounts
mkdir bams
mkdir UMIcounts
mkdir UMIcounts_g1
mkdir UMIcounts_g2
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate ./subread-env/

featureCounts -T 6 -s 1 -a stringtie_out/stringtie_merged.gtf -o featurecounts/read_counts.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a stringtie_out/stringtie_merged.gtf -o featurecounts/read_counts_g1.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a stringtie_out/stringtie_merged.gtf -o featurecounts/read_counts_g2.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts/"*SNPsplit.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g1.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g1/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g2.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g2/${file2}.tsv"
    fi
done


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('stringtie_out/stringtie_merged.gtf', sep = '\t')[,9], ';')
annots = annots[grep('gene_id', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('gene_id ', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = names(annots)
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('_S95_L003', '', sub('_SNPsplit.tsv', '', files))
A[is.na(A)] = 0
B = A

files = dir('UMIcounts_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = names(annots)
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g1/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g1.tsv', '', files))
A[is.na(A)] = 0

g1 = A

files = dir('UMIcounts_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = names(annots)
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g2/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g2.tsv', '', files))
A[is.na(A)] = 0
g2 = A

genes = read.table('stringtie_out/stringtie_merged.gtf', sep = '\t')[,c(1,5)]
annots2 = strsplit(read.table('stringtie_out/stringtie_merged.gtf', sep = '\t')[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
genes[,3] = names(annots2)
genes = genes[!duplicated(genes[,3]),]
genes[,3] = names(annots)
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]

save(B,g1,g2,genes, file = "7_2024_Ns.RData")
q()


###Copying this to my local computer
scp sapelo2:/scratch/jms53460/7_2024_Ns/7_2024_Ns.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'


setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('7_2024_Ns.RData')

g1[rowSums(g1) == 0] = NA
g2[rowSums(g2) == 0] = NA


Ns_AlleleFrac = g1/(g1+g2)
Ns_AlleleFrac = Ns_AlleleFrac[which(rowSums(is.na(Ns_AlleleFrac)) <96),which(colSums(is.na(Ns_AlleleFrac)) < 27300)]

library('ComplexHeatmap')
Heatmap(Ns_AlleleFrac, name = 'Ns_AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))


#Not enough data to work with at the moment. I'll try remaking the SNP table and N-masked genome using the new data



cp /home/jms53460/Ns_genome.fna .
cp /home/jms53460/Ns_genome.fna.fai .
cp /home/jms53460/hisat2_index* .
#removed old directories and files that used the previous N-masked genome and SNP table


#!/bin/bash
#SBATCH --job-name=Ns_hisat2_2                                              # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=2:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_hs2_2.out                 # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_hs2_2.err                  # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
mkdir hisat2_out

for file in "Demultiplexed/"*.fastq*
do
	file2="${file:14:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	module load fastp/0.23.2-GCC-11.3.0
	fastp -w 6 -i "$file" -o "hisat2_out/""$file2"".fastq.gz" -y -x -3 -a AAAAAAAAAAAA

fi
done

mkdir hisat2_out2
cp hisat2_out/*s.fastq.gz hisat2_out2
ml HISAT2/3n-20201216-gompi-2022a
ml SAMtools/1.16.1-GCC-11.3.0
for file in "hisat2_out2/"*s.fastq*
do
	file2="${file:12:-9}"

if [ ! -f "hisat2_out2/""$file2"".bam" ]; then

	hisat2 -p 6 --dta -x Ns_hisat2_index -U "hisat2_out2/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out2/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out2/""$file2""_unsorted.bam" -o "hisat2_out2/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out2/""$file2""_s.bam"
	
fi
done


ls hisat2_out2/*_s.bam > bamlist


#!/bin/bash
#SBATCH --job-name=Ns_bcftools                                              # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=2:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_bcftools.out                 # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_bcftools.err                  # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
module load BCFtools/1.15.1-GCC-11.3.0
bcftools mpileup -Ou --threads 6 -d 1000 --min-MQ 60 --skip-indels -f Ns_genome.fna -b bamlist | bcftools call -Ou -m -v --threads 6 | bcftools filter -Oz -e 'QUAL<40 || DP<10' > Ns_2.vcf.gz
bcftools index Ns_2.vcf.gz



###Install vcf2tsvpy
ml Miniconda3/23.5.2-0
conda create -p /scratch/jms53460/7_2024_Ns/vcf2tsvpy -c bioconda vcf2tsvpy -y
source activate /scratch/jms53460/7_2024_Ns/vcf2tsvpy
vcf2tsvpy --help
conda deactivate


###Convert vcf to tsv

#!/bin/bash
#SBATCH --job-name=Ns_vcf2tsvpy                         # Job name
#SBATCH --partition=batch                               # Partition (queue) name
#SBATCH --ntasks=1                                      # Single task job
#SBATCH --cpus-per-task=6                               # Number of cores per task
#SBATCH --mem=50gb                                      # Total memory for job
#SBATCH --time=6:00:00                                  # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_vcf2tsvpy.out        # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_vcf2tsvpy.err         # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                    # Where to send mail
#SBATCH --mail-type=END,FAIL                            # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
ml Miniconda3/23.5.2-0
source activate /scratch/jms53460/7_2024_Ns/vcf2tsvpy
vcf2tsvpy --input_vcf Ns_2.vcf.gz --out_tsv Ns_2.vcf_table.tsv 
conda deactivate

#This failed because vcf2tsvpy is not working how it did before. The error suggests it's a problem with the python version or something like that.
#I found online that vcf files are basically already in tsv format but with headers, so I will try using the vcf file directly


zcat Ns_2.vcf.gz | grep -v "#" > Ns_2.tsv
awk '{print $1,$2,$3,$4,$5,$16}' Ns_2.tsv OFS="\t" > Ns_2_variants.tsv
awk '{print $6,$1,$2,$3,$4,$5}' Ns_2_variants.tsv OFS="\t" > Ns_2_SNPs.tsv


ml R/4.3.2-foss-2022b
R
Ns_SNPs_alt <- read.csv("/scratch/jms53460/7_2024_Ns/Ns_2_SNPs.tsv", sep="", header=FALSE)
Ns_SNPs = Ns_SNPs_alt[,(1:4)]
Ns_SNPs[,5] = paste(Ns_SNPs_alt[,5], "/", Ns_SNPs_alt[,6], sep = "")
colnames(Ns_SNPs) = c("ID", "Chr", "Position", "SNP value", "Ref/SNP")
Ns_SNPs$"ID" = "."
Ns_SNPs$"SNP value" = 1
dim(Ns_SNPs) # 14726 rows 5 columns
dim(Ns_SNPs[!duplicated(Ns_SNPs[,3]),]) #14725 rows 5 columns
which(duplicated(Ns_SNPs[,3])) #6559
Ns_SNPs[6559,] #Position is 131737018
which(Ns_SNPs[,3] == 131737018) #988 and 6559
Ns_SNPs[c(988,6559),] #The position number is the same but Chr is different, so there are no duplicate rows :)
write.table(Ns_SNPs, file = 'Ns_2_SNPs.tab', col.names = TRUE, row.names = FALSE, sep = '\t', quote = FALSE)
q()



#!/bin/bash
#SBATCH --job-name=Ns_bedtools_maskfasta                           # Job name
#SBATCH --partition=batch                                          # Partition (queue) name
#SBATCH --ntasks=1                                                 # Single task job
#SBATCH --cpus-per-task=1                                          # Number of cores per task
#SBATCH --mem=50gb                                                 # Total memory for job
#SBATCH --time=6:00:00                                             # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_bedtools_maskfasta.out          # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_bedtools_maskfasta.err           # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                               # Where to send mail
#SBATCH --mail-type=END,FAIL                                       # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
ml BEDTools/2.30.0-GCC-12.2.0
bedtools maskfasta -fi Ns_genome.fna -fo Ns_2_N-masked_genome.fa -bed Ns_2.vcf.gz -fullHeader

ml HISAT2/3n-20201216-gompi-2022a
hisat2-build Ns_2_N-masked_genome.fa Ns_2_N-masked_hisat2_index


#Chromosome names
grep 'chr' Ns_2_N-masked_genome.fa | head
>CM066003.1 Nicotiana sylvestris chromosome 1, whole genome shotgun sequence
>CM066004.1 Nicotiana sylvestris chromosome 2, whole genome shotgun sequence
>CM066005.1 Nicotiana sylvestris chromosome 3, whole genome shotgun sequence
>CM066006.1 Nicotiana sylvestris chromosome 4, whole genome shotgun sequence
>CM066007.1 Nicotiana sylvestris chromosome 5, whole genome shotgun sequence
>CM066008.1 Nicotiana sylvestris chromosome 6, whole genome shotgun sequence
>CM066009.1 Nicotiana sylvestris chromosome 7, whole genome shotgun sequence
>CM066010.1 Nicotiana sylvestris chromosome 8, whole genome shotgun sequence
>CM066011.1 Nicotiana sylvestris chromosome 9, whole genome shotgun sequence
>CM066012.1 Nicotiana sylvestris chromosome 10, whole genome shotgun sequence


#Map to genome (hisat2), .bam output (samtools view), sort (samtools sort), index (samtools index)

#!/bin/bash
#SBATCH --job-name=Ns_hisat2                                              # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=2:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_hs2.out                 # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_hs2.err                  # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
ml HISAT2/3n-20201216-gompi-2022a
ml SAMtools/1.16.1-GCC-11.3.0
for file in "hisat2_out/"*s.fastq*
do
	file2="${file:11:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	hisat2 -p 6 --dta -x Ns_2_N-masked_hisat2_index -U "hisat2_out/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out/""$file2""_unsorted.bam" -o "hisat2_out/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out/""$file2""_s.bam"
	
fi
done


###Takes ~20-30 mins per set of 96


###Running SNPsplit and stringtie

#!/bin/bash
#SBATCH --job-name=Ns_SNPsplit_stringtie                                            # Job name
#SBATCH --partition=batch                                                           # Partition (queue) name
#SBATCH --ntasks=1                                                                  # Single task job
#SBATCH --cpus-per-task=6                                                           # Number of cores per task
#SBATCH --mem=50gb                                                                  # Total memory for job
#SBATCH --time=6:00:00                                                             # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_SNPsplit_stringtie.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_SNPsplit_stringtie.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                                # Where to send mail
#SBATCH --mail-type=END,FAIL                                                        # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
mkdir SNPsplit
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
for file in "hisat2_out/"*_s.bam
do
    file2="${file:11:-6}"

    SNPsplit --conflicting -o SNPsplit --snp_file Ns_2_SNPs.tab "$file"
    samtools sort -@ 6 SNPsplit/"$file2"_s.allele_flagged.bam -o SNPsplit/"$file2"_SNPsplit.bam
    
done

for file in "SNPsplit/"*_s.genome1.bam
do
    file2="${file:9:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit/"$file2"_SNPsplit_g1.bam
done

for file in "SNPsplit/"*_s.genome2.bam
do
    file2="${file:9:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit/"$file2"_SNPsplit_g2.bam
done

ml StringTie/2.2.1-GCC-11.3.0
mkdir stringtie_out
for file in "hisat2_out/"*_s.bam
do
	stringtie -p 6 --rf -o "stringtie_out/""${file:11:-6}"".gtf" "$file"
done

# Merge StringTie transcripts
ls -1 "stringtie_out/"*.gtf | gawk '{print $0}' > mergelist.txt

# Merge GTF files
stringtie --merge -p 6 -o "stringtie_out/stringtie_merged.gtf" mergelist.txt
rm mergelist.txt


###Takes ~30 mins per set of 96
###I had an error when merging into one gtf file because 44s was empty. I removed 44s gtf and then it ran fine


#!/bin/bash
#SBATCH --job-name=Ns_features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=12:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_features_UMIs.out           # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_features_UMIs.err            # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
mkdir featurecounts
mkdir bams
mkdir UMIcounts
mkdir UMIcounts_g1
mkdir UMIcounts_g2
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate ./subread-env/

featureCounts -T 6 -s 1 -a stringtie_out/stringtie_merged.gtf -o featurecounts/read_counts.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a stringtie_out/stringtie_merged.gtf -o featurecounts/read_counts_g1.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a stringtie_out/stringtie_merged.gtf -o featurecounts/read_counts_g2.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts/"*SNPsplit.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g1.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g1/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g2.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g2/${file2}.tsv"
    fi
done


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('stringtie_out/stringtie_merged.gtf', sep = '\t')[,9], ';')
annots = annots[grep('gene_id', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('gene_id ', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = names(annots)
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('_S95_L003', '', sub('_SNPsplit.tsv', '', files))
A[is.na(A)] = 0
B = A

files = dir('UMIcounts_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = names(annots)
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g1/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g1.tsv', '', files))
A[is.na(A)] = 0

g1 = A

files = dir('UMIcounts_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = names(annots)
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g2/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g2.tsv', '', files))
A[is.na(A)] = 0
g2 = A

genes = read.table('stringtie_out/stringtie_merged.gtf', sep = '\t')[,c(1,5)]
annots2 = strsplit(read.table('stringtie_out/stringtie_merged.gtf', sep = '\t')[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
genes[,3] = names(annots2)
genes = genes[!duplicated(genes[,3]),]
genes[,3] = names(annots)
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]
genes = genes[order(genes[,1]),]
genes[,1] = sub('CM06600', '', genes[,1])
genes[,1] = sub('CM0660', '', genes[,1])


genes1 = genes[which(genes[,1] == 3.1),]
genes1 = genes1[order(genes1[,2]),]
genes1[,1] = 1
genes2 = genes[which(genes[,1] == 4.1),]
genes2 = genes2[order(genes2[,2]),]
genes2[,1] = 2
genes3 = genes[which(genes[,1] == 5.1),]
genes3 = genes3[order(genes3[,2]),]
genes3[,1] = 3
genes4 = genes[which(genes[,1] == 6.1),]
genes4 = genes4[order(genes4[,2]),]
genes4[,1] = 4
genes5 = genes[which(genes[,1] == 7.1),]
genes5 = genes5[order(genes5[,2]),]
genes5[,1] = 5
genes6 = genes[which(genes[,1] == 8.1),]
genes6 = genes6[order(genes6[,2]),]
genes6[,1] = 6
genes7 = genes[which(genes[,1] == 9.1),]
genes7 = genes7[order(genes7[,2]),]
genes7[,1] = 7
genes8 = genes[which(genes[,1] == 10.1),]
genes8 = genes8[order(genes8[,2]),]
genes8[,1] = 8
genes9 = genes[which(genes[,1] == 11.1),]
genes9 = genes9[order(genes9[,2]),]
genes9[,1] = 9
genes10 = genes[which(genes[,1] == 12.1),]
genes10 = genes10[order(genes10[,2]),]
genes10[,1] = 10

genes = rbind(genes1, genes2, genes3, genes4, genes5, genes6, genes7, genes8, genes9, genes10)
B = B[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]

save(B,g1,g2,genes, file = "7_2024_Ns_2.RData")
q()


###Copying this to my local computer
scp sapelo2:/scratch/jms53460/7_2024_Ns/7_2024_Ns_2.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'



setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('7_2024_Ns_2.RData')

> summary(colSums(B))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    3.0   811.8  1441.0  2737.8  3260.2 22528.0

> summary(colSums(g1))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    1.0   328.5   594.0  1181.8  1338.8 11762.0

> summary(colSums(g2))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
    0.0    30.0    61.5   148.0   220.2  1348.0

BIN2 = function (xx, bin = 10^7) 
{
    bin = as.numeric(genes[, 1]) * 10^7 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1)))
    colnames(out2) = colnames(g1)
    rownames(out2) = names(out)
    return(out2)
}

library(ggplot2)
library(ggpubr)
g1_bin = BIN2(g1)
g2_bin = BIN2(g2)
g1_frac = g1_bin/(g1_bin + g2_bin*8) #Multiplying g2_bin amounts by 8 to account for huge difference in g1 and g2 colSums ~8-10 fold difference
AlleleFrac = g1_frac
AlleleFrac[(g1_bin+g2_bin) < 3] = NA #remove bins with <3 genoinformative transcripts
AlleleFrac[(g2_bin < 1)] = NA
AlleleFrac2 = AlleleFrac[,which(colSums(is.na(AlleleFrac)) <= 150)]


library('ComplexHeatmap')

Heatmap(AlleleFrac2, name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)



###Make a merged bam file and index file to load into IGV

#!/bin/bash
#SBATCH --job-name=Ns_samtools_merge                                      # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=2:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_samtools_merge.out        # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_samtools_merge.err         # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
module load SAMtools/1.16.1-GCC-11.3.0
samtools merge -@ 6 -o 7_2024_Ns_merged.bam -b bamlist
samtools sort -@ 6 7_2024_Ns_merged.bam -o 7_2024_Ns_merged_s.bam
samtools index 7_2024_Ns_merged_s.bam


grep 'alignment' Ns_hs2_2.err
4.83% overall alignment rate
56.95% overall alignment rate
34.01% overall alignment rate
37.55% overall alignment rate
11.09% overall alignment rate
9.39% overall alignment rate
33.36% overall alignment rate
22.81% overall alignment rate
57.11% overall alignment rate
32.18% overall alignment rate
3.91% overall alignment rate
60.86% overall alignment rate
33.92% overall alignment rate
47.67% overall alignment rate
35.48% overall alignment rate
66.19% overall alignment rate
70.43% overall alignment rate
25.86% overall alignment rate
23.45% overall alignment rate
51.56% overall alignment rate
45.37% overall alignment rate
2.69% overall alignment rate
73.05% overall alignment rate
73.40% overall alignment rate
19.95% overall alignment rate
18.08% overall alignment rate
18.45% overall alignment rate
8.71% overall alignment rate
40.65% overall alignment rate
31.58% overall alignment rate
45.86% overall alignment rate
54.51% overall alignment rate
2.19% overall alignment rate
46.54% overall alignment rate
14.66% overall alignment rate
3.19% overall alignment rate
5.61% overall alignment rate
11.42% overall alignment rate
3.08% overall alignment rate
2.21% overall alignment rate
5.46% overall alignment rate
11.88% overall alignment rate
13.48% overall alignment rate
6.31% overall alignment rate
7.04% overall alignment rate
7.00% overall alignment rate
31.01% overall alignment rate
69.72% overall alignment rate
27.14% overall alignment rate
60.69% overall alignment rate
76.91% overall alignment rate
1.59% overall alignment rate
0.95% overall alignment rate
53.30% overall alignment rate
50.33% overall alignment rate
65.57% overall alignment rate
26.38% overall alignment rate
1.95% overall alignment rate
11.02% overall alignment rate
7.82% overall alignment rate
4.09% overall alignment rate
12.66% overall alignment rate
13.11% overall alignment rate
15.50% overall alignment rate
24.47% overall alignment rate
20.44% overall alignment rate
15.28% overall alignment rate
35.44% overall alignment rate
14.40% overall alignment rate
18.45% overall alignment rate
46.11% overall alignment rate
55.65% overall alignment rate
46.74% overall alignment rate
63.49% overall alignment rate
72.11% overall alignment rate
71.63% overall alignment rate
14.43% overall alignment rate
78.02% overall alignment rate
23.97% overall alignment rate
11.01% overall alignment rate
32.31% overall alignment rate
29.91% overall alignment rate
33.07% overall alignment rate
16.79% overall alignment rate
44.90% overall alignment rate
34.66% overall alignment rate
2.09% overall alignment rate
12.48% overall alignment rate
4.36% overall alignment rate
77.56% overall alignment rate
10.41% overall alignment rate
46.48% overall alignment rate
5.72% overall alignment rate
69.42% overall alignment rate
47.06% overall alignment rate
29.82% overall alignment rate



###Copying to my local computer
scp sapelo2:/home/jms53460/Ns_genome.fna 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics'
scp sapelo2:/scratch/jms53460/7_2024_Ns/7_2024_Ns_merged_s.bam 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics'
scp sapelo2:/scratch/jms53460/7_2024_Ns/7_2024_Ns_merged_s.bam.bai 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics'



sed 's/Chr01/CM066003.1/' nsyl.gtf > nsyl_1.gtf
sed 's/Chr02/CM066004.1/' nsyl_1.gtf > nsyl_2.gtf
sed 's/Chr03/CM066005.1/' nsyl_2.gtf > nsyl_3.gtf
sed 's/Chr04/CM066006.1/' nsyl_3.gtf > nsyl_4.gtf
sed 's/Chr05/CM066007.1/' nsyl_4.gtf > nsyl_5.gtf
sed 's/Chr06/CM066008.1/' nsyl_5.gtf > nsyl_6.gtf
sed 's/Chr07/CM066009.1/' nsyl_6.gtf > nsyl_7.gtf
sed 's/Chr08/CM066010.1/' nsyl_7.gtf > nsyl_8.gtf
sed 's/Chr09/CM066011.1/' nsyl_8.gtf > nsyl_9.gtf
sed 's/Chr10/CM066012.1/' nsyl_9.gtf > nsyl_10.gtf
sed 's/Chr11/CM066013.1/' nsyl_10.gtf > nsyl_11.gtf
sed 's/Chr12/CM066014.1/' nsyl_11.gtf > nsyl_12.gtf


#!/bin/bash
#SBATCH --job-name=Ns_features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=12:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_features_UMIs2.out           # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_features_UMIs2.err            # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
mkdir featurecounts2
mkdir bams2
mkdir UMIcounts2
mkdir UMIcounts2_g1
mkdir UMIcounts2_g2
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate ./subread-env/

featureCounts -T 6 -s 1 -a nsyl_12.gtf -o featurecounts2/read_counts.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a nsyl_12.gtf -o featurecounts2/read_counts_g1.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a nsyl_12.gtf -o featurecounts2/read_counts_g2.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts2/"*SNPsplit.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts2/${file2}.tsv"
    fi
done

for file in "featurecounts2/"*g1.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts2_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts2_g1/${file2}.tsv"
    fi
done

for file in "featurecounts2/"*g2.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts2_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts2_g2/${file2}.tsv"
    fi
done


#old featurecounts:
Assigned        4106    11551   13700   5860    4367    1887    7330    10585   32836   12685   2484    31000   9786    19209   20465   20881   92165   5333    4356    12      4782    1613    16413   18456   3121    7555    8933    6330    9827  
    12521   19026   78948   810     50444   3413    1087    1739    3       1841    1710    1609    2087    5413    2056   
    3254    3549    4810    184477  15852   44929   52323   354     400     54152   21046   45795   16478   625     2304
    2226    973     1974    1213    356     5296    9585    4619    3375    2424    31086   41953   53287   41041   66308  
   158517  69912   3960    71041   12437   3081    7222    6667    12709   4089    6103    5761    692     2487    1805    329431  7131    56782   2879    71442   15236   25217
Unassigned_MultiMapping 103398  270136  420553  345183  134314  131336  321837  495866  1246210 611402  20668   992131  336310  872746  756538  993416  1494162 405445  225726  488     658450  23762   2576836 2051716 116383  107780  153047  64165 
   193974  279634  696731  626189  13189   457202  120605  15379   30065   178     40393   17697   25674   136360  64527   78548   75254   45390   20835   1166112 91704   401484  409142  4441    2149    284188  927764  479607  180947  9119    29387   29807   17945   89945   38973   8986    256670  319759  130204  359264  112091  370860  507854  475696  664135  604223  2089719 1139246 133710  1058153 381829  151668  567711  391543  986602  247680  417707  334037  7400    63753   15774   1609637 72774   267247  29216   663775  75076   464710
Unassigned_NoFeatures   12006   44174   50035   30000   12010   6944    28289   51484   164626  60140   6737    147679  50091   106142  95667   99306   222767  14511   12315   143     18993   3897    61788   64148   8942    19755   20895   17198 
   24897   30138   56131   198713  2518    122070  9524    2706    4800    38      5313    5028    4654    7064    11755   5233    6761    6258    7101    355709  31019   84934   101486  1111    954     91171   50238   109692  32066   2197    3234    5173    2202    8927    3961    1388    21551   26346   12151   16719   7440    103587  128721  165038  133120  202257  519294  242016  9189    222620  35845   10683   28404   22266   43390   12864   22999   18562   2142    6937    3297    575162  15981   99876   6517    135874  28584   103097
Unassigned_Ambiguity    108     687     556     1239    205     368     802     632     1020    669     54      2071    852     2301    1237    1283    3511    513     572     1       560     101     5309    20597   206     208     178     51    
      338     418     1620    1565    46      925     262     49      40      2       35      17      39      116     54   
      50      167     82      44      1935    217     706     422     10      1       747     1361    777     218     6    
       36      44      29      133     19      12      362     399     164     477     111     743     1097    1581    1751    1570    5779    3945    310     2515    452     329     735     720     2876    472     1121    722     7       160    
     11      2629    106     268     16      1905    212     754



#new featurecounts: (>3x Assigned, same Unassigned_MultiMapping, <0.5x Unassigned_NoFeatures, <0.25x Unassigned_Ambiguity)
Assigned        12377   44648   46024   25285   12052   5849    25294   34502   106167  35838   7134    112352  31821   64027   64444   63549   237138  10742   10418   31      10930   3989    35033   44538   8004    20395   21862   18072   27029 
   33220   57084   189405  2645    138081  9280    2763    5044    2       5067    4829    4894    5799    12765   4640    6422    6693    9620    432999  36784   96909   120937  1094    1057    108287  44998   85090   31949   1585    3951    5389    2316    6898    3596    1178    18979   23621   11799   9930    6647    112669  143749  184040  139048  222752  564497  258119  8833    231145  36694   9227    20856   19543   35197   10781   18393   15478   2013    6202    3734    727018  18835   124812  6963    161787  34353   104692
Unassigned_MultiMapping 103398  270136  420553  345183  134314  131336  321837  495866  1246210 611402  20668   992131  336310  872746  756538  993416  1494162 405445  225726  488     658450  23762   2576836 2051716 116383  107780  153047  64165 
   193974  279634  696731  626189  13189   457202  120605  15379   30065   178     40393   17697   25674   136360  64527   78548   75254   45390   20835   1166112 91704   401484  409142  4441    2149    284188  927764  479607  180947  9119    29387   29807   17945   89945   38973   8986    256670  319759  130204  359264  112091  370860  507854  475696  664135  604223  2089719 1139246 133710  1058153 381829  151668  567711  391543  986602  247680  417707  334037  7400    63753   15774   1609637 72774   267247  29216   663775  75076   464710
Unassigned_NoFeatures   3815    11698   18116   11791   4467    3327    11069   28110   92103   37588   2095    67857   28743   63422   52788   57676   80678   9543    6664    125     13330   1582    48368   58532   4171    6944    7943    5418  
    7968    9697    19572   89251   720     34225   3872    1069    1518    41      2103    1900    1354    3441    4164   
    2677    3746    3171    2273    106844  9993    33211   32957   373     289     37571   27550   70805   16579   1232   
    1615    2046    865     4123    1593    577     8154    12626   5111    10586   3300    21242   26300   33754   35099  
   44687   114505  54738   4599    63239   11739   4731    15452   9984    23591   6630    11715   9524    814     3364    1365    176845  4344    31615   2413    46688   9565    24212
Unassigned_Ambiguity    28      66      151     23      63      23      58      89      212     68      46      541     165     203     137     245     627     72      161     0       75      40      109     131     94      179     201     89    
      65      160     121     570     9       1133    47      10      17      0       19      26      54      27      293  
     22      14      25      62      2278    311     449     337     8       9       212     97      369     234     11    
      8       8       23      13      4       1       76      83      24      55      28      1505    1722    2112    1765 
    2696    4588    3016    27      1792    301     135     53      126     187     14      115     43      14      18     
      14      3359    39      499     36      746     114     164

#wrong strand:
Assigned        371     718     1462    953     367     150     863     1854    5724    2182    222     4283    1450    3995    2979    3916    3920    684     593     7       1061    117     6195    21650   295     299     411     367     509   
     531     1487    3910    50      2325    233     98      109     0       137     63      105     322     162     214   
     134     277     138     6269    572     1344    1589    27      44      1967    1572    3868    517     78      86    
      76      54      224     92      52      482     560     238     643     227     1195    1842    2059    4363    2311 
    7524    3473    325     4392    701     350     1154    645     1356    569     637     570     41      131     131    
     8658    303     1732    362     2682    482     1473
Unassigned_MultiMapping 103398  270136  420553  345183  134314  131336  321837  495866  1246210 611402  20668   992131  336310  872746  756538  993416  1494162 405445  225726  488     658450  23762   2576836 2051716 116383  107780  153047  64165 
   193974  279634  696731  626189  13189   457202  120605  15379   30065   178     40393   17697   25674   136360  64527   78548   75254   45390   20835   1166112 91704   401484  409142  4441    2149    284188  927764  479607  180947  9119    29387   29807   17945   89945   38973   8986    256670  319759  130204  359264  112091  370860  507854  475696  664135  604223  2089719 1139246 133710  1058153 381829  151668  567711  391543  986602  247680  417707  334037  7400    63753   15774   1609637 72774   267247  29216   663775  75076   464710
Unassigned_NoFeatures   15842   55680   62825   36142   16206   9047    35546   60798   192707  71220   9053    176265  59265   123575  114347  117545  314461  19656   16646   149     23244   5469    76487   81439   11962   27215   29594   23212 
   34549   42522   75199   275312  3323    171095  12966   3744    6464    43      7052    6691    6197    8943    17047   7120    10048   9612    11817   535785  46516   129210  152626  1448    1311    144067  71028   152393  48243   2750    5488    7367    3150    10810   5099    1704    26725   35748   16696   19894   9733    134219  169926  217842  171392  267794  675784  312400  13132   291707  48029   13592   35184   28981   57466   16855   29542   24420   2800    9449    4978    898471  22913   155190  9050    206532  43550   127586
Unassigned_Ambiguity    7       14      4       4       9       2       12      49      51      92      0       202     14 
      82      43      9       62      17      4       0       30      25      828     112     12      4       1       0    
       4       24      91      4       1       19      0       0       6       0       0       1       0       2       13  
      5       0       0       0       67      0       15      16      0       0       36      45      3       2       0    
       0       0       0       0       2       0       2       22      0       34      15      2       3       5       157 
     30      282     0       2       77      4       151     23      27      153     1       44      55      0       4     
       4       93      2       4       0       7       0       9


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('nsyl.gtf', sep = '\t')[,9], ';')
annots = annots[grep('gene_id', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[2] }))
names(annots) = sub(' gene_id ', '', names(annots))
annots = annots[!duplicated(names(annots))]

files = dir('UMIcounts2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = names(annots)
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts2/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('_S95_L003', '', sub('_SNPsplit.tsv', '', files))
A[is.na(A)] = 0
B = A

files = dir('UMIcounts2_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = names(annots)
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts2_g1/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g1.tsv', '', files))
A[is.na(A)] = 0
g1 = A

files = dir('UMIcounts2_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = names(annots)
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts2_g2/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g2.tsv', '', files))
A[is.na(A)] = 0
g2 = A

genes = read.table('nsyl.gtf', sep = '\t')[,c(1,5)]
annots2 = strsplit(read.table('nsyl.gtf', sep = '\t')[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[2] }))
genes[,3] = names(annots2)
genes = genes[!duplicated(genes[,3]),]
genes[,3] = names(annots)
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]
genes = genes[order(genes[,2]),]
genes = genes[order(genes[,1]),]
genes[,1] = sub('Chr0', '', genes[,1])
genes[,1] = sub('Chr', '', genes[,1])

save(B,g1,g2,genes, file = "7_2024_Ns_4.RData")
q()


scp sapelo2:/scratch/jms53460/7_2024_Ns/7_2024_Ns_4.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'


setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('7_2024_Ns_4.RData')


B2 = B[,which(colSums(B) > 10000)] #16/96 have >= 10,000 UMIs
colnames(B2)
"T104-115_18s" "T104-115_20s" tetrad
"T104-115_25s" UM
"T104-115_39s" "T104-115_40s" UM/BM
"T104-115_53s" BM
"T104-115_74s" "T104-115_75s" "T104-115_76s" "T104-115_77s" "T104-115_78s" "T104-115_79s" "T104-115_80s" UM (early)
"T104-115_91s" "T104-115_93s" "T104-115_95s" BM
#2 tetrad, 8 UM, 2 UM/BM, 4 BM






#!/bin/bash
#SBATCH --job-name=Ns_demultiplex                                         # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                       # Total memory for job
#SBATCH --time=2:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7_2024_Ns/Ns_dm2.out                  # Location of standard output file
#SBATCH --error=/scratch/jms53460/7_2024_Ns/Ns_dm2.err                   # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7_2024_Ns
mkdir Demultiplexed2
ml Miniconda3/23.5.2-0
source activate /scratch/jms53460/7_2024_Ns/Fastq-Multx

for file in Raw_Data/*_R1_*.gz; do
    filename=$(basename "$file")
    file2=$(echo "$filename" | sed 's/_R1.*//' | sed 's/_R2_001.fastq.gz//')

	    fastq-multx -b -B "CELSeq_barcodes.txt" -m 0 "Raw_Data/""$file2""_R2_001.fastq.gz" "Raw_Data/""$file2""_R1_001.fastq.gz" -o "Demultiplexed2/""$file2""_%_R2_001.fastq.gz" "Demultiplexed2/""$file2""_%_R1_001.fastq.gz"  # Split read 2 file by CELseq barcodes. Require perfect match to barcode in expected location
	    
done
conda deactivate

module load fastp/0.23.2-GCC-11.3.0

for file in Demultiplexed2/*_R1_*.gz; do
    file2="${file:0:-15}"

        module load fastp/0.23.2-GCC-11.3.0
        fastp -w 6 -i $file -I "$file2""R2_001.fastq.gz" -o "$file2""_R1.fastq.gz" -O "$file2""_R2.fastq.gz" -A -Q -L -G --umi --umi_loc read2 --umi_len 10 --umi_prefix UMI

done

mkdir Demultiplexed_unmatched
mv Demultiplexed2/*unmatched* Demultiplexed_unmatched


scp sapelo2:/scratch/jms53460/7_2024_Ns/Raw_Data/*.fastq.gz 'D:\7_2024_Ns_Data'

