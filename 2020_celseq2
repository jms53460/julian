rundir="Haploid_Diploid2020"



#### Split cell barcodes and attach UMIs to fastq header
## The resulting demultiplexed fastq files are submitted to NCBI SRA / GEO

mkdir "Mapped_Data/""$rundir"
mkdir "Mapped_Data/""$rundir""/demultiplexed"

for file in "Raw_Data/""$rundir""/"*_R1*
do
	file2="${file:29:-12}"  #### Need to adjust second number depending on length of directory name
	file3="${file2:0:-32}"

	./fastp -w 4 -i "$file" -I "Raw_Data/""$rundir""/""$file2""_R2.fastq.gz" -o "Mapped_Data/""$rundir""/demultiplexed/umi_""$file3""_R1.fastq.gz" -O "Mapped_Data/""$rundir""/demultiplexed/umi_""$file3""_R2.fastq.gz" -A -Q -L --umi --umi_loc read1 --umi_len 10 --umi_prefix UMI

	fastq-multx -b -B "CELseq_barcodes.txt" -m 0 "Mapped_Data/""$rundir""/demultiplexed/umi_""$file3""_R1.fastq.gz" "Mapped_Data/""$rundir""/demultiplexed/umi_""$file3""_R2.fastq.gz" -o "Mapped_Data/""$rundir""/demultiplexed/""$file3""_%_R1.fastq.gz" "Mapped_Data/""$rundir""/demultiplexed/""$file3""_%.fastq.gz"  # Split read 2 file by CELseq barcodes. Require perfect match to barcode in expected location

	find "Mapped_Data/""$rundir""/demultiplexed/" -name "umi_*" -delete
	find "Mapped_Data/""$rundir""/demultiplexed/" -name "*s_R1*" -delete
done



#### Trim and filter sequences based on quality scores and repeat content
mkdir "Mapped_Data/""$rundir""/trimmed"
for file in "Mapped_Data/""$rundir""/demultiplexed/"*s.fastq*
do
	file2="${file:46:-9}"  #### Need to adjust second number depending on length of directory name
	./fastp -w 4 -i "$file" -o "Mapped_Data/""$rundir""/trimmed/""$file2"".fastq.gz" -y -x -3 -f 6
done



#### Map to genome using HiSat2
## For A188/B73 SNP calling, use B73 genome masked at SNP locations

mkdir "Mapped_Data/""$rundir""/hisat2_out"

for file in "Mapped_Data/""$rundir""/trimmed/"*
do
	file2="${file:40:(-9)}"
	printf "\n$file2\n"
if [ ! -f "Mapped_Data/""$rundir""/hisat2_out/""$file2"".bam" ]; then
	hisat2 -p 4 --dta --no-softclip -x HISATgenome2/Zma_AGPv4_A188mask --known-splicesite-infile HISATgenome2/ZmaERCC_combined.ss -U "$file" | samtools view -bS -> "$file""_unsorted.bam"
fi
done




#### Merge files across RPI barcodes, then attach SNP and UMI info

mkdir "Mapped_Data/""$rundir""/SNPsplit"

for file in "Mapped_Data/""$rundir""/hisat2_out/"RPI1_*.bam
do
	file2="${file:51:(-4)}"
	printf "\n$file2\n"

if [ ! -f "Mapped_Data/""$rundir""/SNPsplit/""$file2"".bam" ]; then
	samtools merge -r "Mapped_Data/""$rundir""/merged.bam" "Mapped_Data/""$rundir""/hisat2_out/RPI1_dT-""$file2"".bam" "Mapped_Data/""$rundir""/hisat2_out/RPI2_dT-""$file2"".bam" "Mapped_Data/""$rundir""/hisat2_out/RPI3_dT-""$file2"".bam" "Mapped_Data/""$rundir""/hisat2_out/RPI4_dT-""$file2"".bam" "Mapped_Data/""$rundir""/hisat2_out/RPI5_dT-""$file2"".bam" "Mapped_Data/""$rundir""/hisat2_out/RPI6_dT-""$file2"".bam" "Mapped_Data/""$rundir""/hisat2_out/RPI7_dT-""$file2"".bam" "Mapped_Data/""$rundir""/hisat2_out/RPI8_dT-""$file2"".bam" "Mapped_Data/""$rundir""/hisat2_out/RPI9_dT-""$file2"".bam" "Mapped_Data/""$rundir""/hisat2_out/RPI10_dT-""$file2"".bam"
	./addRGtoSAMHeader.py -H -i "Mapped_Data/""$rundir""/merged.bam" -o - | samtools reheader - "Mapped_Data/""$rundir""/merged.bam" > "Mapped_Data/""$rundir""/merged2.bam"

	samtools sort -@ 8 "Mapped_Data/""$rundir""/merged2.bam" -o "Mapped_Data/""$rundir""/merged_sorted.bam"
	samtools index "Mapped_Data/""$rundir""/merged_sorted.bam"
	umi_tools group -I "Mapped_Data/""$rundir""/merged_sorted.bam" --output-bam -S "Mapped_Data/""$rundir""/merged_tagged.bam"

	SNPsplit --conflicting -o "Mapped_Data/""$rundir""/" --snp_file GenomeFiles/A188_SNPs.tab.gz "Mapped_Data/""$rundir""/merged_tagged.bam"
	samtools sort -@ 8 "Mapped_Data/""$rundir""/merged_tagged.allele_flagged.bam" -o "Mapped_Data/""$rundir""/SNPsplit/""$file2"".bam"

	rm "Mapped_Data/""$rundir""/merged"*
fi
done



#### Attach gene info and prep for R script

mkdir "Mapped_Data/""$rundir""/tagged"
mkdir "Mapped_Data/""$rundir""/tables"

for file in "Mapped_Data/""$rundir""/SNPsplit/"*
do
	file2="${file:41:(-4)}"
	printf "\n$file2\n"

if [ ! -f "Mapped_Data/""$rundir""/tagged/""$file2"".bam" ]; then
	./TagReadWithGeneFunction I="$file" O="Mapped_Data/""$rundir""/tagged/""$file2"".bam" ANNOTATIONS_FILE="GenomeFiles/ZmaERCCphas_combined2.gtf"
fi
done


LC_ALL=C
for file in "Mapped_Data/""$rundir""/tagged/"*
do
	file2="${file:39:(-4)}"
	printf "\n$file2\n"

if [ ! -f "Mapped_Data/""$rundir""/tables/""$file2"".tab" ]; then
	samtools view "$file" | grep -F 'gn:' | sed 's/.*RG:Z://' | sed 's/UG:.*BX:Z://' | cut -f1,2,3,5 | sed 's/,gene.*//' | uniq -c > "Mapped_Data/""$rundir""/tables/""$file2"".tab"
fi
done

tar czvfk "Mapped_Data/""$rundir""/Gene_Count_Tables.tar.gz" "Mapped_Data/""$rundir""/tables/"*




############# Helpful code to convert gtf file for gene tagging. Will use RNA-seq data to improve gene annotations (esp. 3' UTR boundaries)
B = as.character(A[,9])
B = cbind(B, paste('gene_name ', sub(';.+', '', sub('gene_id gene:', '', B)), ';', sep = ''), paste('transcript_name ', sub(';.+', '', sub('.+transcript_id transcript:', '', B)), ';', sep = ''))
B = apply(B, 1, paste, collapse = ' ')
write.table(A, row.names=F, col.names=F, quote = F, sep = '\t', file = 'stringtie_merged_prep2.gtf')
#################################################################################


