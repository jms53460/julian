qlogin #I do this every time I log onto the cluster
mkdir /scratch/jms53460/4_2024_At_Spike_ins
cd /scratch/jms53460/4_2024_At_Spike_ins
cp /home/jms53460/CELSeq_barcodes.txt /scratch/jms53460/4_2024_At_Spike_ins/
mkdir Raw_Data

###Downloaded raw data from OneDrive into the Raw_Data directory on the cluster using FileZilla

###Install fastq-multx
ml Miniconda3/23.5.2-0
conda create -p /scratch/jms53460/4_2024_At_Spike_ins/Fastq-Multx -c bioconda fastq-multx -y 
source activate /scratch/jms53460/4_2024_At_Spike_ins/Fastq-Multx
fastq-multx
conda deactivate


###Demultiplex the raw data

#!/bin/bash
#SBATCH --job-name=At_demultiplex                                         # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=100gb                                                       # Total memory for job
#SBATCH --time=12:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_dm.out          # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_dm.err           # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
mkdir Demultiplexed
ml Miniconda3/23.5.2-0
source activate /scratch/jms53460/4_2024_At_Spike_ins/Fastq-Multx

for file in Raw_Data/*_R1_*.gz; do
    filename=$(basename "$file")
    file2=$(echo "$filename" | sed 's/_R1.*//' | sed 's/_R2_001.fastq.gz//')

    if [ ! -f "Demultiplexed/""$file2""_dT-1s.fastq.gz" ]; then
        module load fastp/0.23.2-GCC-11.3.0
	    fastp -w 6 -i "$file" -I "Raw_Data/""$file2""_R2_001.fastq.gz" -o "Demultiplexed/umi_""$file2""_R1.fastq.gz" -O "Demultiplexed/umi_""$file2""_R2.fastq.gz" -A -Q -L -G --umi --umi_loc read2 --umi_len 10 --umi_prefix UMI

	    fastq-multx -b -B "CELSeq_barcodes.txt" -m 0 "Demultiplexed/umi_""$file2""_R2.fastq.gz" "Demultiplexed/umi_""$file2""_R1.fastq.gz" -o "Demultiplexed/""$file2""_%_R2.fastq.gz" "Demultiplexed/""$file2""_%.fastq.gz"  # Split read 2 file by CELseq barcodes. Require perfect match to barcode in expected location

	    find "Demultiplexed/" -name "umi_*" -delete
	    find "Demultiplexed/" -name "*_R2*" -delete
    fi
done
conda deactivate



curl -s https://1001genomes.org/data/GMI-MPI/releases/v3.1/1001genomes_snp-short-indel_only_ACGTN.vcf.gz > At_vcf.gz
curl -s https://1001genomes.org/data/MPIPZ/MPIPZJiao2020/releases/current/strains/Ler/Ler.syri.out.gz > Ler.syri.out.gz

ml NCBI-Datasets-CLI
datasets download genome accession GCF_000001735.4 --include gff3,genome
unzip ncbi_dataset.zip
cp ncbi_dataset/data/GCF_000001735.4/GCF_000001735.4_TAIR10.1_genomic.fna /scratch/jms53460/4_2024_At_Spike_ins/TAIR10.1_Col_genome.fa
cp ncbi_dataset/data/GCF_000001735.4/genomic.gff /scratch/jms53460/4_2024_At_Spike_ins/TAIR10.1_Col.gff


ml R/4.3.2-foss-2022b
R
Ler_SNPs <- read.delim('Ler.syri.out.gz', header = FALSE)
Ler_SNPs_only = Ler_SNPs[Ler_SNPs$V11 == 'SNP',]
columns = c('V12','V1','V2','V12')
Ler_SNPs_trim = Ler_SNPs_only[,columns]
Ler_SNPs_trim[,5] = paste(Ler_SNPs_only$V4, "/", Ler_SNPs_only$V5, sep = "")
Ler_SNPs_trim[,2] = gsub("Chr", "", Ler_SNPs_trim[,2])
colnames(Ler_SNPs_trim) = c("ID", "Chr", "Position", "SNP value", "Ref/SNP")
Ler_SNPs_trim$"ID" = "."
Ler_SNPs_trim$"SNP value" = 1
write.table(Ler_SNPs_trim, file = 'Ler_SNPs.tab', col.names = TRUE, row.names = FALSE, sep = '\t', quote = FALSE)

mkdir Col_genome_dir
cp TAIR10.1_Col_genome.fa Col_genome_dir/
mkdir SNPs_Ler_0
cp Ler_SNPs.tab SNPs_Ler_0/

#!/bin/bash
#SBATCH --job-name=At_SNPsplit_genome_prep                                # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=1                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=6:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_SNPsplit_gp.out # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_SNPsplit_gp.err  # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1

SNPsplit_genome_preparation --vcf_file At_vcf.gz --reference_genome Col_genome_dir --strain Ler_0 --skip_filtering --genome_build Col

###This failed, and I suspect the chromosome names not matching and the SNP files not being split may be why

sed 's/NC_003070.9/1/' TAIR10.1_Col_genome.fa > TAIR10.1_Col_1.fa
sed 's/NC_003071.7/2/' TAIR10.1_Col_1.fa > TAIR10.1_Col_2.fa
sed 's/NC_003074.8/3/' TAIR10.1_Col_2.fa > TAIR10.1_Col_3.fa
sed 's/NC_003075.7/4/' TAIR10.1_Col_3.fa > TAIR10.1_Col_4.fa
sed 's/NC_003076.8/5/' TAIR10.1_Col_4.fa > TAIR10.1_Col_5.fa
rm Col_genome_dir/TAIR10.1_Col_genome.fa
cp TAIR10.1_Col_5.fa Col_genome_dir/

###Splitting up the SNP files by chromosome

ml R/4.3.2-foss-2022b
R
Ler_SNPs <- read.delim('Ler.syri.out.gz', header = FALSE)
Ler_SNPs_only = Ler_SNPs[Ler_SNPs$V11 == 'SNP',]
columns = c('V12','V1','V2','V12')
Ler_SNPs_trim = Ler_SNPs_only[,columns]
Ler_SNPs_trim[,5] = paste(Ler_SNPs_only$V4, "/", Ler_SNPs_only$V5, sep = "")
Ler_SNPs_trim[,2] = gsub("Chr", "", Ler_SNPs_trim[,2])
colnames(Ler_SNPs_trim) = c("ID", "Chr", "Position", "SNP value", "Ref/SNP")
Ler_SNPs_trim$"ID" = "."
Ler_SNPs_trim$"SNP value" = 1
chr1 = Ler_SNPs_trim[Ler_SNPs_trim$Chr == "1",]
write.table(chr1, file = 'chr1.txt', col.names = TRUE, row.names = FALSE, sep = '\t', quote = FALSE)
chr2 = Ler_SNPs_trim[Ler_SNPs_trim$Chr == "2",]
write.table(chr2, file = 'chr2.txt', col.names = TRUE, row.names = FALSE, sep = '\t', quote = FALSE)
chr3 = Ler_SNPs_trim[Ler_SNPs_trim$Chr == "3",]
write.table(chr3, file = 'chr3.txt', col.names = TRUE, row.names = FALSE, sep = '\t', quote = FALSE)
chr4 = Ler_SNPs_trim[Ler_SNPs_trim$Chr == "4",]
write.table(chr4, file = 'chr4.txt', col.names = TRUE, row.names = FALSE, sep = '\t', quote = FALSE)
chr5 = Ler_SNPs_trim[Ler_SNPs_trim$Chr == "5",]
write.table(chr5, file = 'chr5.txt', col.names = TRUE, row.names = FALSE, sep = '\t', quote = FALSE)
q()

cp chr*.txt SNPs_Ler_0/
rm SNPs_Ler_0/Ler_SNPs.tab
rm Ler_0_N-masked/*NC_*

###When I reran SNPsplit_genome_preparation, it finally worked! I'm discarding the mitochondrial and plastid sequences from the reference since I have no SNPs for them.
###Now I can map my reads to the N-masked genome

###Merge the N-masked chromosome files
cat Ler_0_N-masked/*.fa >> Ler_0_N-masked/merged.fa
grep 'N' Ler_0_N-masked/merged.fa | head
grep '>' Ler_0_N-masked/merged.fa | head #looks like it worked

###Make hisat2 index and run fastp

#!/bin/bash
#SBATCH --job-name=At_index_fastp                                         # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=12:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_index_fastp.out # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_index_fastp.err  # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
ml HISAT2/3n-20201216-gompi-2022a
hisat2-build -p 6 Ler_0_N-masked/merged.fa Ler_0_N-masked/merged_hisat2_index
mkdir hisat2_out

for file in "Demultiplexed/"*.fastq*
do
	file2="${file:14:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	module load fastp/0.23.2-GCC-11.3.0
	fastp -w 6 -i "$file" -o "hisat2_out/""$file2"".fastq.gz" -y -x -3 -a AAAAAAAAAAAA

fi
done


###R code to make a list of hisat2_out/*fastq.gz files
ml R/4.3.2-foss-2022b
R
directory1 = 'hisat2_out'
f = dir(directory1)
runs = unique(f[grepl('fastq.gz', f)])
out = NULL
out = c(out, '', paste(c('hisat2 -p 6 --dta -x /scratch/jms53460/4_2024_At_Spike_ins/Ler_0_N-masked/merged_hisat2_index -U ', paste(paste(directory1, '/', runs, sep = ''), collapse=','), ' | samtools view -bS -> hisat2_out/merged_unsorted.bam'), collapse = ''))
write.csv(out, row.names=F, quote = F, file = 'generated_code.txt')
q()
head generated_code.txt

#Copied and pasted the code generated in R in the bash script below
#Map to genome (hisat2), .bam output (samtools view), sort (samtools sort), index (samtools index)

#!/bin/bash
#SBATCH --job-name=At_hisat2                                              # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=24:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_hs2.out         # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_hs2.err          # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
ml HISAT2/3n-20201216-gompi-2022a
ml SAMtools/1.16.1-GCC-11.3.0
hisat2 -p 6 --dta -x /scratch/jms53460/4_2024_At_Spike_ins/Ler_0_N-masked/merged_hisat2_index -U hisat2_out/At1_S90_L003_10s.fastq.gz,hisat2_out/At1_S90_L003_11s.fastq.gz,hisat2_out/At1_S90_L003_12s.fastq.gz,hisat2_out/At1_S90_L003_13s.fastq.gz,hisat2_out/At1_S90_L003_14s.fastq.gz,hisat2_out/At1_S90_L003_15s.fastq.gz,hisat2_out/At1_S90_L003_16s.fastq.gz,hisat2_out/At1_S90_L003_17s.fastq.gz,hisat2_out/At1_S90_L003_18s.fastq.gz,hisat2_out/At1_S90_L003_19s.fastq.gz,hisat2_out/At1_S90_L003_1s.fastq.gz,hisat2_out/At1_S90_L003_20s.fastq.gz,hisat2_out/At1_S90_L003_21s.fastq.gz,hisat2_out/At1_S90_L003_22s.fastq.gz,hisat2_out/At1_S90_L003_23s.fastq.gz,hisat2_out/At1_S90_L003_24s.fastq.gz,hisat2_out/At1_S90_L003_25s.fastq.gz,hisat2_out/At1_S90_L003_26s.fastq.gz,hisat2_out/At1_S90_L003_27s.fastq.gz,hisat2_out/At1_S90_L003_28s.fastq.gz,hisat2_out/At1_S90_L003_29s.fastq.gz,hisat2_out/At1_S90_L003_2s.fastq.gz,hisat2_out/At1_S90_L003_30s.fastq.gz,hisat2_out/At1_S90_L003_31s.fastq.gz,hisat2_out/At1_S90_L003_32s.fastq.gz,hisat2_out/At1_S90_L003_33s.fastq.gz,hisat2_out/At1_S90_L003_34s.fastq.gz,hisat2_out/At1_S90_L003_35s.fastq.gz,hisat2_out/At1_S90_L003_36s.fastq.gz,hisat2_out/At1_S90_L003_37s.fastq.gz,hisat2_out/At1_S90_L003_38s.fastq.gz,hisat2_out/At1_S90_L003_39s.fastq.gz,hisat2_out/At1_S90_L003_3s.fastq.gz,hisat2_out/At1_S90_L003_40s.fastq.gz,hisat2_out/At1_S90_L003_41s.fastq.gz,hisat2_out/At1_S90_L003_42s.fastq.gz,hisat2_out/At1_S90_L003_43s.fastq.gz,hisat2_out/At1_S90_L003_44s.fastq.gz,hisat2_out/At1_S90_L003_45s.fastq.gz,hisat2_out/At1_S90_L003_46s.fastq.gz,hisat2_out/At1_S90_L003_47s.fastq.gz,hisat2_out/At1_S90_L003_48s.fastq.gz,hisat2_out/At1_S90_L003_49s.fastq.gz,hisat2_out/At1_S90_L003_4s.fastq.gz,hisat2_out/At1_S90_L003_50s.fastq.gz,hisat2_out/At1_S90_L003_51s.fastq.gz,hisat2_out/At1_S90_L003_52s.fastq.gz,hisat2_out/At1_S90_L003_53s.fastq.gz,hisat2_out/At1_S90_L003_54s.fastq.gz,hisat2_out/At1_S90_L003_55s.fastq.gz,hisat2_out/At1_S90_L003_56s.fastq.gz,hisat2_out/At1_S90_L003_57s.fastq.gz,hisat2_out/At1_S90_L003_58s.fastq.gz,hisat2_out/At1_S90_L003_59s.fastq.gz,hisat2_out/At1_S90_L003_5s.fastq.gz,hisat2_out/At1_S90_L003_60s.fastq.gz,hisat2_out/At1_S90_L003_61s.fastq.gz,hisat2_out/At1_S90_L003_62s.fastq.gz,hisat2_out/At1_S90_L003_63s.fastq.gz,hisat2_out/At1_S90_L003_64s.fastq.gz,hisat2_out/At1_S90_L003_65s.fastq.gz,hisat2_out/At1_S90_L003_66s.fastq.gz,hisat2_out/At1_S90_L003_67s.fastq.gz,hisat2_out/At1_S90_L003_68s.fastq.gz,hisat2_out/At1_S90_L003_69s.fastq.gz,hisat2_out/At1_S90_L003_6s.fastq.gz,hisat2_out/At1_S90_L003_70s.fastq.gz,hisat2_out/At1_S90_L003_71s.fastq.gz,hisat2_out/At1_S90_L003_72s.fastq.gz,hisat2_out/At1_S90_L003_73s.fastq.gz,hisat2_out/At1_S90_L003_74s.fastq.gz,hisat2_out/At1_S90_L003_75s.fastq.gz,hisat2_out/At1_S90_L003_76s.fastq.gz,hisat2_out/At1_S90_L003_77s.fastq.gz,hisat2_out/At1_S90_L003_78s.fastq.gz,hisat2_out/At1_S90_L003_79s.fastq.gz,hisat2_out/At1_S90_L003_7s.fastq.gz,hisat2_out/At1_S90_L003_80s.fastq.gz,hisat2_out/At1_S90_L003_81s.fastq.gz,hisat2_out/At1_S90_L003_82s.fastq.gz,hisat2_out/At1_S90_L003_83s.fastq.gz,hisat2_out/At1_S90_L003_84s.fastq.gz,hisat2_out/At1_S90_L003_85s.fastq.gz,hisat2_out/At1_S90_L003_86s.fastq.gz,hisat2_out/At1_S90_L003_87s.fastq.gz,hisat2_out/At1_S90_L003_88s.fastq.gz,hisat2_out/At1_S90_L003_89s.fastq.gz,hisat2_out/At1_S90_L003_8s.fastq.gz,hisat2_out/At1_S90_L003_90s.fastq.gz,hisat2_out/At1_S90_L003_91s.fastq.gz,hisat2_out/At1_S90_L003_92s.fastq.gz,hisat2_out/At1_S90_L003_93s.fastq.gz,hisat2_out/At1_S90_L003_94s.fastq.gz,hisat2_out/At1_S90_L003_95s.fastq.gz,hisat2_out/At1_S90_L003_96s.fastq.gz,hisat2_out/At1_S90_L003_9s.fastq.gz,hisat2_out/At1_S90_L003_unmatched.fastq.gz,hisat2_out/At2_S91_L003_10s.fastq.gz,hisat2_out/At2_S91_L003_11s.fastq.gz,hisat2_out/At2_S91_L003_12s.fastq.gz,hisat2_out/At2_S91_L003_13s.fastq.gz,hisat2_out/At2_S91_L003_14s.fastq.gz,hisat2_out/At2_S91_L003_15s.fastq.gz,hisat2_out/At2_S91_L003_16s.fastq.gz,hisat2_out/At2_S91_L003_17s.fastq.gz,hisat2_out/At2_S91_L003_18s.fastq.gz,hisat2_out/At2_S91_L003_19s.fastq.gz,hisat2_out/At2_S91_L003_1s.fastq.gz,hisat2_out/At2_S91_L003_20s.fastq.gz,hisat2_out/At2_S91_L003_21s.fastq.gz,hisat2_out/At2_S91_L003_22s.fastq.gz,hisat2_out/At2_S91_L003_23s.fastq.gz,hisat2_out/At2_S91_L003_24s.fastq.gz,hisat2_out/At2_S91_L003_25s.fastq.gz,hisat2_out/At2_S91_L003_26s.fastq.gz,hisat2_out/At2_S91_L003_27s.fastq.gz,hisat2_out/At2_S91_L003_28s.fastq.gz,hisat2_out/At2_S91_L003_29s.fastq.gz,hisat2_out/At2_S91_L003_2s.fastq.gz,hisat2_out/At2_S91_L003_30s.fastq.gz,hisat2_out/At2_S91_L003_31s.fastq.gz,hisat2_out/At2_S91_L003_32s.fastq.gz,hisat2_out/At2_S91_L003_33s.fastq.gz,hisat2_out/At2_S91_L003_34s.fastq.gz,hisat2_out/At2_S91_L003_35s.fastq.gz,hisat2_out/At2_S91_L003_36s.fastq.gz,hisat2_out/At2_S91_L003_37s.fastq.gz,hisat2_out/At2_S91_L003_38s.fastq.gz,hisat2_out/At2_S91_L003_39s.fastq.gz,hisat2_out/At2_S91_L003_3s.fastq.gz,hisat2_out/At2_S91_L003_40s.fastq.gz,hisat2_out/At2_S91_L003_41s.fastq.gz,hisat2_out/At2_S91_L003_42s.fastq.gz,hisat2_out/At2_S91_L003_43s.fastq.gz,hisat2_out/At2_S91_L003_44s.fastq.gz,hisat2_out/At2_S91_L003_45s.fastq.gz,hisat2_out/At2_S91_L003_46s.fastq.gz,hisat2_out/At2_S91_L003_47s.fastq.gz,hisat2_out/At2_S91_L003_48s.fastq.gz,hisat2_out/At2_S91_L003_49s.fastq.gz,hisat2_out/At2_S91_L003_4s.fastq.gz,hisat2_out/At2_S91_L003_50s.fastq.gz,hisat2_out/At2_S91_L003_51s.fastq.gz,hisat2_out/At2_S91_L003_52s.fastq.gz,hisat2_out/At2_S91_L003_53s.fastq.gz,hisat2_out/At2_S91_L003_54s.fastq.gz,hisat2_out/At2_S91_L003_55s.fastq.gz,hisat2_out/At2_S91_L003_56s.fastq.gz,hisat2_out/At2_S91_L003_57s.fastq.gz,hisat2_out/At2_S91_L003_58s.fastq.gz,hisat2_out/At2_S91_L003_59s.fastq.gz,hisat2_out/At2_S91_L003_5s.fastq.gz,hisat2_out/At2_S91_L003_60s.fastq.gz,hisat2_out/At2_S91_L003_61s.fastq.gz,hisat2_out/At2_S91_L003_62s.fastq.gz,hisat2_out/At2_S91_L003_63s.fastq.gz,hisat2_out/At2_S91_L003_64s.fastq.gz,hisat2_out/At2_S91_L003_65s.fastq.gz,hisat2_out/At2_S91_L003_66s.fastq.gz,hisat2_out/At2_S91_L003_67s.fastq.gz,hisat2_out/At2_S91_L003_68s.fastq.gz,hisat2_out/At2_S91_L003_69s.fastq.gz,hisat2_out/At2_S91_L003_6s.fastq.gz,hisat2_out/At2_S91_L003_70s.fastq.gz,hisat2_out/At2_S91_L003_71s.fastq.gz,hisat2_out/At2_S91_L003_72s.fastq.gz,hisat2_out/At2_S91_L003_73s.fastq.gz,hisat2_out/At2_S91_L003_74s.fastq.gz,hisat2_out/At2_S91_L003_75s.fastq.gz,hisat2_out/At2_S91_L003_76s.fastq.gz,hisat2_out/At2_S91_L003_77s.fastq.gz,hisat2_out/At2_S91_L003_78s.fastq.gz,hisat2_out/At2_S91_L003_79s.fastq.gz,hisat2_out/At2_S91_L003_7s.fastq.gz,hisat2_out/At2_S91_L003_80s.fastq.gz,hisat2_out/At2_S91_L003_81s.fastq.gz,hisat2_out/At2_S91_L003_82s.fastq.gz,hisat2_out/At2_S91_L003_83s.fastq.gz,hisat2_out/At2_S91_L003_84s.fastq.gz,hisat2_out/At2_S91_L003_85s.fastq.gz,hisat2_out/At2_S91_L003_86s.fastq.gz,hisat2_out/At2_S91_L003_87s.fastq.gz,hisat2_out/At2_S91_L003_88s.fastq.gz,hisat2_out/At2_S91_L003_89s.fastq.gz,hisat2_out/At2_S91_L003_8s.fastq.gz,hisat2_out/At2_S91_L003_90s.fastq.gz,hisat2_out/At2_S91_L003_91s.fastq.gz,hisat2_out/At2_S91_L003_92s.fastq.gz,hisat2_out/At2_S91_L003_93s.fastq.gz,hisat2_out/At2_S91_L003_94s.fastq.gz,hisat2_out/At2_S91_L003_95s.fastq.gz,hisat2_out/At2_S91_L003_96s.fastq.gz,hisat2_out/At2_S91_L003_9s.fastq.gz,hisat2_out/At2_S91_L003_unmatched.fastq.gz,hisat2_out/At3_S92_L003_10s.fastq.gz,hisat2_out/At3_S92_L003_11s.fastq.gz,hisat2_out/At3_S92_L003_12s.fastq.gz,hisat2_out/At3_S92_L003_13s.fastq.gz,hisat2_out/At3_S92_L003_14s.fastq.gz,hisat2_out/At3_S92_L003_15s.fastq.gz,hisat2_out/At3_S92_L003_16s.fastq.gz,hisat2_out/At3_S92_L003_17s.fastq.gz,hisat2_out/At3_S92_L003_18s.fastq.gz,hisat2_out/At3_S92_L003_19s.fastq.gz,hisat2_out/At3_S92_L003_1s.fastq.gz,hisat2_out/At3_S92_L003_20s.fastq.gz,hisat2_out/At3_S92_L003_21s.fastq.gz,hisat2_out/At3_S92_L003_22s.fastq.gz,hisat2_out/At3_S92_L003_23s.fastq.gz,hisat2_out/At3_S92_L003_24s.fastq.gz,hisat2_out/At3_S92_L003_25s.fastq.gz,hisat2_out/At3_S92_L003_26s.fastq.gz,hisat2_out/At3_S92_L003_27s.fastq.gz,hisat2_out/At3_S92_L003_28s.fastq.gz,hisat2_out/At3_S92_L003_29s.fastq.gz,hisat2_out/At3_S92_L003_2s.fastq.gz,hisat2_out/At3_S92_L003_30s.fastq.gz,hisat2_out/At3_S92_L003_31s.fastq.gz,hisat2_out/At3_S92_L003_32s.fastq.gz,hisat2_out/At3_S92_L003_33s.fastq.gz,hisat2_out/At3_S92_L003_34s.fastq.gz,hisat2_out/At3_S92_L003_35s.fastq.gz,hisat2_out/At3_S92_L003_36s.fastq.gz,hisat2_out/At3_S92_L003_37s.fastq.gz,hisat2_out/At3_S92_L003_38s.fastq.gz,hisat2_out/At3_S92_L003_39s.fastq.gz,hisat2_out/At3_S92_L003_3s.fastq.gz,hisat2_out/At3_S92_L003_40s.fastq.gz,hisat2_out/At3_S92_L003_41s.fastq.gz,hisat2_out/At3_S92_L003_42s.fastq.gz,hisat2_out/At3_S92_L003_43s.fastq.gz,hisat2_out/At3_S92_L003_44s.fastq.gz,hisat2_out/At3_S92_L003_45s.fastq.gz,hisat2_out/At3_S92_L003_46s.fastq.gz,hisat2_out/At3_S92_L003_47s.fastq.gz,hisat2_out/At3_S92_L003_48s.fastq.gz,hisat2_out/At3_S92_L003_49s.fastq.gz,hisat2_out/At3_S92_L003_4s.fastq.gz,hisat2_out/At3_S92_L003_50s.fastq.gz,hisat2_out/At3_S92_L003_51s.fastq.gz,hisat2_out/At3_S92_L003_52s.fastq.gz,hisat2_out/At3_S92_L003_53s.fastq.gz,hisat2_out/At3_S92_L003_54s.fastq.gz,hisat2_out/At3_S92_L003_55s.fastq.gz,hisat2_out/At3_S92_L003_56s.fastq.gz,hisat2_out/At3_S92_L003_57s.fastq.gz,hisat2_out/At3_S92_L003_58s.fastq.gz,hisat2_out/At3_S92_L003_59s.fastq.gz,hisat2_out/At3_S92_L003_5s.fastq.gz,hisat2_out/At3_S92_L003_60s.fastq.gz,hisat2_out/At3_S92_L003_61s.fastq.gz,hisat2_out/At3_S92_L003_62s.fastq.gz,hisat2_out/At3_S92_L003_63s.fastq.gz,hisat2_out/At3_S92_L003_64s.fastq.gz,hisat2_out/At3_S92_L003_65s.fastq.gz,hisat2_out/At3_S92_L003_66s.fastq.gz,hisat2_out/At3_S92_L003_67s.fastq.gz,hisat2_out/At3_S92_L003_68s.fastq.gz,hisat2_out/At3_S92_L003_69s.fastq.gz,hisat2_out/At3_S92_L003_6s.fastq.gz,hisat2_out/At3_S92_L003_70s.fastq.gz,hisat2_out/At3_S92_L003_71s.fastq.gz,hisat2_out/At3_S92_L003_72s.fastq.gz,hisat2_out/At3_S92_L003_73s.fastq.gz,hisat2_out/At3_S92_L003_74s.fastq.gz,hisat2_out/At3_S92_L003_75s.fastq.gz,hisat2_out/At3_S92_L003_76s.fastq.gz,hisat2_out/At3_S92_L003_77s.fastq.gz,hisat2_out/At3_S92_L003_78s.fastq.gz,hisat2_out/At3_S92_L003_79s.fastq.gz,hisat2_out/At3_S92_L003_7s.fastq.gz,hisat2_out/At3_S92_L003_80s.fastq.gz,hisat2_out/At3_S92_L003_81s.fastq.gz,hisat2_out/At3_S92_L003_82s.fastq.gz,hisat2_out/At3_S92_L003_83s.fastq.gz,hisat2_out/At3_S92_L003_84s.fastq.gz,hisat2_out/At3_S92_L003_85s.fastq.gz,hisat2_out/At3_S92_L003_86s.fastq.gz,hisat2_out/At3_S92_L003_87s.fastq.gz,hisat2_out/At3_S92_L003_88s.fastq.gz,hisat2_out/At3_S92_L003_89s.fastq.gz,hisat2_out/At3_S92_L003_8s.fastq.gz,hisat2_out/At3_S92_L003_90s.fastq.gz,hisat2_out/At3_S92_L003_91s.fastq.gz,hisat2_out/At3_S92_L003_92s.fastq.gz,hisat2_out/At3_S92_L003_93s.fastq.gz,hisat2_out/At3_S92_L003_94s.fastq.gz,hisat2_out/At3_S92_L003_95s.fastq.gz,hisat2_out/At3_S92_L003_96s.fastq.gz,hisat2_out/At3_S92_L003_9s.fastq.gz,hisat2_out/At3_S92_L003_unmatched.fastq.gz,hisat2_out/At4_S93_L003_10s.fastq.gz,hisat2_out/At4_S93_L003_11s.fastq.gz,hisat2_out/At4_S93_L003_12s.fastq.gz,hisat2_out/At4_S93_L003_13s.fastq.gz,hisat2_out/At4_S93_L003_14s.fastq.gz,hisat2_out/At4_S93_L003_15s.fastq.gz,hisat2_out/At4_S93_L003_16s.fastq.gz,hisat2_out/At4_S93_L003_17s.fastq.gz,hisat2_out/At4_S93_L003_18s.fastq.gz,hisat2_out/At4_S93_L003_19s.fastq.gz,hisat2_out/At4_S93_L003_1s.fastq.gz,hisat2_out/At4_S93_L003_20s.fastq.gz,hisat2_out/At4_S93_L003_21s.fastq.gz,hisat2_out/At4_S93_L003_22s.fastq.gz,hisat2_out/At4_S93_L003_23s.fastq.gz,hisat2_out/At4_S93_L003_24s.fastq.gz,hisat2_out/At4_S93_L003_25s.fastq.gz,hisat2_out/At4_S93_L003_26s.fastq.gz,hisat2_out/At4_S93_L003_27s.fastq.gz,hisat2_out/At4_S93_L003_28s.fastq.gz,hisat2_out/At4_S93_L003_29s.fastq.gz,hisat2_out/At4_S93_L003_2s.fastq.gz,hisat2_out/At4_S93_L003_30s.fastq.gz,hisat2_out/At4_S93_L003_31s.fastq.gz,hisat2_out/At4_S93_L003_32s.fastq.gz,hisat2_out/At4_S93_L003_33s.fastq.gz,hisat2_out/At4_S93_L003_34s.fastq.gz,hisat2_out/At4_S93_L003_35s.fastq.gz,hisat2_out/At4_S93_L003_36s.fastq.gz,hisat2_out/At4_S93_L003_37s.fastq.gz,hisat2_out/At4_S93_L003_38s.fastq.gz,hisat2_out/At4_S93_L003_39s.fastq.gz,hisat2_out/At4_S93_L003_3s.fastq.gz,hisat2_out/At4_S93_L003_40s.fastq.gz,hisat2_out/At4_S93_L003_41s.fastq.gz,hisat2_out/At4_S93_L003_42s.fastq.gz,hisat2_out/At4_S93_L003_43s.fastq.gz,hisat2_out/At4_S93_L003_44s.fastq.gz,hisat2_out/At4_S93_L003_45s.fastq.gz,hisat2_out/At4_S93_L003_46s.fastq.gz,hisat2_out/At4_S93_L003_47s.fastq.gz,hisat2_out/At4_S93_L003_48s.fastq.gz,hisat2_out/At4_S93_L003_49s.fastq.gz,hisat2_out/At4_S93_L003_4s.fastq.gz,hisat2_out/At4_S93_L003_50s.fastq.gz,hisat2_out/At4_S93_L003_51s.fastq.gz,hisat2_out/At4_S93_L003_52s.fastq.gz,hisat2_out/At4_S93_L003_53s.fastq.gz,hisat2_out/At4_S93_L003_54s.fastq.gz,hisat2_out/At4_S93_L003_55s.fastq.gz,hisat2_out/At4_S93_L003_56s.fastq.gz,hisat2_out/At4_S93_L003_57s.fastq.gz,hisat2_out/At4_S93_L003_58s.fastq.gz,hisat2_out/At4_S93_L003_59s.fastq.gz,hisat2_out/At4_S93_L003_5s.fastq.gz,hisat2_out/At4_S93_L003_60s.fastq.gz,hisat2_out/At4_S93_L003_61s.fastq.gz,hisat2_out/At4_S93_L003_62s.fastq.gz,hisat2_out/At4_S93_L003_63s.fastq.gz,hisat2_out/At4_S93_L003_64s.fastq.gz,hisat2_out/At4_S93_L003_65s.fastq.gz,hisat2_out/At4_S93_L003_66s.fastq.gz,hisat2_out/At4_S93_L003_67s.fastq.gz,hisat2_out/At4_S93_L003_68s.fastq.gz,hisat2_out/At4_S93_L003_69s.fastq.gz,hisat2_out/At4_S93_L003_6s.fastq.gz,hisat2_out/At4_S93_L003_70s.fastq.gz,hisat2_out/At4_S93_L003_71s.fastq.gz,hisat2_out/At4_S93_L003_72s.fastq.gz,hisat2_out/At4_S93_L003_73s.fastq.gz,hisat2_out/At4_S93_L003_74s.fastq.gz,hisat2_out/At4_S93_L003_75s.fastq.gz,hisat2_out/At4_S93_L003_76s.fastq.gz,hisat2_out/At4_S93_L003_77s.fastq.gz,hisat2_out/At4_S93_L003_78s.fastq.gz,hisat2_out/At4_S93_L003_79s.fastq.gz,hisat2_out/At4_S93_L003_7s.fastq.gz,hisat2_out/At4_S93_L003_80s.fastq.gz,hisat2_out/At4_S93_L003_81s.fastq.gz,hisat2_out/At4_S93_L003_82s.fastq.gz,hisat2_out/At4_S93_L003_83s.fastq.gz,hisat2_out/At4_S93_L003_84s.fastq.gz,hisat2_out/At4_S93_L003_85s.fastq.gz,hisat2_out/At4_S93_L003_86s.fastq.gz,hisat2_out/At4_S93_L003_87s.fastq.gz,hisat2_out/At4_S93_L003_88s.fastq.gz,hisat2_out/At4_S93_L003_89s.fastq.gz,hisat2_out/At4_S93_L003_8s.fastq.gz,hisat2_out/At4_S93_L003_90s.fastq.gz,hisat2_out/At4_S93_L003_91s.fastq.gz,hisat2_out/At4_S93_L003_92s.fastq.gz,hisat2_out/At4_S93_L003_93s.fastq.gz,hisat2_out/At4_S93_L003_94s.fastq.gz,hisat2_out/At4_S93_L003_95s.fastq.gz,hisat2_out/At4_S93_L003_96s.fastq.gz,hisat2_out/At4_S93_L003_9s.fastq.gz,hisat2_out/At4_S93_L003_unmatched.fastq.gz | samtools view -bS -> hisat2_out/merged_unsorted.bam
samtools sort -@ 6 hisat2_out/merged_unsorted.bam -o hisat2_out/merged_s.bam
samtools index -@ 6 hisat2_out/merged_s.bam


###Realized I need to remove the files from CELseq barcodes I did not use
###What I did use: 
#At1: 1-24s
#At2: 25-48s
#At3: 49-72s
#At4: 73-96s

rm At1*25*
ml R/4.3.2-foss-2022b
R
At1 = c(25:96)
At2 = c(1:24,49:96)
At3 = c(1:48,73:96)
At4 = c(1:72)
rm1 = paste('rm hisat2_out/At1_S90_L003_', At1, 's.fastq.gz', sep = '')
write.csv(rm1, row.names=F, quote = F, file = 'rm1.txt')
rm2 = paste('rm hisat2_out/At2_S91_L003_', At2, 's.fastq.gz', sep = '')
write.csv(rm2, row.names=F, quote = F, file = 'rm2.txt')
rm3 = paste('rm hisat2_out/At3_S92_L003_', At3, 's.fastq.gz', sep = '')
write.csv(rm3, row.names=F, quote = F, file = 'rm3.txt')
rm4 = paste('rm hisat2_out/At4_S93_L003_', At4, 's.fastq.gz', sep = '')
write.csv(rm4, row.names=F, quote = F, file = 'rm4.txt')
q()
head -100 rm1.txt #copy and paste into command line
head -100 rm2.txt
head -100 rm3.txt
head -100 rm4.txt
rm hisat2_out/*unmatched*
rm hisat2_out/merged_unsorted.bam

###Rerunning hisat2 now that I got rid of the unnecessary files

###R code to make a list of hisat2_out/*fastq.gz files
ml R/4.3.2-foss-2022b
R
directory1 = 'hisat2_out'
f = dir(directory1)
runs = unique(f[grepl('fastq.gz', f)])
out = NULL
out = c(out, '', paste(c('hisat2 -p 6 --dta -x /scratch/jms53460/4_2024_At_Spike_ins/Ler_0_N-masked/merged_hisat2_index -U ', paste(paste(directory1, '/', runs, sep = ''), collapse=','), ' | samtools view -bS -> hisat2_out/merged_unsorted.bam'), collapse = ''))
write.csv(out, row.names=F, quote = F, file = 'generated_code.txt')
q()
head generated_code.txt

#Copied and pasted the code generated in R in the bash script below
#Map to genome (hisat2), .bam output (samtools view), sort (samtools sort), index (samtools index)

#!/bin/bash
#SBATCH --job-name=At_hisat2_2                                            # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=24:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_hs2_2.out       # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_hs2_2.err        # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
ml HISAT2/3n-20201216-gompi-2022a
ml SAMtools/1.16.1-GCC-11.3.0
hisat2 -p 6 --dta -x /scratch/jms53460/4_2024_At_Spike_ins/Ler_0_N-masked/merged_hisat2_index -U hisat2_out/At1_S90_L003_10s.fastq.gz,hisat2_out/At1_S90_L003_11s.fastq.gz,hisat2_out/At1_S90_L003_12s.fastq.gz,hisat2_out/At1_S90_L003_13s.fastq.gz,hisat2_out/At1_S90_L003_14s.fastq.gz,hisat2_out/At1_S90_L003_15s.fastq.gz,hisat2_out/At1_S90_L003_16s.fastq.gz,hisat2_out/At1_S90_L003_17s.fastq.gz,hisat2_out/At1_S90_L003_18s.fastq.gz,hisat2_out/At1_S90_L003_19s.fastq.gz,hisat2_out/At1_S90_L003_1s.fastq.gz,hisat2_out/At1_S90_L003_20s.fastq.gz,hisat2_out/At1_S90_L003_21s.fastq.gz,hisat2_out/At1_S90_L003_22s.fastq.gz,hisat2_out/At1_S90_L003_23s.fastq.gz,hisat2_out/At1_S90_L003_24s.fastq.gz,hisat2_out/At1_S90_L003_2s.fastq.gz,hisat2_out/At1_S90_L003_3s.fastq.gz,hisat2_out/At1_S90_L003_4s.fastq.gz,hisat2_out/At1_S90_L003_5s.fastq.gz,hisat2_out/At1_S90_L003_6s.fastq.gz,hisat2_out/At1_S90_L003_7s.fastq.gz,hisat2_out/At1_S90_L003_8s.fastq.gz,hisat2_out/At1_S90_L003_9s.fastq.gz,hisat2_out/At2_S91_L003_25s.fastq.gz,hisat2_out/At2_S91_L003_26s.fastq.gz,hisat2_out/At2_S91_L003_27s.fastq.gz,hisat2_out/At2_S91_L003_28s.fastq.gz,hisat2_out/At2_S91_L003_29s.fastq.gz,hisat2_out/At2_S91_L003_30s.fastq.gz,hisat2_out/At2_S91_L003_31s.fastq.gz,hisat2_out/At2_S91_L003_32s.fastq.gz,hisat2_out/At2_S91_L003_33s.fastq.gz,hisat2_out/At2_S91_L003_34s.fastq.gz,hisat2_out/At2_S91_L003_35s.fastq.gz,hisat2_out/At2_S91_L003_36s.fastq.gz,hisat2_out/At2_S91_L003_37s.fastq.gz,hisat2_out/At2_S91_L003_38s.fastq.gz,hisat2_out/At2_S91_L003_39s.fastq.gz,hisat2_out/At2_S91_L003_40s.fastq.gz,hisat2_out/At2_S91_L003_41s.fastq.gz,hisat2_out/At2_S91_L003_42s.fastq.gz,hisat2_out/At2_S91_L003_43s.fastq.gz,hisat2_out/At2_S91_L003_44s.fastq.gz,hisat2_out/At2_S91_L003_45s.fastq.gz,hisat2_out/At2_S91_L003_46s.fastq.gz,hisat2_out/At2_S91_L003_47s.fastq.gz,hisat2_out/At2_S91_L003_48s.fastq.gz,hisat2_out/At3_S92_L003_49s.fastq.gz,hisat2_out/At3_S92_L003_50s.fastq.gz,hisat2_out/At3_S92_L003_51s.fastq.gz,hisat2_out/At3_S92_L003_52s.fastq.gz,hisat2_out/At3_S92_L003_53s.fastq.gz,hisat2_out/At3_S92_L003_54s.fastq.gz,hisat2_out/At3_S92_L003_55s.fastq.gz,hisat2_out/At3_S92_L003_56s.fastq.gz,hisat2_out/At3_S92_L003_57s.fastq.gz,hisat2_out/At3_S92_L003_58s.fastq.gz,hisat2_out/At3_S92_L003_59s.fastq.gz,hisat2_out/At3_S92_L003_60s.fastq.gz,hisat2_out/At3_S92_L003_61s.fastq.gz,hisat2_out/At3_S92_L003_62s.fastq.gz,hisat2_out/At3_S92_L003_63s.fastq.gz,hisat2_out/At3_S92_L003_64s.fastq.gz,hisat2_out/At3_S92_L003_65s.fastq.gz,hisat2_out/At3_S92_L003_66s.fastq.gz,hisat2_out/At3_S92_L003_67s.fastq.gz,hisat2_out/At3_S92_L003_68s.fastq.gz,hisat2_out/At3_S92_L003_69s.fastq.gz,hisat2_out/At3_S92_L003_70s.fastq.gz,hisat2_out/At3_S92_L003_71s.fastq.gz,hisat2_out/At3_S92_L003_72s.fastq.gz,hisat2_out/At4_S93_L003_73s.fastq.gz,hisat2_out/At4_S93_L003_74s.fastq.gz,hisat2_out/At4_S93_L003_75s.fastq.gz,hisat2_out/At4_S93_L003_76s.fastq.gz,hisat2_out/At4_S93_L003_77s.fastq.gz,hisat2_out/At4_S93_L003_78s.fastq.gz,hisat2_out/At4_S93_L003_79s.fastq.gz,hisat2_out/At4_S93_L003_80s.fastq.gz,hisat2_out/At4_S93_L003_81s.fastq.gz,hisat2_out/At4_S93_L003_82s.fastq.gz,hisat2_out/At4_S93_L003_83s.fastq.gz,hisat2_out/At4_S93_L003_84s.fastq.gz,hisat2_out/At4_S93_L003_85s.fastq.gz,hisat2_out/At4_S93_L003_86s.fastq.gz,hisat2_out/At4_S93_L003_87s.fastq.gz,hisat2_out/At4_S93_L003_88s.fastq.gz,hisat2_out/At4_S93_L003_89s.fastq.gz,hisat2_out/At4_S93_L003_90s.fastq.gz,hisat2_out/At4_S93_L003_91s.fastq.gz,hisat2_out/At4_S93_L003_92s.fastq.gz,hisat2_out/At4_S93_L003_93s.fastq.gz,hisat2_out/At4_S93_L003_94s.fastq.gz,hisat2_out/At4_S93_L003_95s.fastq.gz,hisat2_out/At4_S93_L003_96s.fastq.gz | samtools view -bS -> hisat2_out/merged_unsorted.bam 
samtools sort -@ 6 hisat2_out/merged_unsorted.bam -o hisat2_out/merged_s.bam
samtools index -@ 6 hisat2_out/merged_s.bam


###less At_hs2_2.err
#22600522 reads; of these:
#  22600522 (100.00%) were unpaired; of these:
#    11999147 (53.09%) aligned 0 times
#    7030694 (31.11%) aligned exactly 1 time
#    3570681 (15.80%) aligned >1 times
#46.91% overall alignment rate


###Running SNPsplit

#!/bin/bash
#SBATCH --job-name=At_SNPsplit                                            # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=1                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=12:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_SNPsplit.out    # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_SNPsplit.err     # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
mkdir At_SNPsplit

SNPsplit --conflicting -o At_SNPsplit --snp_file Ler_SNPs.tab hisat2_out/merged_s.bam


###less At_SNPsplit.err
Allele-tagging report
=====================
Processed 26201798 read alignments in total
Reads were unaligned and hence skipped: 11999147 (45.80%)
Reads were hard-clipped (CIGAR: H) and skipped: 0
12125435 reads were unassignable (46.28%)
958520 reads were specific for genome 1 (3.66%)
1082888 reads were specific for genome 2 (4.13%)
7072 reads did not contain one of the expected bases at known SNP positions (0.03%)
35808 contained conflicting allele-specific SNPs (0.14%)


SNP coverage report
===================
SNP annotation file:    Ler_SNPs.tab
SNPs stored in total:   795403
N-containing reads:     2080926
non-N:                  12118363
total:                  26201798
Reads had a deletion of the N-masked position (and were thus called Conflicting):       3362 (0.01%)
Of which had multiple deletions of N-masked positions within the same read:     0 (0.00%)

Of valid N containing reads,
N was present in the list of known SNPs:        3447857 (99.93%)
N was not present in the list of SNPs:          2469 (0.07%)

Allele-specific single-end sorting report
=========================================
Read alignments processed in total:             14202651
Reads were unassignable:                        12125435 (85.37%)
Reads were specific for genome 1:               958520 (6.75%)
Reads were specific for genome 2:               1082888 (7.62%)
Reads contained conflicting SNP information:    35808 (0.25)


###Make chromosome names in the gff file match what was used with SNPsplit
sed 's/NC_003070.9/1/' TAIR10.1_Col.gff > TAIR10.1_Col_1.gff
sed 's/NC_003071.7/2/' TAIR10.1_Col_1.gff > TAIR10.1_Col_2.gff
sed 's/NC_003074.8/3/' TAIR10.1_Col_2.gff > TAIR10.1_Col_3.gff
sed 's/NC_003075.7/4/' TAIR10.1_Col_3.gff > TAIR10.1_Col_4.gff
sed 's/NC_003076.8/5/' TAIR10.1_Col_4.gff > TAIR10.1_Col_5.gff

###Remove mitochondrial and plastid annotations from gff
grep 'genome=' TAIR10.1_Col_5.gff 
#ID=NC_037304.1:1..367808;Dbxref=taxon:3702;Is_circular=true;Name=MT;ecotype=Col-0;gbkey=Src;genome=mitochondrion;mol_type=genomic DNA
#ID=NC_000932.1:1..154478;Dbxref=taxon:3702;Is_circular=true;Name=Pltd;ecotype=Columbia;gbkey=Src;genome=chloroplast;mol_type=genomic DNA
grep -v 'NC_037304.1' TAIR10.1_Col_5.gff > TAIR10.1_Col_6.gff
grep -v 'NC_000932.1' TAIR10.1_Col_6.gff > TAIR10.1_Col_chr.gff

###Sort SNPsplit flagged bam file, assemble transcripts with stringtie

#!/bin/bash
#SBATCH --job-name=At_stringtie                                           # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=12:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_stringtie.out   # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_stringtie.err    # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
ml SAMtools/1.16.1-GCC-11.3.0
samtools sort -@ 6 At_SNPsplit/merged_s.allele_flagged.bam -o At_SNPsplit/sorted_SNPsplit.bam
mkdir stringtie_out

ml StringTie/2.2.1-GCC-11.3.0
stringtie At_SNPsplit/sorted_SNPsplit.bam -p 6 -G TAIR10.1_Col_chr.gff --rf -o stringtie_out/sorted_SNPsplit.gtf




ml purge
ml Miniconda3/4.12.0
conda create -p subread-env -y
source activate ./subread-env/
conda install -c bioconda subread -y
subread-align


### Run featurecounts 

#!/bin/bash
#SBATCH --job-name=At_featurecounts                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=12:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_featurecounts.out   # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_featurecounts.err    # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate ./subread-env/

featureCounts -T 6 -s 1 -a TAIR10.1_Col_chr.gff -t 'gene' -g 'ID' -o stringtie_out/read_counts.tab --readExtension5 500 -R BAM hisat2_out/merged_s.bam

featureCounts -T 6 -s 1 -a stringtie_out/sorted_SNPsplit.gtf -o stringtie_out/read_counts.tab --readExtension5 500 -R BAM hisat2_out/merged_s.bam

conda deactivate


#### Count UMIs

#!/bin/bash
#SBATCH --job-name=At_UMIcounts                                               # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=6:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_UMIcounts.out       # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_UMIcounts.err        # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
mkdir bams
mkdir UMIcounts
for file in "stringtie_out/"*.bam
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts/${file2}.tsv"
    fi
done


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('stringtie_out/sorted_SNPsplit.gtf', sep = '\t')[,9], '; ')
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('gene_id ', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('_S.+L004_', '', sub('.tsv', '', files))
A[is.na(A)] = 0
A = A[rowSums(A) > 0,]
A = as.matrix(A)
B = as.matrix(A[order(rownames(A)),])
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}

save(B, file = "4_2024_At_Spike_ins.RData")
q()

###This did not turn out right. It looks like I used the wrong bam file for featureCounts and UMItools, and also they did not handle the merged bam file properly (which was apparently okay with TagReadWithGeneFunction when I used it on mouse data). I will rerun things without making a merged bam file


###Rerunning code, not making a merged bam file
mkdir merged_files
mv hisat2_out/merged* merged_files
mv stringtie_out/* merged_files
mv At_SNPsplit/* merged_files
mv UMIcounts/* merged_files/
mv bams/* merged_files/

#!/bin/bash
#SBATCH --job-name=At_hisat2_3                                            # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=24:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_hs2_3.out       # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_hs2_3.err        # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
for file in "hisat2_out/"*.fastq*
do
	file2="${file:11:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	ml HISAT2/3n-20201216-gompi-2022a
    ml SAMtools/1.16.1-GCC-11.3.0
	hisat2 -p 6 --dta -x Ler_0_N-masked/merged_hisat2_index -U "hisat2_out/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out/""$file2""_unsorted.bam" -o "hisat2_out/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out/""$file2""_s.bam"
	
fi
done


#!/bin/bash
#SBATCH --job-name=At_SNPsplit_stringtie                                            # Job name
#SBATCH --partition=batch                                                           # Partition (queue) name
#SBATCH --ntasks=1                                                                  # Single task job
#SBATCH --cpus-per-task=6                                                           # Number of cores per task
#SBATCH --mem=50gb                                                                  # Total memory for job
#SBATCH --time=12:00:00                                                             # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_SNPsplit_stringtie.out    # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_SNPsplit_stringtie.err     # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                                # Where to send mail
#SBATCH --mail-type=END,FAIL                                                        # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
for file in "hisat2_out/"*_s.bam
do
    file2="${file:11:-6}"

    SNPsplit --conflicting -o At_SNPsplit --snp_file Ler_SNPs.tab "$file"
    samtools sort -@ 6 At_SNPsplit/"$file2"_s.allele_flagged.bam -o At_SNPsplit/"$file2"_SNPsplit.bam
    
done

ml StringTie/2.2.1-GCC-11.3.0
for file in "hisat2_out/"*_s.bam
do
    file2="${file:11:-6}"

    stringtie At_SNPsplit/"$file2"_SNPsplit.bam -p 6 -G TAIR10.1_Col_chr.gff --rf -o stringtie_out/"$file2".gtf
done    
    
#Merge stringtie transcripts
ls -1 "stringtie_out/"*.gtf | gawk '{print $0}' > mergelist.txt
# Merge GTF files
stringtie --merge -p 6 -G TAIR10.1_Col_chr.gff -o "stringtie_out/stringtie_merged.gtf" mergelist.txt


#!/bin/bash
#SBATCH --job-name=At_features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=12:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_features_UMIs.out   # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_features_UMIs.err    # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate ./subread-env/

featureCounts -T 6 -s 1 -a TAIR10.1_Col_chr.gff -t 'gene' -g 'ID' -o stringtie_out/read_counts.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a stringtie_out/stringtie_merged.gtf -o stringtie_out/read_counts.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit.bam

conda deactivate

for file in "stringtie_out/"*.bam
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts/${file2}.tsv"
    fi
done


cd /scratch/jms53460/4_2024_At_Spike_ins/
ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('stringtie_out/stringtie_merged.gtf', sep = '\t')[,9], '; ')
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('gene_id ', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('_S.+L004_', '', sub('.tsv', '', files))
A[is.na(A)] = 0
A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}

save(B, file = "4_2024_At_Spike_ins.RData")
q()

scp sapelo2:/scratch/jms53460/4_2024_At_Spike_ins/4_2024_At_Spike_ins.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'
###Opened R terminal
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/4_2024_At_Spike_ins.RData')

summary(colSums(B))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
   2363    8718   12038   17993   20227   62645


###I need tables that are specific to genome 1 vs. genome 2 UMI counts

#!/bin/bash
#SBATCH --job-name=At_features_UMIs2                                          # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=12:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_features_UMIs2.out  # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_features_UMIs2.err   # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
module load SAMtools/1.16.1-GCC-11.3.0
for file in "At_SNPsplit/"*_s.genome1.bam
do
    file2="${file:12:-14}"
    samtools sort -@ 6 "$file" -o At_SNPsplit/"$file2"_SNPsplit_g1.bam
done
for file in "At_SNPsplit/"*_s.genome2.bam
do
    file2="${file:12:-14}"
    samtools sort -@ 6 "$file" -o At_SNPsplit/"$file2"_SNPsplit_g2.bam
done

ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate ./subread-env/

featureCounts -T 6 -s 1 -a TAIR10.1_Col_chr.gff -t 'gene' -g 'ID' -o stringtie_out/read_counts_g1.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a stringtie_out/stringtie_merged.gtf -o stringtie_out/read_counts_g1.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a TAIR10.1_Col_chr.gff -t 'gene' -g 'ID' -o stringtie_out/read_counts_g2.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit_g2.bam
featureCounts -T 6 -s 1 -a stringtie_out/stringtie_merged.gtf -o stringtie_out/read_counts_g2.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit_g2.bam

conda deactivate

mkdir UMIcounts_g1
mkdir UMIcounts_g2
for file in "stringtie_out/"*g1.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g1/${file2}.tsv"
    fi
done

for file in "stringtie_out/"*g2.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g2/${file2}.tsv"
    fi
done


cd /scratch/jms53460/4_2024_At_Spike_ins/
ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('stringtie_out/stringtie_merged.gtf', sep = '\t')[,9], '; ')
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('gene_id ', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('_S.+L004_', '', sub('.tsv', '', files))
A[is.na(A)] = 0
A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}

files = dir('UMIcounts_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g1/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('_S.+L004_', '', sub('.tsv', '', files))
A[is.na(A)] = 0
A = A[rowSums(A) > 0,]

g1 = A[order(rownames(A)),]
g1.1 = g1
g1 = g1[!duplicated(rownames(g1)),]
for (g in unique(rownames(g1)[duplicated(rownames(g1))])) {
	g1[g,] = colSums(g1.1[rownames(g1.1) %in% g,])
}

files = dir('UMIcounts_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g2/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('_S.+L004_', '', sub('.tsv', '', files))
A[is.na(A)] = 0
A = A[rowSums(A) > 0,]

g2 = A[order(rownames(A)),]
g2.2 = g2
g2 = g2[!duplicated(rownames(g2)),]
for (g in unique(rownames(g2)[duplicated(rownames(g2))])) {
	g2[g,] = colSums(g2.2[rownames(g2.2) %in% g,])
}

save(B, g1, g2, file = "4_2024_At_Spike_ins.RData")
q()

###Code Brad used to find the sequence adjacent to the spike-ins is below
zcat At1_S90_L003_R1_001.fastq.gz | sed -n '2~4p' | head -n 1000000 | grep AAAAAAAAAAAAAA | sort |  uniq -c | sort -nr | head -n 200D:28721145

###Checking spike-in barcodes in the raw data (before demultiplexing)

#!/bin/bash
#SBATCH --job-name=At_spike_ins                                               # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=1                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=6:00:00                                                        # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_spike_ins.out       # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_spike_ins.err        # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins/Raw_Data
mkdir /scratch/jms53460/4_2024_At_Spike_ins/spike_ins
for file in *R1*
do
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | sort | uniq -c | sort -nr | head -n 100 > /scratch/jms53460/4_2024_At_Spike_ins/spike_ins/raw_"$file".txt
done

cd /scratch/jms53460/4_2024_At_Spike_ins
###Check demultiplexed files for matching spike-ins. I made a text file with the 24 spike-in barcode sequences (24spike_in_barcodes.txt)
for file in "Demultiplexed/"*.fastq*
do
    echo ""
    echo "$file"
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | grep -F -f /scratch/jms53460/4_2024_At_Spike_ins/24spike_in_barcodes.txt | sort | uniq -c | sort -nr | head -n 4 >> spike_ins/dm.txt
done

###dm.txt was confusing (it looks like it only saved the zcat lines) so I'm rerunning the code in terminal, not directing output to a file

for file in "Demultiplexed/"*.fastq*
do
    echo ""
    echo "$file"
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | grep -F -f /scratch/jms53460/4_2024_At_Spike_ins/24spike_in_barcodes.txt | sort | uniq -c | sort -nr | head -n 4
done

###I copied this info into excel to organize it


scp sapelo2:/scratch/jms53460/4_2024_At_Spike_ins/4_2024_At_Spike_ins.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'
###Opened R terminal
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/4_2024_At_Spike_ins.RData')

> summary(colSums(B))                                                        
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2363    8718   12038   17993   20227   62645 
> summary(colSums(g1))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
    272    1189    1772    2732    3058   13469
> summary(colSums(g2))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
    331    1118    1534    2630    2802   13050


UMIs = B
rownames(UMIs) = gsub("gene-", "", rownames(UMIs))
rownames(genes) = genes[,3]
rownames(g1) = gsub("gene-", "", rownames(g1))
rownames(g2) = gsub("gene-", "", rownames(g2))

g1_new = matrix(0, nrow = nrow(genes), ncol = ncol(g1))
rownames(g1_new) = genes[,3]
colnames(g1_new) = colnames(g1)
g1_new[which(rownames(g1_new) %in% rownames(g1)),] = g1[which(rownames(g1) %in% rownames(g1_new)),] # I end up losing a large portion of the data reformatting to make the BIN function work, going from mean colSums 2732 in g1 down to 1416 in g1_new
g1 = g1_new

g2_new = matrix(0, nrow = nrow(genes), ncol = ncol(g2))
rownames(g2_new) = genes[,3]
colnames(g2_new) = colnames(g2)
g2_new[which(rownames(g2_new) %in% rownames(g2)),] = g2[which(rownames(g2) %in% rownames(g2_new)),] # I end up losing a large portion of the data reformatting to make the BIN function work, going from mean colSums 2630 in g2 down to 1498 in g2_new
g2 = g2_new

library(ggplot2)
library(ggpubr)
g1_bin = BIN(g1)
g2_bin = BIN(g2)
g1_frac = g1_bin/(g1_bin + g2_bin)
AlleleFrac = g1_frac

plotCell('At3_S92_L003_50s_SNPsplit')

Samples = c(colnames(AlleleFrac))
paste("plotCell('", Samples, "')", sep = "")

setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
svg('At1-12.svg', width = 24, height = 8)
ggarrange(plotCell('At1_S90_L003_1s_SNPsplit'), plotCell('At1_S90_L003_2s_SNPsplit'), plotCell('At1_S90_L003_3s_SNPsplit'), plotCell('At1_S90_L003_4s_SNPsplit'), plotCell('At1_S90_L003_5s_SNPsplit'), plotCell('At1_S90_L003_6s_SNPsplit'), plotCell('At1_S90_L003_7s_SNPsplit'), plotCell('At1_S90_L003_8s_SNPsplit'), plotCell('At1_S90_L003_9s_SNPsplit'), plotCell('At1_S90_L003_10s_SNPsplit'), plotCell('At1_S90_L003_11s_SNPsplit'), plotCell('At1_S90_L003_12s_SNPsplit'), ncol = 12, align = 'v')
dev.off()

###This works, now I need to randomize the samples to blind myself (while saving the )

load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/4_2024_At_Spike_ins.RData')

set.seed(2)
UMIs = B[,sample(1:ncol(B))]
sampled_cols = colnames(UMIs)
g1_original = g1
colnames(g1) = colnames(B)
g1 = g1[,colnames(UMIs)]
g2_original = g2
colnames(g2) = colnames(B)
g2 = g2[,colnames(UMIs)]
colnames(UMIs) = 1:ncol(UMIs)
colnames(g1) = 1:ncol(UMIs)
colnames(g2) = 1:ncol(UMIs)

#checked that this worked with set.seed(1), then redid it with set.seed(2)

rownames(UMIs) = gsub("gene-", "", rownames(UMIs))
rownames(genes) = genes[,3]
rownames(g1) = gsub("gene-", "", rownames(g1))
rownames(g2) = gsub("gene-", "", rownames(g2))

g1_new = matrix(0, nrow = nrow(genes), ncol = ncol(g1))
rownames(g1_new) = genes[,3]
colnames(g1_new) = colnames(g1)
g1_new[which(rownames(g1_new) %in% rownames(g1)),] = g1[which(rownames(g1) %in% rownames(g1_new)),] # I end up losing a large portion of the data reformatting to make the BIN function work, going from mean colSums 2732 in g1 down to 1416 in g1_new
g1 = g1_new

g2_new = matrix(0, nrow = nrow(genes), ncol = ncol(g2))
rownames(g2_new) = genes[,3]
colnames(g2_new) = colnames(g2)
g2_new[which(rownames(g2_new) %in% rownames(g2)),] = g2[which(rownames(g2) %in% rownames(g2_new)),] # I end up losing a large portion of the data reformatting to make the BIN function work, going from mean colSums 2630 in g2 down to 1498 in g2_new
g2 = g2_new

library(ggplot2)
library(ggpubr)
g1_bin = BIN(g1)
g2_bin = BIN(g2)
g1_frac = g1_bin/(g1_bin + g2_bin)
AlleleFrac = g1_frac

plotCell('1')

setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
svg('At1-12.svg', width = 24, height = 8)
ggarrange(plotCell('1'), plotCell('2'), plotCell('3'), plotCell('4'), plotCell('5'), plotCell('6'), plotCell('7'), plotCell('8'), plotCell('9'), plotCell('10'), plotCell('11'), plotCell('12'), ncol = 12, align = 'v')
dev.off()

svg('At13-24.svg', width = 24, height = 8)
ggarrange(plotCell('13'), plotCell('14'), plotCell('15'), plotCell('16'), plotCell('17'), plotCell('18'), plotCell('19'), plotCell('20'), plotCell('21'), plotCell('22'), plotCell('23'), plotCell('24'), ncol = 12, align = 'v')
dev.off()

svg('At25-36.svg', width = 24, height = 8)
ggarrange(plotCell('25'), plotCell('26'), plotCell('27'), plotCell('28'), plotCell('29'), plotCell('30'), plotCell('31'), plotCell('32'), plotCell('33'), plotCell('34'), plotCell('35'), plotCell('36'), ncol = 12, align = 'v')
dev.off()

svg('At37-48.svg', width = 24, height = 8)
ggarrange(plotCell('37'), plotCell('38'), plotCell('39'), plotCell('40'), plotCell('41'), plotCell('42'), plotCell('43'), plotCell('44'), plotCell('45'), plotCell('46'), plotCell('47'), plotCell('48'), ncol = 12, align = 'v')
dev.off()

svg('At49-60.svg', width = 24, height = 8)
ggarrange(plotCell('49'), plotCell('50'), plotCell('51'), plotCell('52'), plotCell('53'), plotCell('54'), plotCell('55'), plotCell('56'), plotCell('57'), plotCell('58'), plotCell('59'), plotCell('60'), ncol = 12, align = 'v')
dev.off()

svg('At61-72.svg', width = 24, height = 8)
ggarrange(plotCell('61'), plotCell('62'), plotCell('63'), plotCell('64'), plotCell('65'), plotCell('66'), plotCell('67'), plotCell('68'), plotCell('69'), plotCell('70'), plotCell('71'), plotCell('72'), ncol = 12, align = 'v')
dev.off()

svg('At73-84.svg', width = 24, height = 8)
ggarrange(plotCell('73'), plotCell('74'), plotCell('75'), plotCell('76'), plotCell('77'), plotCell('78'), plotCell('79'), plotCell('80'), plotCell('81'), plotCell('82'), plotCell('83'), plotCell('84'), ncol = 12, align = 'v')
dev.off()

svg('At85-96.svg', width = 24, height = 8)
ggarrange(plotCell('85'), plotCell('86'), plotCell('87'), plotCell('88'), plotCell('89'), plotCell('90'), plotCell('91'), plotCell('92'), plotCell('93'), plotCell('94'), plotCell('95'), plotCell('96'), ncol = 12, align = 'v')
dev.off()

g2_bin_filter[which(g2_bin_filter < 5)] = 0
#Trying changing all bins <5 to 0 so they are excluded
g1_bin_filter = g1_bin
g1_bin_filter[which(g1_bin & g2_bin < 5)] = 0
g2_bin_filter = g2_bin
g2_bin_filter[which(g1_bin & g2_bin < 5)] = 0
g1_frac_filter = g1_bin_filter/(g1_bin_filter + g2_bin_filter)
AlleleFrac = g1_frac_filter

svg('At1-12f.svg', width = 24, height = 8)
ggarrange(plotCell('1'), plotCell('2'), plotCell('3'), plotCell('4'), plotCell('5'), plotCell('6'), plotCell('7'), plotCell('8'), plotCell('9'), plotCell('10'), plotCell('11'), plotCell('12'), ncol = 12, align = 'v')
dev.off()

svg('At13-24f.svg', width = 24, height = 8)
ggarrange(plotCell('13'), plotCell('14'), plotCell('15'), plotCell('16'), plotCell('17'), plotCell('18'), plotCell('19'), plotCell('20'), plotCell('21'), plotCell('22'), plotCell('23'), plotCell('24'), ncol = 12, align = 'v')
dev.off()

svg('At25-36f.svg', width = 24, height = 8)
ggarrange(plotCell('25'), plotCell('26'), plotCell('27'), plotCell('28'), plotCell('29'), plotCell('30'), plotCell('31'), plotCell('32'), plotCell('33'), plotCell('34'), plotCell('35'), plotCell('36'), ncol = 12, align = 'v')
dev.off()

svg('At37-48f.svg', width = 24, height = 8)
ggarrange(plotCell('37'), plotCell('38'), plotCell('39'), plotCell('40'), plotCell('41'), plotCell('42'), plotCell('43'), plotCell('44'), plotCell('45'), plotCell('46'), plotCell('47'), plotCell('48'), ncol = 12, align = 'v')
dev.off()

svg('At49-60f.svg', width = 24, height = 8)
ggarrange(plotCell('49'), plotCell('50'), plotCell('51'), plotCell('52'), plotCell('53'), plotCell('54'), plotCell('55'), plotCell('56'), plotCell('57'), plotCell('58'), plotCell('59'), plotCell('60'), ncol = 12, align = 'v')
dev.off()

svg('At61-72f.svg', width = 24, height = 8)
ggarrange(plotCell('61'), plotCell('62'), plotCell('63'), plotCell('64'), plotCell('65'), plotCell('66'), plotCell('67'), plotCell('68'), plotCell('69'), plotCell('70'), plotCell('71'), plotCell('72'), ncol = 12, align = 'v')
dev.off()

svg('At73-84f.svg', width = 24, height = 8)
ggarrange(plotCell('73'), plotCell('74'), plotCell('75'), plotCell('76'), plotCell('77'), plotCell('78'), plotCell('79'), plotCell('80'), plotCell('81'), plotCell('82'), plotCell('83'), plotCell('84'), ncol = 12, align = 'v')
dev.off()

svg('At85-96f.svg', width = 24, height = 8)
ggarrange(plotCell('85'), plotCell('86'), plotCell('87'), plotCell('88'), plotCell('89'), plotCell('90'), plotCell('91'), plotCell('92'), plotCell('93'), plotCell('94'), plotCell('95'), plotCell('96'), ncol = 12, align = 'v')
dev.off()


###Realized that I should not have used the stringtie twice with the same output--I overwrote the first with the second, and the first is the one I wanted in this case

mkdir featurecounts
mkdir bams2
rm UMIcounts/*
rm UMIcounts_g1/*
rm UMIcounts_g2/*

#!/bin/bash
#SBATCH --job-name=At_features_UMIs3                                          # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=12:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_features_UMIs3.out  # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_features_UMIs3.err   # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate ./subread-env/

featureCounts -T 6 -s 1 -a TAIR10.1_Col_chr.gff -t 'gene' -g 'ID' -o featurecounts/read_counts.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a TAIR10.1_Col_chr.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g1.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a TAIR10.1_Col_chr.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g2.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts/"*SNPsplit.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g1.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts_g1/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g2.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts_g2/${file2}.tsv"
    fi
done



cd /scratch/jms53460/4_2024_At_Spike_ins/
ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('TAIR10.1_Col_chr.gff', sep = '\t')[,9], ';')
annots = annots[grep('ID=gene-', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('ID=', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit.tsv', '', files))
A[is.na(A)] = 0
A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
C = B

files = dir('UMIcounts_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g1/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g1.tsv', '', files))
A[is.na(A)] = 0
A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g1.1 = B

files = dir('UMIcounts_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g2/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g2.tsv', '', files))
A[is.na(A)] = 0
A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g2.1 = B

genes = read.table('TAIR10.1_Col_chr.gff', sep = '\t')[,c(1,5)]
annots2 = strsplit(read.table('TAIR10.1_Col_chr.gff', sep = '\t')[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
annots2 = sub(';', '', sub(' ', '', unlist(lapply(annots2, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))
genes[,3] = annots2
genes2 = genes[grepl('ID=gene-', genes[,3]),]
genes = genes2[order(genes2[,3]),]
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]

save(C,g1.1,g2.1,genes, file = "4_2024_At_Spike_ins2.RData")
q()


scp sapelo2:/scratch/jms53460/4_2024_At_Spike_ins/4_2024_At_Spike_ins2.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'


###In local R terminal
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/4_2024_At_Spike_ins2.RData')

set.seed(2)
UMIs = C[,sample(1:ncol(C))]
sampled_cols = colnames(UMIs)
g1.1_original = g1.1
colnames(g1.1) = colnames(C)
g1.1 = g1.1[,colnames(UMIs)]
g2.1_original = g2.1
colnames(g2.1) = colnames(C)
g2.1 = g2.1[,colnames(UMIs)]
colnames(UMIs) = 1:ncol(UMIs)
colnames(g1.1) = 1:ncol(UMIs)
colnames(g2.1) = 1:ncol(UMIs)

g1.1_new = matrix(0, nrow = nrow(genes), ncol = ncol(g1.1))
rownames(g1.1_new) = genes[,3]
colnames(g1.1_new) = colnames(g1.1)
g1.1_new[which(rownames(g1.1_new) %in% rownames(g1.1)),] = g1.1[which(rownames(g1.1) %in% rownames(g1.1_new)),]


g2.1_new = matrix(0, nrow = nrow(genes), ncol = ncol(g2.1))
rownames(g2.1_new) = genes[,3]
colnames(g2.1_new) = colnames(g2.1)
g2.1_new[which(rownames(g2.1_new) %in% rownames(g2.1)),] = g2.1[which(rownames(g2.1) %in% rownames(g2.1_new)),] 


library(ggplot2)
library(ggpubr)
g1.1_bin = BIN(g1.1_new)
g2.1_bin = BIN(g2.1_new)
g1.1_frac = g1.1_bin/(g1.1_bin + g2.1_bin)
AlleleFrac = g1.1_frac

plotCell('1')
colSums_C = matrix(colSums(UMIs), nrow = 96, ncol = 1)
colSums_C[,1] #pasted this into excel

setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
svg('At1-12_1.svg', width = 24, height = 8)
ggarrange(plotCell2('1'), plotCell2('2'), plotCell2('3'), plotCell2('4'), plotCell2('5'), plotCell2('6'), plotCell2('7'), plotCell2('8'), plotCell2('9'), plotCell2('10'), plotCell2('11'), plotCell2('12'), ncol = 12, align = 'v')
dev.off()

svg('At13-24_1.svg', width = 24, height = 8)
ggarrange(plotCell2('13'), plotCell2('14'), plotCell2('15'), plotCell2('16'), plotCell2('17'), plotCell2('18'), plotCell2('19'), plotCell2('20'), plotCell2('21'), plotCell2('22'), plotCell2('23'), plotCell2('24'), ncol = 12, align = 'v')
dev.off()

svg('At25-36_1.svg', width = 24, height = 8)
ggarrange(plotCell2('25'), plotCell2('26'), plotCell2('27'), plotCell2('28'), plotCell2('29'), plotCell2('30'), plotCell2('31'), plotCell2('32'), plotCell2('33'), plotCell2('34'), plotCell2('35'), plotCell2('36'), ncol = 12, align = 'v')
dev.off()

svg('At37-48_1.svg', width = 24, height = 8)
ggarrange(plotCell2('37'), plotCell2('38'), plotCell2('39'), plotCell2('40'), plotCell2('41'), plotCell2('42'), plotCell2('43'), plotCell2('44'), plotCell2('45'), plotCell2('46'), plotCell2('47'), plotCell2('48'), ncol = 12, align = 'v')
dev.off()

svg('At49-60_1.svg', width = 24, height = 8)
ggarrange(plotCell2('49'), plotCell2('50'), plotCell2('51'), plotCell2('52'), plotCell2('53'), plotCell2('54'), plotCell2('55'), plotCell2('56'), plotCell2('57'), plotCell2('58'), plotCell2('59'), plotCell2('60'), ncol = 12, align = 'v')
dev.off()

svg('At61-72_1.svg', width = 24, height = 8)
ggarrange(plotCell2('61'), plotCell2('62'), plotCell2('63'), plotCell2('64'), plotCell2('65'), plotCell2('66'), plotCell2('67'), plotCell2('68'), plotCell2('69'), plotCell2('70'), plotCell2('71'), plotCell2('72'), ncol = 12, align = 'v')
dev.off()

svg('At73-84_1.svg', width = 24, height = 8)
ggarrange(plotCell2('73'), plotCell2('74'), plotCell2('75'), plotCell2('76'), plotCell2('77'), plotCell2('78'), plotCell2('79'), plotCell2('80'), plotCell2('81'), plotCell2('82'), plotCell2('83'), plotCell2('84'), ncol = 12, align = 'v')
dev.off()

svg('At85-96_1.svg', width = 24, height = 8)
ggarrange(plotCell2('85'), plotCell2('86'), plotCell2('87'), plotCell2('88'), plotCell2('89'), plotCell2('90'), plotCell2('91'), plotCell2('92'), plotCell2('93'), plotCell2('94'), plotCell2('95'), plotCell2('96'), ncol = 12, align = 'v')
dev.off()


#Trying changing all bins <3 to 0 so they are excluded
g1.1_bin_filter = g1.1_bin
g1.1_bin_filter[which(g1.1_bin & g2.1_bin < 3)] = 0
g2.1_bin_filter = g2.1_bin
g2.1_bin_filter[which(g1.1_bin & g2.1_bin < 3)] = 0
g1.1_frac_filter = g1.1_bin_filter/(g1.1_bin_filter + g2.1_bin_filter)
AlleleFrac = g1.1_frac_filter

svg('At1-12_1f.svg', width = 24, height = 8)
ggarrange(plotCell2('1'), plotCell2('2'), plotCell2('3'), plotCell2('4'), plotCell2('5'), plotCell2('6'), plotCell2('7'), plotCell2('8'), plotCell2('9'), plotCell2('10'), plotCell2('11'), plotCell2('12'), ncol = 12, align = 'v')
dev.off()

svg('At13-24_1f.svg', width = 24, height = 8)
ggarrange(plotCell2('13'), plotCell2('14'), plotCell2('15'), plotCell2('16'), plotCell2('17'), plotCell2('18'), plotCell2('19'), plotCell2('20'), plotCell2('21'), plotCell2('22'), plotCell2('23'), plotCell2('24'), ncol = 12, align = 'v')
dev.off()

svg('At25-36_1f.svg', width = 24, height = 8)
ggarrange(plotCell2('25'), plotCell2('26'), plotCell2('27'), plotCell2('28'), plotCell2('29'), plotCell2('30'), plotCell2('31'), plotCell2('32'), plotCell2('33'), plotCell2('34'), plotCell2('35'), plotCell2('36'), ncol = 12, align = 'v')
dev.off()

svg('At37-48_1f.svg', width = 24, height = 8)
ggarrange(plotCell2('37'), plotCell2('38'), plotCell2('39'), plotCell2('40'), plotCell2('41'), plotCell2('42'), plotCell2('43'), plotCell2('44'), plotCell2('45'), plotCell2('46'), plotCell2('47'), plotCell2('48'), ncol = 12, align = 'v')
dev.off()

svg('At49-60_1f.svg', width = 24, height = 8)
ggarrange(plotCell2('49'), plotCell2('50'), plotCell2('51'), plotCell2('52'), plotCell2('53'), plotCell2('54'), plotCell2('55'), plotCell2('56'), plotCell2('57'), plotCell2('58'), plotCell2('59'), plotCell2('60'), ncol = 12, align = 'v')
dev.off()

svg('At61-72_1f.svg', width = 24, height = 8)
ggarrange(plotCell2('61'), plotCell2('62'), plotCell2('63'), plotCell2('64'), plotCell2('65'), plotCell2('66'), plotCell2('67'), plotCell2('68'), plotCell2('69'), plotCell2('70'), plotCell2('71'), plotCell2('72'), ncol = 12, align = 'v')
dev.off()

svg('At73-84_1f.svg', width = 24, height = 8)
ggarrange(plotCell2('73'), plotCell2('74'), plotCell2('75'), plotCell2('76'), plotCell2('77'), plotCell2('78'), plotCell2('79'), plotCell2('80'), plotCell2('81'), plotCell2('82'), plotCell2('83'), plotCell2('84'), ncol = 12, align = 'v')
dev.off()

svg('At85-96_1f.svg', width = 24, height = 8)
ggarrange(plotCell2('85'), plotCell2('86'), plotCell2('87'), plotCell2('88'), plotCell2('89'), plotCell2('90'), plotCell2('91'), plotCell2('92'), plotCell2('93'), plotCell2('94'), plotCell2('95'), plotCell2('96'), ncol = 12, align = 'v')
dev.off()


library('ComplexHeatmap')
AlleleFrac = g1.1_frac
#AlleleFrac[AlleleFrac == 'Invalid Number'] = 'NA'
#AlleleFrac[AlleleFrac == 'NaN'] = 0
#class(AlleleFrac) = 'numeric'

setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
svg('AlleleFrac_cor_blind.svg', width = 14, height = 13.5)
Heatmap(cor(AlleleFrac, use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
dev.off()


svg('At43-13_blind_hmap.svg', width = 24, height = 8)
ggarrange(plotCell2('43'), plotCell2('67'), plotCell2('58'), plotCell2('21'), plotCell2('96'), plotCell2('18'), plotCell2('29'), plotCell2('55'), plotCell2('92'), plotCell2('66'), plotCell2('82'), plotCell2('13'), ncol = 12, align = 'v')
dev.off()

svg('AlleleFrac_cor_blind_over6000.svg', width = 10, height = 9.5)
Heatmap(cor(AlleleFrac[,which(colSums(UMIs) >= 6000)], use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
dev.off()

svg('AlleleFrac_cor_blind_over10000.svg', width = 10, height = 9.5)
Heatmap(cor(AlleleFrac[,which(colSums(UMIs) >= 10000)], use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
dev.off()

svg('At_over10000_blind_hmap.svg', width = 30, height = 8)
ggarrange(plotCell2('11'), plotCell2('92'), plotCell2('32'), plotCell2('17'), plotCell2('87'), plotCell2('13'), plotCell2('36'), plotCell2('9'), plotCell2('3'), plotCell2('2'), plotCell2('83'), plotCell2('88'), plotCell2('76'), plotCell2('65'), plotCell2('93'), plotCell2('64'), plotCell2('44'), plotCell2('41'), ncol = 18, align = 'v')
dev.off()


###Finding how many spike-ins were detected in total and how many unique spike-ins were found for each sample
for file in "Demultiplexed/"*.fastq*
do
    echo ""
    echo "$file"
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | grep -F -f /scratch/jms53460/4_2024_At_Spike_ins/24spike_in_barcodes.txt | wc -l
done

for file in "Demultiplexed/"*.fastq*
do
    echo ""
    echo "$file"
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | grep -F -f /scratch/jms53460/4_2024_At_Spike_ins/24spike_in_barcodes.txt | sort | uniq -c | sort -nr | wc -l
done


###Simulate contamination in my data. Most monoallelic looking samples: '2','3','9','11','13','17','32','36','41','44','49','64','65','87','93'
g1.1_contam = 0.8*g1.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + 0.2*g1.1_new[,c('93','2','3','9','11','13','17','32','36','41','44','49','64','65','87')]
g2.1_contam = 0.8*g2.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + 0.2*g2.1_new[,c('93','2','3','9','11','13','17','32','36','41','44','49','64','65','87')]

BIN2 = function (xx, bin = 10^6) 
    {
        bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
        out = by(xx, bin, colSums)
        out2 = t(matrix(unlist(out), nrow = ncol(g1.1_contam)))
        colnames(out2) = colnames(g1.1_contam)
        rownames(out2) = names(out)
        return(out2)
    }

g1.1_bin_contam = round(BIN2(g1.1_contam))
g2.1_bin_contam = round(BIN2(g2.1_contam))
g1.1_frac_contam = g1.1_bin_contam/(g1.1_bin_contam + g2.1_bin_contam)
AlleleFrac = g1.1_frac_contam

plotCell2 = function (cell) 
{
    annotate_figure(ggarrange(plotChr(cell, chr = 1), plotChr(cell, 
        chr = 2), plotChr(cell, chr = 3), plotChr(cell, chr = 4), 
        plotChr(cell, chr = 5), plotScaleBar, ncol = 1, nrow = 6, 
        align = "v", heights = c(rep(1, 5), 0.4)), left = text_grob("          % Transcripts from Col-0 allele", 
        rot = 90, size = 10), top = cell)
}
plotCell2('2')
###I'm going back and changing the above scripts to use plotCell2

svg('At_sim_contam_0.8-0.2.svg', width = 30, height = 8)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

###Version without simulated contamination
AlleleFrac = g1.1_frac
svg('At_no_sim_contam.svg', width = 30, height = 8)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

###Checking different contamination levels
g1.1_contam = 0.7*g1.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + 0.3*g1.1_new[,c('93','2','3','9','11','13','17','32','36','41','44','49','64','65','87')]
g2.1_contam = 0.7*g2.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + 0.3*g2.1_new[,c('93','2','3','9','11','13','17','32','36','41','44','49','64','65','87')]
g1.1_bin_contam = round(BIN2(g1.1_contam))
g2.1_bin_contam = round(BIN2(g2.1_contam))
g1.1_frac_contam = g1.1_bin_contam/(g1.1_bin_contam + g2.1_bin_contam)
AlleleFrac = g1.1_frac_contam
svg('At_sim_contam_0.7-0.3.svg', width = 30, height = 8)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

g1.1_contam = 0.9*g1.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + 0.1*g1.1_new[,c('93','2','3','9','11','13','17','32','36','41','44','49','64','65','87')]
g2.1_contam = 0.9*g2.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + 0.1*g2.1_new[,c('93','2','3','9','11','13','17','32','36','41','44','49','64','65','87')]
g1.1_bin_contam = round(BIN2(g1.1_contam))
g2.1_bin_contam = round(BIN2(g2.1_contam))
g1.1_frac_contam = g1.1_bin_contam/(g1.1_bin_contam + g2.1_bin_contam)
AlleleFrac = g1.1_frac_contam
svg('At_sim_contam_0.9-0.1.svg', width = 30, height = 8)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

g1.1_contam = 0.85*g1.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + 0.15*g1.1_new[,c('93','2','3','9','11','13','17','32','36','41','44','49','64','65','87')]
g2.1_contam = 0.85*g2.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + 0.15*g2.1_new[,c('93','2','3','9','11','13','17','32','36','41','44','49','64','65','87')]
g1.1_bin_contam = round(BIN2(g1.1_contam))
g2.1_bin_contam = round(BIN2(g2.1_contam))
g1.1_frac_contam = g1.1_bin_contam/(g1.1_bin_contam + g2.1_bin_contam)
AlleleFrac = g1.1_frac_contam
svg('At_sim_contam_0.85-0.15.svg', width = 30, height = 8)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

###Trying using rowMeans to simulate small amounts of contamination from all samples

g1.1_contam = 0.8*g1.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + 0.2*rowMeans(g1.1_new)
g2.1_contam = 0.8*g2.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + 0.2*rowMeans(g2.1_new)
g1.1_bin_contam = round(BIN2(g1.1_contam))
g2.1_bin_contam = round(BIN2(g2.1_contam))
g1.1_frac_contam = g1.1_bin_contam/(g1.1_bin_contam + g2.1_bin_contam)
AlleleFrac = g1.1_frac_contam
svg('At_sim_gen_contam_0.8-0.2.svg', width = 30, height = 8)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

Contam_func = function(x, y){
    g1.1_contam = x*g1.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + y*rowMeans(g1.1_new)
    g2.1_contam = x*g2.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + y*rowMeans(g2.1_new)
    g1.1_bin_contam = round(BIN2(g1.1_contam))
    g2.1_bin_contam = round(BIN2(g2.1_contam))
    g1.1_frac_contam = g1.1_bin_contam/(g1.1_bin_contam + g2.1_bin_contam)
    AlleleFrac = g1.1_frac_contam
    return(AlleleFrac)
}

svg('At_sim_gen_contam_0.9-0.1.svg', width = 30, height = 8)
AlleleFrac = Contam_func(0.9, 0.1)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

svg('At_sim_gen_contam_0.8-0.2.svg', width = 30, height = 8)
AlleleFrac = Contam_func(0.8, 0.2)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

svg('At_sim_gen_contam_0.7-0.3.svg', width = 30, height = 8)
AlleleFrac = Contam_func(0.7, 0.3)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

svg('At_sim_gen_contam_0.6-0.4.svg', width = 30, height = 8)
AlleleFrac = Contam_func(0.6, 0.4)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()


###Adding contamination from the rowMeans of all samples has a modest effect, pulling the dots closer to 0.5, but mostly maintaining the monoallelic patterns
###I will now add in contamination from rowMeans in addition to contamination from single samples

Contam_func2 = function(x, y, z){
    g1.1_contam = x*g1.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + y*rowMeans(g1.1_new) + z*g1.1_new[,c('93','2','3','9','11','13','17','32','36','41','44','49','64','65','87')]
    g2.1_contam = x*g2.1_new[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] + y*rowMeans(g2.1_new) + z*g2.1_new[,c('93','2','3','9','11','13','17','32','36','41','44','49','64','65','87')]
    g1.1_bin_contam = round(BIN2(g1.1_contam))
    g2.1_bin_contam = round(BIN2(g2.1_contam))
    g1.1_frac_contam = g1.1_bin_contam/(g1.1_bin_contam + g2.1_bin_contam)
    return(g1.1_frac_contam)
}

svg('At_sim_contam_0.9-0.085-0.015.svg', width = 30, height = 8)
AlleleFrac = Contam_func2(0.9, 0.085, 0.015)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

svg('At_sim_contam_0.8-0.18-0.02.svg', width = 30, height = 8)
AlleleFrac = Contam_func2(0.8, 0.18, 0.02)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

svg('At_sim_contam_0.7-0.26-0.04.svg', width = 30, height = 8)
AlleleFrac = Contam_func2(0.7, 0.26, 0.04)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

###Also checking with reduced content coming from the correct pollen grain, since most samples had fewer UMIs

svg('At_sim_contam_0.45-0.0425-0.0075.svg', width = 30, height = 8)
AlleleFrac = Contam_func2(0.45, 0.0425, 0.0075)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

svg('At_sim_contam_0.4-0.09-0.01.svg', width = 30, height = 8)
AlleleFrac = Contam_func2(0.4, 0.09, 0.01)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

svg('At_sim_contam_0.35-0.13-0.02.svg', width = 30, height = 8)
AlleleFrac = Contam_func2(0.35, 0.13, 0.02)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

svg('At_sim_contam_0.09-0.0085-0.0015.svg', width = 30, height = 8)
AlleleFrac = Contam_func2(0.09, 0.0085, 0.0015)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

svg('At_sim_contam_0.08-0.018-0.002.svg', width = 30, height = 8)
AlleleFrac = Contam_func2(0.08, 0.018, 0.002)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()

svg('At_sim_contam_0.07-0.026-0.004.svg', width = 30, height = 8)
AlleleFrac = Contam_func2(0.07, 0.026, 0.004)
ggarrange(plotCell2('2'), plotCell2('3'), plotCell2('9'), plotCell2('11'), plotCell2('13'), plotCell2('17'), plotCell2('32'), plotCell2('36'), plotCell2('41'), plotCell2('44'), plotCell2('49'), plotCell2('64'), plotCell2('65'), plotCell2('87'), plotCell2('93'), ncol = 15, align = 'v')
dev.off()



###In the final analysis, it might be helpful to rescale the spike-in concentrations detected based on the amount of UMIs for the mataching sample when calculating contamination. Based on comparing # correct and total spike-ins with head(colSums(C),10), the amount of spike-ins does not appear to be proportional to the amount of UMIs in the data. In which case it might make sense to normalize the spike-in amounts detected based on UMIs detected.


###Produce table with all the matching spike-ins in demultiplexed files.
cd /scratch/jms53460/4_2024_At_Spike_ins/
#Copied over all the demultiplexed samples that were real samples over to Demultiplexed2
mkdir spike_ins2
for file in "Demultiplexed2/"*.fastq*
do
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | grep -F -f /scratch/jms53460/4_2024_At_Spike_ins/24spike_in_barcodes.txt | sort | uniq -c | sort -nr | head -n 22 > spike_ins2/"${file:15:-9}".txt
done

mkdir spike_ins3
for file in spike_ins2/At*s.txt
do
    awk '{print $1,$2}' $file OFS="" > spike_ins3/${file:10:-4}.tsv
done

ml R/4.3.1-foss-2022a
R
spike_in_list = read.delim('24spike_in_barcodes.txt', header=F)
spike_in_list = spike_in_list[c(1:24),]
names(spike_in_list) = unlist(lapply(spike_in_list, function(xx) { xx[1] }))
files = dir('spike_ins3')
A = matrix(NA, nrow = length(spike_in_list), ncol = length(files))
rownames(A) = spike_in_list
colnames(A) = files
for (f in files) {
    xx = read.table(paste('spike_ins3/', f, sep = ''), sep = '', header = F, row.names = 2)
    A[,f] = xx[match(names(spike_in_list),rownames(xx)),1]
}

load('4_2024_At_Spike_ins2.RData')

B = A[,c(11,17:24,1:10,12:16,25:96)]
C = C[,c(11,17:24,1:10,12:16,25:96)]


for (x in 1:24) {
    for (z in (1:24)[-x]){
        B[z,x] = B[z,x]*sum(C[,z])/sum(C[,x])
    }
}
for (x in 25:48) {
    for (z in (1:24)[-(x-24)]){
        B[z,x] = B[z,x]*sum(C[,(z+24)])/sum(C[,x])
    }
}
for (x in 49:72) {
    for (z in (1:24)[-(x-48)]){
        B[z,x] = B[z,x]*sum(C[,(z+48)])/sum(C[,x])
    }
}
for (x in 73:96) {
    for (z in (1:24)[-(x-72)]){
        B[z,x] = B[z,x]*sum(C[,(z+72)])/sum(C[,x])
    }
}

B[is.na(B)] = 0
colSums(B) # pasted this over to excel
C_ordered = C
Spike_ins = B
Spike_ins_original = A[,c(11,17:24,1:10,12:16,25:96)]
save(Spike_ins,C_ordered,Spike_ins_original, file = '4_2024_At_Spike_ins3.RData')
q()


###Copying this to my local computer
scp sapelo2:/scratch/jms53460/4_2024_At_Spike_ins/4_2024_At_Spike_ins3.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'


###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('4_2024_At_Spike_ins3.RData')

###Checking what fraction of the bins are monoallelic with a cut-off of >= 80% from one allele
100*colMeans(abs(g1.1_frac - .5) >= .3, na.rm=T)
which(100*colMeans(abs(g1.1_frac - .5) >= .3, na.rm=T) > 65) #This matches my monoallelic decisions from the chromosome plots with the exception that I marked #48 as somewhat monoallelic, but it makes the 65% monoallelic cutoff (it is 79.3% monoallelic based on these criteria)
100*colMeans(abs(g1.1_frac[,c('2','3','9','11','13','17','32','36','41','44','49','64','65','87','93')] - .5) >= .3, na.rm=T)
100*colMeans(abs(Contam_func2(0.9, 0.085, 0.015) - .5) >= .3, na.rm=T) #everything stays above the 65% cutoff
100*colMeans(abs(Contam_func2(0.88, 0.102, 0.018) - .5) >= .3, na.rm=T) #35 at 64.94845% and everything else is above 65%
100*colMeans(abs(Contam_func2(0.8, 0.18, 0.02) - .5) >= .3, na.rm=T) #below 65%: 11,17,36,49
100*colMeans(abs(Contam_func2(0.7, 0.26, 0.04) - .5) >= .3, na.rm=T) #below 65%: 11,13,17,36,49,64,87,93
100*colMeans(abs(Contam_func2(0.09, 0.0085, 0.0015) - .5) >= .3, na.rm=T) #everything stays above the 65% cutoff
100*colMeans(abs(Contam_func2(0.088, 0.0102, 0.0018) - .5) >= .3, na.rm=T) #everything stays above the 65% cutoff
100*colMeans(abs(Contam_func2(0.08, 0.018, 0.002) - .5) >= .3, na.rm=T) #below 65%: 17,36
100*colMeans(abs(Contam_func2(0.07, 0.026, 0.004) - .5) >= .3, na.rm=T) #below 65%: 11,13,17,36,49

###From this, it seems like samples with 12% contamination or less maintain their monoallelic patterns
###I will therefore presume the samples with 12% or less mismatched UMI-scaled spike-ins (88% correct) are likely clean enough to use.
###Since my simulated contamination is using samples that all appear to have at least a small amount of contamination, I will consider samples with 80-87% correct UMI-scaled spike-ins as possibly clean enough to use for now.


###Trying to figure out which of the samples in which I can see monoallelic expression patterns are contaminated
###Monoallelic and somewhat monoallelic samples: 2,3,9,11,13,15,17,32,36,41,44,47,48,49,54,61,64,65,76,79,83,87,88,93
AlleleFrac = g1.1_frac
library('ComplexHeatmap')

svg('AlleleFrac_cor_blind_monoallelic_only.svg', width = 8, height = 7.5)
Monoallelic_heatmap = Heatmap(cor(AlleleFrac[,c(2,3,9,11,13,15,17,32,36,41,44,47,48,49,54,61,64,65,76,79,83,87,88,93)], use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Monoallelic_heatmap
dev.off()

svg('At_monoallelic_only.svg', width = 36, height = 8)
ggarrange(plotCell2('11'), plotCell2('49'), plotCell2('76'), plotCell2('15'), plotCell2('93'), plotCell2('64'), plotCell2('32'), plotCell2('17'), plotCell2('87'), plotCell2('47'), plotCell2('36'), plotCell2('9'), plotCell2('48'), plotCell2('61'), plotCell2('13'), plotCell2('79'), plotCell2('65'), plotCell2('54'), plotCell2('2'), plotCell2('83'), plotCell2('3'), plotCell2('88'), plotCell2('44'), plotCell2('41'), ncol = 24, align = 'v')
dev.off()




scp sapelo2:/scratch/jms53460/4_2024_At_Spike_ins/Raw_Data/* 'D:\4_2024_At_Data'

cd /scratch/jms53460/4_2024_At_Spike_ins/
ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('TAIR10.1_Col_5.gff', sep = '\t', quote = "")[,9], ';')
annots = annots[grep('ID=gene-', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('ID=', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
D = B

files = dir('UMIcounts_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g1/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g1.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g1 = B

files = dir('UMIcounts_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g2/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g2.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g2 = B

genes = read.table('TAIR10.1_Col_5.gff', sep = '\t', quote = "")[,c(1,5)]
annots2 = strsplit(read.table('TAIR10.1_Col_5.gff', sep = '\t', quote = "")[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
annots2 = sub(';', '', sub(' ', '', unlist(lapply(annots2, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))
genes[,3] = annots2
genes2 = genes[grepl('ID=gene-', genes[,3]),]
genes = genes2[order(genes2[,2]),] #order by position
genes = genes[order(genes[,1]),] #order by chr
genes = genes[!duplicated(genes[,3]),]
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]

D = D[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]

save(D,g1,g2,genes, file = "4_2024_At_Spike_ins4.RData")
q()


scp sapelo2:/scratch/jms53460/4_2024_At_Spike_ins/4_2024_At_Spike_ins4.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'

setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('4_2024_At_Spike_ins4.RData')
summary(colSums(D))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#   2274    8478   11699   17476   19555   61082

library(ggplot2)
library(ggpubr)

plotCell2 = function (cell) 
{
    annotate_figure(ggarrange(plotChr(cell, chr = 1), plotChr(cell, 
        chr = 2), plotChr(cell, chr = 3), plotChr(cell, chr = 4), 
        plotChr(cell, chr = 5), plotScaleBar, ncol = 1, nrow = 6, 
        align = "v", heights = c(rep(1, 5), 0.4)), left = text_grob("          % Transcripts from Col-0 allele", 
        rot = 90, size = 10), top = cell)
}


BIN2 = function (xx, bin = 10^6) 
{
    bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1)))
    colnames(out2) = colnames(g1)
    rownames(out2) = names(out)
    return(out2)
}

library(ggplot2)
library(ggpubr)
g1_bin = BIN2(g1)
g2_bin = BIN2(g2)
g1_frac = g1_bin/(g1_bin + g2_bin)
AlleleFrac = g1_frac
AlleleFrac[(g1_bin+g2_bin) < 10] = NA #remove bins with <10 genoinformative transcripts
#AlleleFrac2 = AlleleFrac[,which(colSums(is.na(AlleleFrac)) <= 50)]
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 10000)] #59/96 pass >=10,000 threshold

library('ComplexHeatmap')

FracMono = 100*colMeans(abs(AlleleFrac2 - .5) >= .3, na.rm=T)

Heatmap(AlleleFrac2, cluster_rows=F)                   

#12 buds
#59 Tri samples >= 10,000 UMIs