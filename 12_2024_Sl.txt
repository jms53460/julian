###Processing and analyzing the tomato sequencing data from 12_2024

mkdir 12_2024_Sl/Raw_Data
cp /work/bnlab/Dec2024seq/S14* /scratch/jms53460/12_2024_Sl/Raw_Data
cp /work/bnlab/Dec2024seq/S26* /scratch/jms53460/12_2024_Sl/Raw_Data

scp sapelo2:/scratch/jms53460/12_2024_Sl/Raw_Data/*.fastq.gz 'D:\12_2024_Sl_Data'

cp /home/jms53460/CELSeq_barcodes.txt /scratch/jms53460/12_2024_Sl/
cp /home/jms53460/Sl_12.gff /scratch/jms53460/12_2024_Sl/
cp /home/jms53460/Sl_N-masked_genome* /scratch/jms53460/12_2024_Sl/
cp /home/jms53460/Sl_SNPs.tab /scratch/jms53460/12_2024_Sl/



#Demultiplex data in a way that it is nearly ready for upload with SRA.

#!/bin/bash
#SBATCH --job-name=Dm                                                     # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=6:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/Dm.out                      # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/Dm.err                       # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl/
mkdir Demultiplexed
ml Miniconda3/23.5.2-0
source activate /home/jms53460/Fastq-Multx

for file in Raw_Data/*_R1_*.gz; do
    filename=$(basename "$file")
    file2=$(echo "$filename" | sed 's/_R1.*//' | sed 's/_R2_001.fastq.gz//')

    if [ ! -f "Demultiplexed/""$file2""_1s.fastq.gz" ]; then
        module load fastp/0.23.2-GCC-11.3.0
	    fastp -w 6 -i "$file" -I "Raw_Data/""$file2""_R2_001.fastq.gz" -o "Demultiplexed/umi_""$file2""_R1.fastq.gz" -O "Demultiplexed/umi_""$file2""_R2.fastq.gz" -A -Q -L -G --umi --umi_loc read2 --umi_len 10 --umi_prefix UMI

	    fastq-multx -b -B "CELSeq_barcodes.txt" -m 0 "Demultiplexed/umi_""$file2""_R2.fastq.gz" "Demultiplexed/umi_""$file2""_R1.fastq.gz" "Raw_Data/""$file2""_R2_001.fastq.gz" -o "Demultiplexed/""$file2""_%_R2.fastq.gz" "Demultiplexed/""$file2""_%.fastq.gz" "Demultiplexed/""$file2""_%_umi.fastq.gz" # Split read 2 file by CELseq barcodes. Require perfect match to barcode in expected location

    fi
done
conda deactivate


#!/bin/bash
#SBATCH --job-name=Hisat2                                                 # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=6:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/Hs2.out                     # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/Hs2.err                      # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl

module load fastp/0.23.2-GCC-11.3.0
mkdir hisat2_out
for file in Demultiplexed/*s.fastq.gz; do
	file2="${file:14:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	fastp -w 6 -i "$file" -o "hisat2_out/""$file2"".fastq.gz" -y -x -3 -a AAAAAAAAAAAA

fi
done

ml HISAT2/3n-20201216-gompi-2022a
ml SAMtools/1.16.1-GCC-11.3.0
for file in hisat2_out/*s.fastq.gz
do
	file2="${file:11:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	hisat2 -p 6 --dta -x Sl_N-masked_genome_index -U "hisat2_out/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out/""$file2""_unsorted.bam" -o "hisat2_out/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out/""$file2""_s.bam"
	
fi
done


###Running SNPsplit

#!/bin/bash
#SBATCH --job-name=SNPsplit                                                      # Job name
#SBATCH --partition=batch                                                           # Partition (queue) name
#SBATCH --ntasks=1                                                                  # Single task job
#SBATCH --cpus-per-task=6                                                           # Number of cores per task
#SBATCH --mem=50gb                                                                  # Total memory for job
#SBATCH --time=6:00:00                                                              # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/SNPsplit.out                       # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/SNPsplit.err                        # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                                # Where to send mail
#SBATCH --mail-type=END,FAIL                                                        # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl
mkdir SNPsplit
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
for file in "hisat2_out/"*_s.bam
do
    file2="${file:11:-6}"

    SNPsplit --conflicting -o SNPsplit --snp_file Sl_SNPs.tab "$file"
    samtools sort -@ 6 SNPsplit/"$file2"_s.allele_flagged.bam -o SNPsplit/"$file2"_SNPsplit.bam
    
done

for file in "SNPsplit/"*_s.genome1.bam
do
    file2="${file:9:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit/"$file2"_SNPsplit_g1.bam
done

for file in "SNPsplit/"*_s.genome2.bam
do
    file2="${file:9:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit/"$file2"_SNPsplit_g2.bam
done


#!/bin/bash
#SBATCH --job-name=Features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=6:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/Features_UMIs.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/Features_UMIs.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl
mkdir featurecounts
mkdir bams
mkdir UMIcounts
mkdir UMIcounts_g1
mkdir UMIcounts_g2
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate /home/jms53460/subread-env

featureCounts -T 6 -s 1 -a Sl_12.gff -t 'gene' -g 'ID' -o featurecounts/read_counts.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a Sl_12.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g1.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a Sl_12.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g2.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts/"*SNPsplit.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g1.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g1/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g2.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g2/${file2}.tsv"
    fi
done


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('Sl_12.gff', sep = '\t', quote = "")[,9], ';')
annots = annots[grep('ID=gene-', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('ID=', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit.tsv', '', files)))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
D = B

files = dir('UMIcounts_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g1/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit_g1.tsv', '', files)))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g1 = B

files = dir('UMIcounts_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g2/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit_g2.tsv', '', files)))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g2 = B

genes = read.table('Sl_12.gff', sep = '\t', quote = "")[,c(1,5)]
annots2 = strsplit(read.table('Sl_12.gff', sep = '\t', quote = "")[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
annots2 = sub(';', '', sub(' ', '', unlist(lapply(annots2, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))
genes[,3] = annots2
genes2 = genes[grepl('ID=gene-', genes[,3]),]
genes = genes2[order(genes2[,2]),] #order by position
genes = genes[order(genes[,1]),] #order by chr
genes = genes[!duplicated(genes[,3]),]
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]

D = D[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]

save(D,g1,g2,genes, file = "12_2024_Sl.RData")
q()



###Copying this to my local computer
scp sapelo2:/scratch/jms53460/12_2024_Sl/12_2024_Sl.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'

###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('12_2024_Sl.RData')

summary(colSums(D))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#   1201    3070    3998   19824    6302  374652

plotScaleBar = ggplot() + scale_x_continuous(expand=c(0,0), limits = c(-10, max(genes[,2])/10^6 + 10), breaks = seq(0,300,50)) + theme(panel.background = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.line.x=element_line(), plot.margin = margin(0,0,0,0,'cm')) + xlab('Chromosome position (Mb)')
plotChr2 = function (cell, chr = 1, pad = 3) 
{
    Cdat = data.frame(f_col0 = AlleleFrac[, cell], Chr = floor(as.numeric(rownames(AlleleFrac))/10^6), 
        Position = (as.numeric(rownames(AlleleFrac))%%10^6) + 
            0.5)
    Cdat = Cdat[Cdat$Chr == chr, ]
    ggplot(Cdat) + geom_rect(data = data.frame(xmin = -10, xmax = max(genes[,2])/10^6 + 10, 
        ymin = 0, ymax = 1), aes(xmin = xmin, xmax = xmax, 
        ymin = ymin, ymax = ymax), fill = "#EEEEEE") + geom_point(aes(y = f_col0, 
        x = Position), cex = 3) + geom_hline(yintercept = 0.5, 
        linetype = "dashed") + theme(panel.background = element_blank(), 
        axis.title = element_blank(), panel.border = element_blank(), 
        panel.grid = element_blank(), axis.ticks.x = element_blank(), 
        axis.text.x = element_blank()) + scale_y_continuous(breaks = seq(0, 
        1, 0.25), labels = c("0%", "", "50%", "", "100%"), limits = c(-0.4, 
        1.05)) + scale_x_continuous(expand = c(0, 0)) + annotate("segment", 
        x = -pad, xend = -pad, y = 0, yend = 1) + theme(plot.margin = margin(0, 
        0, 0.15, 0, "cm"))
}


plotCell2 = function (cell) 
{
    annotate_figure(ggarrange(plotChr2(cell, chr = 1), plotChr2(cell, 
        chr = 2), plotChr2(cell, chr = 3), plotChr2(cell, chr = 4), 
        plotChr2(cell, chr = 5), plotChr2(cell, chr = 6), plotChr2(cell, chr = 7), plotChr2(cell, chr = 8), 
        plotChr2(cell, chr = 9), plotChr2(cell, chr = 10), plotChr2(cell, chr = 11), plotChr2(cell, chr = 12),
        plotScaleBar, ncol = 1, nrow = 13, 
        align = "v", heights = c(rep(1, 12), 0.4)), left = text_grob("          % Transcripts from lycopersicum allele", 
        rot = 90, size = 10), top = cell)
}


BIN2 = function (xx, bin = 10^6) 
{
    bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1)))
    colnames(out2) = colnames(g1)
    rownames(out2) = names(out)
    return(out2)
}

genes[,1] = sub('chr', '', genes[, 1])

library(ggplot2)
library(ggpubr)
g1_bin = BIN2(g1)
g2_bin = BIN2(g2)
g1_frac = g1_bin/(g1_bin + g2_bin)
AlleleFrac = g1_frac
AlleleFrac[(g1_bin+g2_bin) < 10] = NA #remove bins with <10 genoinformative transcripts
#AlleleFrac2 = AlleleFrac[,which(colSums(is.na(AlleleFrac)) <= 50)]
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 10000)] ###66/168 (24/192 were no cell controls) pass >= 5000, 31/168 pass >= 10000

g1_gene_frac = g1/(g1+g2)
AlleleFrac = g1_gene_frac
AlleleFrac[(g1+g2) < 3] = NA #remove genes with <5 genoinformative transcripts
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 10000)] ###66/168 (24/192 were no cell controls) pass >= 5000, 31/168 pass >= 10000
plotAlleles('S14-25_10s')


plotChr2 = function (cell, chr = 1, pad = 3) 
{
    Cdat = data.frame(f_col0 = AlleleFrac[, cell], Chr = genes[,1], 
        Position = genes[,2]/10^6)
    Cdat = Cdat[Cdat$Chr == chr, ]
    ggplot(Cdat) + geom_rect(data = data.frame(xmin = -10, xmax = max(genes[,2])/10^6 + 10, 
        ymin = 0, ymax = 1), aes(xmin = xmin, xmax = xmax, 
        ymin = ymin, ymax = ymax), fill = "#EEEEEE") + geom_point(aes(y = f_col0, 
        x = Position), cex = 3) + geom_hline(yintercept = 0.5, 
        linetype = "dashed") + theme(panel.background = element_blank(), 
        axis.title = element_blank(), panel.border = element_blank(), 
        panel.grid = element_blank(), axis.ticks.x = element_blank(), 
        axis.text.x = element_blank()) + scale_y_continuous(breaks = seq(0, 
        1, 0.25), labels = c("0%", "", "50%", "", "100%"), limits = c(-0.4, 
        1.05)) + scale_x_continuous(expand = c(0, 0)) + annotate("segment", 
        x = -pad, xend = -pad, y = 0, yend = 1) + theme(plot.margin = margin(0, 
        0, 0.15, 0, "cm"))
}

plotCell3 = function (cell) 
{
    annotate_figure(ggarrange(plotChr2(cell, chr = 1), plotChr2(cell, 
        chr = 2), plotChr2(cell, chr = 3), plotChr2(cell, chr = 4), 
        plotChr2(cell, chr = 5), plotChr2(cell, chr = 6), plotChr2(cell, 
            chr = 7), plotChr2(cell, chr = 8), plotChr2(cell, chr = 9), 
        plotChr2(cell, chr = 10), plotChr2(cell, chr = 11), plotChr2(cell, 
            chr = 12), plotScaleBar, ncol = 1, nrow = 13, align = "v", 
        heights = c(rep(1, 12), 0.4)), left = text_grob("          % Transcripts from lycopersicum allele", 
        rot = 90, size = 10), top = cell)
}

plotCell3('S14-25_10s')

summary(colSums(D > 5))
> summary(colSums(D > 5))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#  31.00   83.75  109.00  375.85  173.50 4832.00

library('ComplexHeatmap')

FracMono = 100*colMeans(abs(AlleleFrac2 - .5) >= .3, na.rm=T)

D_subset = D[, which(colSums(D) >= 10000)]
summary(colSums(D_subset))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#  10052   17490   35418  102220  183549  374652

D_subset2 = D[,which(colSums(D >= 10) >= 100)]
summary(colSums(D_subset2))
AlleleFrac3 = AlleleFrac[,colnames(D_subset2)] ###47/168 


Heatmap(AlleleFrac2, cluster_rows=F, cluster_columns=F, use_raster=F, name = 'AlleleFrac2', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Heatmap(AlleleFrac3, cluster_rows=F, cluster_columns=F, use_raster=F, name = 'AlleleFrac2', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
FracMono2 = 100*colMeans(abs(AlleleFrac3 - .5) >= .3, na.rm=T)


Heatmap(cor(D_subset, use = 'pairwise.complete.obs', method = 'pearson'), name = 'UMI_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Heatmap(cor(D, use = 'pairwise.complete.obs', method = 'pearson'), name = 'UMI_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))


cd /scratch/jms53460/12_2024_Sl
cp /home/jms53460/Sl_N-masked_genome2* .
cp /home/jms53460/Sl_14.gff .


#!/bin/bash
#SBATCH --job-name=Hisat2                                                 # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=70gb                                                        # Total memory for job
#SBATCH --time=12:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/Hs2.out                     # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/Hs2.err                      # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl

#module load fastp/0.23.2-GCC-11.3.0
mkdir hisat2_out2
cp hisat2_out/*fastq.gz hisat2_out2
cp /scratch/jms53460/12_18_2024_Sl/hisat2_out/*fastq.gz hisat2_out2
#for file in Demultiplexed/*s.fastq.gz; do
#	file2="${file:14:-9}"

#if [ ! -f "hisat2_out/""$file2"".bam" ]; then

#	fastp -w 6 -i "$file" -o "hisat2_out/""$file2"".fastq.gz" -y -x -3 -a AAAAAAAAAAAA

#fi
#done

ml HISAT2/3n-20201216-gompi-2022a
ml SAMtools/1.16.1-GCC-11.3.0
for file in hisat2_out2/*s.fastq.gz
do
	file2="${file:12:-9}"

if [ ! -f "hisat2_out2/""$file2"".bam" ]; then

	hisat2 -p 6 --dta -x Sl_N-masked_genome2_index -U "hisat2_out2/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out2/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out2/""$file2""_unsorted.bam" -o "hisat2_out2/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out2/""$file2""_s.bam"
	
fi
done


###Running SNPsplit

#!/bin/bash
#SBATCH --job-name=SNPsplit                                                      # Job name
#SBATCH --partition=batch                                                           # Partition (queue) name
#SBATCH --ntasks=1                                                                  # Single task job
#SBATCH --cpus-per-task=6                                                           # Number of cores per task
#SBATCH --mem=70gb                                                                  # Total memory for job
#SBATCH --time=24:00:00                                                              # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/SNPsplit.out                       # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/SNPsplit.err                        # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                                # Where to send mail
#SBATCH --mail-type=END,FAIL                                                        # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl
mkdir SNPsplit2
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
for file in "hisat2_out2/"*_s.bam
do
    file2="${file:12:-6}"

    SNPsplit --conflicting -o SNPsplit2 --snp_file Sl_SNPs.tab "$file"
    samtools sort -@ 6 SNPsplit2/"$file2"_s.allele_flagged.bam -o SNPsplit2/"$file2"_SNPsplit.bam
    
done

for file in "SNPsplit2/"*_s.genome1.bam
do
    file2="${file:10:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit2/"$file2"_SNPsplit_g1.bam
done

for file in "SNPsplit2/"*_s.genome2.bam
do
    file2="${file:10:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit2/"$file2"_SNPsplit_g2.bam
done

mkdir featurecounts2
mkdir bams2
mkdir UMIcounts2
mkdir UMIcounts2_g1
mkdir UMIcounts2_g2
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate /home/jms53460/subread-env

featureCounts -T 6 -s 1 -a Sl_14.gff -t 'gene' -g 'ID' -o featurecounts2/read_counts.tab --readExtension5 500 -R BAM SNPsplit2/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a Sl_14.gff -t 'gene' -g 'ID' -o featurecounts2/read_counts_g1.tab --readExtension5 500 -R BAM SNPsplit2/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a Sl_14.gff -t 'gene' -g 'ID' -o featurecounts2/read_counts_g2.tab --readExtension5 500 -R BAM SNPsplit2/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts2/"*SNPsplit.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts2/${file2}.tsv"
    fi
done

for file in "featurecounts2/"*g1.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts2_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts2_g1/${file2}.tsv"
    fi
done

for file in "featurecounts2/"*g2.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts2_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts2_g2/${file2}.tsv"
    fi
done


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('Sl_14.gff', sep = '\t', quote = "")[,9], ';')
annots = annots[grep('ID=gene-', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('ID=', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts2/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit.tsv', '', files)))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
D = B

files = dir('UMIcounts2_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts2_g1/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit_g1.tsv', '', files)))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g1 = B

files = dir('UMIcounts2_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts2_g2/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit_g2.tsv', '', files)))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g2 = B

genes = read.table('Sl_14.gff', sep = '\t', quote = "")[,c(1,5)]
annots2 = strsplit(read.table('Sl_14.gff', sep = '\t', quote = "")[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
annots2 = sub(';', '', sub(' ', '', unlist(lapply(annots2, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))
genes[,3] = annots2
genes2 = genes[grepl('ID=gene-', genes[,3]),]
genes = genes2[order(genes2[,2]),] #order by position
genes = genes[order(genes[,1]),] #order by chr
genes = genes[!duplicated(genes[,3]),]
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]

D = D[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]

save(D,g1,g2,genes, file = "12_2024_Sl_2.RData")
q()



###Copying this to my local computer
scp sapelo2:/scratch/jms53460/12_2024_Sl/12_2024_Sl_2.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'

###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('12_2024_Sl_2.RData')

setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')

load('11_2024_Sl_2.RData')
D_11_2024_2 = D
g1_11_2024_2 = g1
g2_11_2024_2 = g2

load('12_2024_Sl_2.RData')
M_2 = D[,1:32]
M_g1_2 = g1[,1:32]
M_g2_2 = g2[,1:32]
D_12_2024_2 = D[,33:752]
g1_12_2024_2 = g1[,33:752]
g2_12_2024_2 = g2[,33:752]
D = cbind(D_11_2024_2,D_12_2024_2)
g1 = cbind(g1_11_2024_2,g1_12_2024_2)
g2 = cbind(g2_11_2024_2,g2_12_2024_2)

genes[,1] = sub('chr', '', genes[, 1])


library(readxl)
Sl_Stages <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Sl_Stages.xlsx")
library(tidyverse)
Sl_Stages = arrange(Sl_Stages, Bud_order)

#Sl_meta <- Sl_meta[rep(row.names(Sl_meta), times = 8), ]
#Sl_meta = arrange(Sl_meta, Bud_order)
#Sl_meta$Sample = c(paste(rep('S1-8_', times = 32), 1:32, rep('s', times=32), sep=''), paste(rep('S14-25_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S26-37_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S62-73_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S74-79_', times = 48), 1:48, rep('s', times=48), sep=''), paste(rep('S80-91_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S92-103_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S104-115_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S116-127_', times = 96), 1:96, rep('s', times=96), sep=''))
#write.csv(Sl_meta, "Sl_meta.csv")

Sl_meta <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Sl_meta.xlsx")
rownames(Sl_meta) = Sl_meta$Sample

stages = as.character(Sl_meta$Stage)
stages = factor(stages, levels = c('tetrad','UM', 'UM/BM', 'BM'))

Sl_meta_stageblind = Sl_meta[,c(1:7,9:12)]
No_cell = Sl_meta_stageblind$Sample[which(Sl_meta_stageblind$No_cell_well == 'Y')]
summary(colSums(D[,No_cell]))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#    162    1333    2268    3325    3959   20942  ##w/o mito and chloro
summary(colSums(D[,No_cell]))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    169    1380    2340    3470    4079   22280  ##w/ mito and chloro

D = D[,Sl_meta_stageblind$Sample]
g1 = g1[,Sl_meta_stageblind$Sample]
g2 = g2[,Sl_meta_stageblind$Sample]

D_Sl = D
g1_Sl = g1
g2_Sl = g2

#UMI counts assigned to mitochondria and chloroplast genes for each sample or no cell control
summary(colSums(D[41263:41476,]))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    0.0    39.0    85.0   287.0   226.2  6150.0

#Ratio of UMIs assigned to mito and chloro genes / total UMIs for each sample or no cell control
summary(colSums(D[41263:41476,])/colSums(D))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01979 0.03811 0.04355 0.06509 0.14575

#Ratio of UMIs assigned to mito and chloro genes / total UMIs for no cell controls
summary(colSums(D[41263:41476,No_cell])/colSums(D[,No_cell]))
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
0.001242 0.024981 0.043441 0.048550 0.067588 0.132983

#Ratio of UMIs assigned to mito and chloro genes / total UMIs for each sample (NOT including no cell controls)
summary(colSums(D[41263:41476,-which(colnames(D) %in% No_cell)])/colSums(D[,-which(colnames(D) %in% No_cell)]))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01942 0.03768 0.04287 0.06470 0.14575

D_subset = D[, which(colSums(D) >= 10000)]
D_subset2 = D_subset[, -which(colnames(D_subset) %in% No_cell)]

options(scipen=999)
summary(colSums(D_subset2[41263:41476,])/colSums(D_subset2))


check how many features and how much mapping to S92-103_14s, 10, 48, 9, and S74-79_4s in chloroplasts and mitochondria
assigned to features vs intergenic (unassigned no features)
S74-79_4s: 235435 intergenic,   55761 genic,    13645 UMIs,     0.24 genic/inter (no cell)
S92-103_9s: 63752 intergenic,   92580 genic,    20942 UMIs,     1.45 genic/inter (no cell)
S92-103_10s: 25933 intergenic,  90731 genic,    15511 UMIs,     3.50 genic/inter (doesn't correlate w/ no cell)
S92-103_14s: 49105 intergenic,  147682 genic,   25764, UMIs,    3.01 genic/inter (doesn't correlate w/ no cell)
S92-103_48s: 86753 intergenic,  58381 genic,    20362 UMIs,     0.67 genic/inter (correlates w/ no cell)
S14-25_10s: 324600 intergenic,  3111174 genic,  374652 UMIs,    9.58 genic/inter
S14-25_11s: 1646 intergenic,    7173 genic,     4223 UMIs,      4.36 genic/inter
S14-25_12s: 11212 intergenic,   104200 genic,   17158 UMIs,     9.29 genic/inter
S14-25_13s: 1516 intergenic,    8410 genic,     3696 UMIs,      5.55 genic/inter
S14-25_14s: 2301 intergenic,    15263 genic,    5336 UMIs,      6.63 genic/inter
S14-25_15s: 2456 intergenic,    12572 genic,    4561 UMIs,      5.12 genic/inter (no cell)


bottom of unassigned no feature for 12_18_2024_Sl
11190   2437    605     1895    5706#S74-79_9s    5931    2710    815     1204    1442    676     784     21610   4746    24186   17234   921     1477    7115    3511    7251    2311    6233    4800    20504   10144   18509   8808    14877   23304   6358    4226    6610    7727    7244    5177    4781    33474   16339   2332    1417    1355    1129    2805    1616    1178   
    1250    1219    11284   80901   1537    962     1790    648     624     1509    140734  136009  408     12530   1851   
    153863  718     1455    12201   3590    4692    3131    1241    4896    7366    2818    1176    1282    2189    2737   
    4842    2103    4927    5159    904     2438    1263    4555    7102    6618    7977    3568    2425    5033    1657   
    2774    19002   4093    2638    4476    1607    1218    3093    9724    732     25933#10   44372   21547   18787   49105#14  
   9633    34984   3465    23560   1237    15369   28573   3572    18313   9091    1737    156395  5602    7326    4301    16226   63706   3123    2420    31905   17034   2657    2875    2671    2290    1694    90121   6270    4772    3649    7641    5073    1117    2392    1951    4695    86753#48   1272    6645    1036    6698    1647    983     771     2186    3831  
    1979    15865   18222   25039   3739    703     11553   2642    1367    9645    16369   34894   9254    25209   13806  
   14062   22111   11691   3202    13448   11618   10057   16619   13460   7881    2998    21315   3746    3976    2359    7997    5211    2562    1507    7669    9617    4444    3665    4711    4916    5156    14536   6186    2594    63752

11
Assigned        8014    162     712     1477    1500    678     658     267     91      1202    168     339     601     1194    1994    1219    19      1713    658915  450     872     6742    562629  1241    421902  164     49240   8563    7522  
    92963   1899    566

12
Assigned        3111174 7173    104200  8410    15263   12572   4483    23762   2211341 8964    35729   11098   7938    8426    10596   6339    2250444 229892  195670  5036    5942    9058    5787    5502    9226    5314    3841    5756    6972    5286    3438    2471    3713    7925    16563   3568    7342    1681    5499    4547    2571    3424    4110    6209    4089    7728    1860    4899    4701    6783    4160    8018    9100    15347   12974   14328   11462  
   12135   20288   45198   11192   6291    7510    4805    5677    1162893 6332    8286    13508   3809    9180    6397    7874    8905    6711    10091   6511    15889   9153    10911   9155    13912   11691   5780    5798    8108    15410   3897    10940   25670   19344   18124   27672   10030   8412    37887  
   5848    5447    2101    5198    3327    2362    1790    176368  6296    6072    2390    3419    63770   5178    103873  3706    2396    282442  701639  698451  19329   5371    4346    4993    3265    505678  5234    5140    2204    16124   16750   28447   2335    4216    1224050 795560  8152    6154    5977   
    2463    5150    2194    2495    6146    4679    3481    3879    3878    6607    3322    4906    21200   33445   29117   8811    31791   20929   23640   10389   31717   2969    3732    3379    3830    4513    4621    7321    5635    4697    5863    10762   3093    5104    4734    5340    5046    4310    96212 
   6721    5722    5993    68303   5574    544392  5956    359793  4964    2962    871404  88739   10145   4561    4239    4518    53598   8717

12_18
Assigned        44544   12400   1131    3714    2036    57718   10796   27822   49460   39885   88177   24763   146860  68235   39734   55386   1632    52656   34287   21581   36777   1146    32648   34661   1318    10342   70218   55526   47239 
   48440   875     21377   845085  5032    1545    1460    971     656     760     583663  1281    11156   4374    1829    3423    30556   2728    6582    54555   3291    3426    1107    3947    1636    1159    1123    7369    3730    1671    2508    1837    4057    48010   1764    571118  10215   16262   8900    9459    2818    1824    9777    2881    27411   1524  
    1623    833     2771    1194    1119    1708    8937    5277    12622   9642    9132    3582    19753   1530    6465   
    4553    5971    6784    6438    2673    2410    12975   4596    23665   1383    10169   27351   6472    5196    2989   
    2725    6243    3517    1934    5183    12274   17397   106391  5243    7082    263102  4728    4949    29365   789369 
  11524   11216   2910    67549   3158    1107    1030    1192    3555    3433    1246    1507    4781    789     827     491     957     1749    1873    1458    981     1045    1021    1195    1167    2596    1653    1667    719     270     3327    3930    1837    1654    683     1486    1666    905     982     887     338544  1371    10237   3548    2387    1495   
    1111    5900    1564    1089    2532    204106  2405    3020    1397    318971  185502  3635    1129    1887    1854   
    2618    508134  1745    636632  2998    220303  21027   1421    1830    2141    2008    141067  1121    5016    2994
3034    2877    3948    3459    6835    15461   332610  10973   262425  1331    2544    6085    20382   5498    2133   
    1055180 6137    2476    1705    284972  2075    2472    4102    2727    2633    2338    1358    9364    18406   7079   
    752     7315    15402   15124   627     1455    220765  394460  85110   57583   1316    3314    2038    2392    3782   
    1605    1295    1897    1287    1349    1603    1352    9829    4898    1090    38437   1897    21632   9614    1617   
    314799  1165    30806   2868    17230   5683    8859    4931    3710    3249    1412    957258  2031    5327    1953   
    2391    8073    1762    3668    39262   2019    2733    1339    2498    951     1780    6376    2077    2402    3150   
    6163    1813    25162   172703  10233   4454    3473    6787    22540   3532    12434   3574    7283    12309   2377   
    6641    1598    2803    453021  3365    136183  2825    14567   59599   3648    1514    76039   170750  87544   2428   
    12226   1721    3169    5268    654     900     6523    6021    2546    1371    783     467572  3157    777280  4772   
    868     6327    10376   1525    1011    4581    2947    2358    39      1424    2894    11268   1165    3723    1162   
    709     805     713     74888   1115    856     11119   859     1223    1550    2091    777     1695    164927  1337   
    4984    55761#S74-79_4s   5628    2981    850     3024    3360    21370   7784    2644    4329    3411    2156    2099    26873
9771    34780   89238   1379    3557    12869   7273    14768   3476    9363    8416    26336   16757   56956   11538   14094   17965   4520    4322    8583    12662   13661   6419    5762    80975   22114   3756    2127    2642    2953    3587    3381    3142    3577    2845    20440   137813  4140    2493    4474    2177    1805    3193    1387165 1127387 1591  
    11906   3153    1360462 2044    2837    16666   4538    6136    4773    2522    6339    16007   6319    4367    3834   
    2434    3600    5912    3538    6286    7319    4072    6080    1842    8107    9631    8578    9655    4650    4212   
    10664   2888    6874    86408   10292   5688    4448    5101    3354    5422    11627   3238    90731#10   128542  39763  
   53891   147682#14  14718   41463   1770    172555  1891    19798   180430  5377    140118  15205   2559    568701  6310    10698   7284    21459   106605  4113    2678    25213   15407   5370    5729    4564    3879    3340    435488  7889    4790    4099    6002    5768    2773    2429    2092    2649    58381#48   1460    15420   1330    5943    2183    1353    1014  
    2351    4691    2392    17874   15633   30699   5728    1115    14463   3391    2067    14795   42696   53702   23784  
   54086   19751   23372   59674   7503    3578    14974   16603   12362   19264   18512   8796    7761    16819   5490    6285    2960    10298   5360    2798    2423    3969    7243    5735    5164    6634    6930    5285    11311   4190    1979    92580


###Produce table with all the matching spike-ins in demultiplexed files.
cd /scratch/jms53460/11_2024_Sl
cp /home/jms53460/96spike_in_barcodes.txt .
mkdir spike_ins
for file in "Demultiplexed/"*s.fastq*
do
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | grep -F -f /scratch/jms53460/11_2024_Sl/96spike_in_barcodes.txt | sort | uniq -c | sort -nr | head -n 96 > spike_ins/"${file:14:-9}".txt
done

mkdir spike_ins2
for file in spike_ins/*s.txt
do
    awk '{print $1,$2}' $file OFS="" > spike_ins2/${file:10:-4}.tsv
done

#did this in 11_2024_Sl, 12_2024_Sl, and 12_18_2024_Sl
cd /scratch/jms53460/12_2024_Sl
cp /scratch/jms53460/11_2024_Sl/spike_ins2/* spike_ins2
cp /scratch/jms53460/12_18_2024_Sl/spike_ins2/* spike_ins2


ml R/4.3.1-foss-2022a
R
spike_in_list = read.delim('96spike_in_barcodes.txt', header=F)
spike_in_list = spike_in_list[c(1:96),]
names(spike_in_list) = unlist(lapply(spike_in_list, function(xx) { xx[1] }))
files = dir('spike_ins2')
A = matrix(NA, nrow = length(spike_in_list), ncol = length(files))
rownames(A) = names(spike_in_list)
colnames(A) = files
for (f in files) {
    xx = read.table(paste('spike_ins2/', f, sep = ''), sep = '', header = F, row.names = 2)
    A[,f] = xx[match(names(spike_in_list),rownames(xx)),1]
}

#for loop will not run, says no lines available in input. I think one or more tsv files is empty. Now I check
for (f in files) {
    print(f)
    print(head(read.table(paste('spike_ins2/', f, sep = ''), sep = '', header = F, row.names = 2)))
}
#I hit the error on "S1-8_A267-277_S3_L002_25s.tsv". I'll remove that file from the directory and retry
q()
rm 

R
spike_in_list = read.delim('96spike_in_barcodes.txt', header=F)
spike_in_list = spike_in_list[c(1:96),]
names(spike_in_list) = unlist(lapply(spike_in_list, function(xx) { xx[1] }))
files = dir('spike_ins2')
A = matrix(NA, nrow = length(spike_in_list), ncol = length(files))
rownames(A) = names(spike_in_list)
colnames(A) = files
for (f in files) {
    xx = read.table(paste('spike_ins2/', f, sep = ''), sep = '', header = F, row.names = 2)
    A[,f] = xx[match(names(spike_in_list),rownames(xx)),1]
}
A[is.na(A)] = 0
colnames(A) = sub('A267-277_S3_L002_', '', sub('S190_L007_', '', sub('S189_L007_', '', sub('.tsv', '', files))))
Spike_ins_Sl_M = A[,1:32]
Spike_ins_Sl = A[,33:783]
S1_8_25s = rep(0, 96)
Spike_ins_Sl = cbind(Spike_ins_Sl[,1:16], S1_8_25s, Spike_ins_Sl[,17:751])
colnames(Spike_ins_Sl) = sub('S1_8_25s', 'S1-8_25s', colnames(Spike_ins_Sl))
save(Spike_ins_Sl, Spike_ins_Sl_M, file = '11-12_2024_Sl_Spike_ins.RData')
q()

###Copying this to my local computer
scp sapelo2:/scratch/jms53460/12_2024_Sl/11-12_2024_Sl_Spike_ins.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'


###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('11-12_2024_Sl_Spike_ins.RData')

Spike_ins_Sl = Spike_ins_Sl[,Sl_meta_stageblind$Sample]

Barcode = as.numeric(gsub("s","", gsub(".*_","", colnames(Spike_ins_Sl))))

Spike_ins_Sl_frac = Spike_ins_Sl
for (x in 1:length(colnames(Spike_ins_Sl))) {
    for (z in 1:96){
        Spike_ins_Sl_frac[z,x] = Spike_ins_Sl[z,x]/sum(Spike_ins_Sl[,x])
    }
}

Spike_ins_Sl_frac_correct = Spike_ins_Sl[1,]
for (x in 1:length(colnames(Spike_ins_Sl))) {
    Spike_ins_Sl_frac_correct[x] = Spike_ins_Sl_frac[Barcode[x],x]
}

library('ComplexHeatmap')
Heatmap(Spike_ins_Sl, cluster_rows=F, cluster_columns=F)

Sl_qc = t(data.frame(Spike_in_frac_correct = Spike_ins_Sl_frac_correct, Spike_ins_total = colSums(Spike_ins_Sl), Genic_chr_UMIs = colSums(D_Sl[1:41262,]), Genic_M_C_UMIs = colSums(D_Sl[41263:41476,])))
plot(Sl_qc['Spike_in_frac_correct',], Sl_qc['Spike_ins_total',])
plot(Sl_qc['Spike_in_frac_correct',], Sl_qc['Genic_chr_UMIs',])


#!/bin/bash
#SBATCH --job-name=Features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=150gb                                                            # Total memory for job
#SBATCH --time=24:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/Features_UMIs.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/Features_UMIs.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl
mkdir UMIcounts3
module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4

for file in "featurecounts2/"*SNPsplit.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts3/${file2}.tsv" ]; then

        umi_tools count --per-contig -I "bams2/$file2" -S "UMIcounts3/${file2}.tsv"
    
    fi
done


mv featurecounts2/S6* featurecounts3
mv featurecounts2/S7* featurecounts3
mv featurecounts2/S8* featurecounts3
mv featurecounts2/S9* featurecounts3


 #!/bin/bash
#SBATCH --job-name=Features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=1                                                     # Number of cores per task
#SBATCH --mem=150gb                                                            # Total memory for job
#SBATCH --time=24:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/Features_UMIs.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/Features_UMIs.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl
mkdir UMIcounts3
module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4

for file in "featurecounts3/"*SNPsplit.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts3/${file2}.tsv" ]; then

        umi_tools count --per-contig -I "bams2/$file2" -S "UMIcounts3/${file2}.tsv"
    
    fi
done

umi_tools count --per-contig -I "bams2/S80-91_50s_SNPsplit" -S "UMIcounts3/S80-91_50s_SNPsplit.tsv"


cp /scratch/jms53460/11_2024_Sl/UMIcounts3/* UMIcounts3
"S14-25_10s" "S26-37_41s"
ml R/4.3.1-foss-2022a
R
files = dir('UMIcounts3')
A = matrix(NA, nrow = 14, ncol = length(files))
rownames(A) = c('chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chrM', 'chrC')
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts3/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(rownames(A),rownames(xx)),1]
}
colnames(A) = sub('A267-277_S3_L002_', '', sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit.tsv', '', files))))
A[is.na(A)] = 0
Sl_total_UMIs = A

save(Sl_total_UMIs, file = "Sl_total_UMIs.RData")
q()



###Copying this to my local computer
scp sapelo2:/scratch/jms53460/12_2024_Sl/Sl_total_UMIs.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'

###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')

load('Sl_total_UMIs.RData')

