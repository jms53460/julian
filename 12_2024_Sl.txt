###Processing and analyzing the tomato sequencing data from 12_2024

mkdir 12_2024_Sl/Raw_Data
cp /work/bnlab/Dec2024seq/S14* /scratch/jms53460/12_2024_Sl/Raw_Data
cp /work/bnlab/Dec2024seq/S26* /scratch/jms53460/12_2024_Sl/Raw_Data

scp sapelo2:/scratch/jms53460/12_2024_Sl/Raw_Data/*.fastq.gz 'D:\12_2024_Sl_Data'

cp /home/jms53460/CELSeq_barcodes.txt /scratch/jms53460/12_2024_Sl/
cp /home/jms53460/Sl_12.gff /scratch/jms53460/12_2024_Sl/
cp /home/jms53460/Sl_N-masked_genome* /scratch/jms53460/12_2024_Sl/
cp /home/jms53460/Sl_SNPs.tab /scratch/jms53460/12_2024_Sl/



#Demultiplex data in a way that it is nearly ready for upload with SRA.

#!/bin/bash
#SBATCH --job-name=Dm                                                     # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=6:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/Dm.out                      # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/Dm.err                       # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl/
mkdir Demultiplexed
ml Miniconda3/23.5.2-0
source activate /home/jms53460/Fastq-Multx

for file in Raw_Data/*_R1_*.gz; do
    filename=$(basename "$file")
    file2=$(echo "$filename" | sed 's/_R1.*//' | sed 's/_R2_001.fastq.gz//')

    if [ ! -f "Demultiplexed/""$file2""_1s.fastq.gz" ]; then
        module load fastp/0.23.2-GCC-11.3.0
	    fastp -w 6 -i "$file" -I "Raw_Data/""$file2""_R2_001.fastq.gz" -o "Demultiplexed/umi_""$file2""_R1.fastq.gz" -O "Demultiplexed/umi_""$file2""_R2.fastq.gz" -A -Q -L -G --umi --umi_loc read2 --umi_len 10 --umi_prefix UMI

	    fastq-multx -b -B "CELSeq_barcodes.txt" -m 0 "Demultiplexed/umi_""$file2""_R2.fastq.gz" "Demultiplexed/umi_""$file2""_R1.fastq.gz" "Raw_Data/""$file2""_R2_001.fastq.gz" -o "Demultiplexed/""$file2""_%_R2.fastq.gz" "Demultiplexed/""$file2""_%.fastq.gz" "Demultiplexed/""$file2""_%_umi.fastq.gz" # Split read 2 file by CELseq barcodes. Require perfect match to barcode in expected location

    fi
done
conda deactivate


#!/bin/bash
#SBATCH --job-name=Hisat2                                                 # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=6:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/Hs2.out                     # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/Hs2.err                      # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl

module load fastp/0.23.2-GCC-11.3.0
mkdir hisat2_out
for file in Demultiplexed/*s.fastq.gz; do
	file2="${file:14:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	fastp -w 6 -i "$file" -o "hisat2_out/""$file2"".fastq.gz" -y -x -3 -a AAAAAAAAAAAA

fi
done

ml HISAT2/3n-20201216-gompi-2022a
ml SAMtools/1.16.1-GCC-11.3.0
for file in hisat2_out/*s.fastq.gz
do
	file2="${file:11:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	hisat2 -p 6 --dta -x Sl_N-masked_genome_index -U "hisat2_out/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out/""$file2""_unsorted.bam" -o "hisat2_out/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out/""$file2""_s.bam"
	
fi
done


###Running SNPsplit

#!/bin/bash
#SBATCH --job-name=SNPsplit                                                      # Job name
#SBATCH --partition=batch                                                           # Partition (queue) name
#SBATCH --ntasks=1                                                                  # Single task job
#SBATCH --cpus-per-task=6                                                           # Number of cores per task
#SBATCH --mem=50gb                                                                  # Total memory for job
#SBATCH --time=6:00:00                                                              # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/SNPsplit.out                       # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/SNPsplit.err                        # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                                # Where to send mail
#SBATCH --mail-type=END,FAIL                                                        # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl
mkdir SNPsplit
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
for file in "hisat2_out/"*_s.bam
do
    file2="${file:11:-6}"

    SNPsplit --conflicting -o SNPsplit --snp_file Sl_SNPs.tab "$file"
    samtools sort -@ 6 SNPsplit/"$file2"_s.allele_flagged.bam -o SNPsplit/"$file2"_SNPsplit.bam
    
done

for file in "SNPsplit/"*_s.genome1.bam
do
    file2="${file:9:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit/"$file2"_SNPsplit_g1.bam
done

for file in "SNPsplit/"*_s.genome2.bam
do
    file2="${file:9:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit/"$file2"_SNPsplit_g2.bam
done


#!/bin/bash
#SBATCH --job-name=Features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=6:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/Features_UMIs.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/Features_UMIs.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl
mkdir featurecounts
mkdir bams
mkdir UMIcounts
mkdir UMIcounts_g1
mkdir UMIcounts_g2
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate /home/jms53460/subread-env

featureCounts -T 6 -s 1 -a Sl_12.gff -t 'gene' -g 'ID' -o featurecounts/read_counts.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a Sl_12.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g1.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a Sl_12.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g2.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts/"*SNPsplit.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g1.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g1/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g2.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g2/${file2}.tsv"
    fi
done


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('Sl_12.gff', sep = '\t', quote = "")[,9], ';')
annots = annots[grep('ID=gene-', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('ID=', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit.tsv', '', files)))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
D = B

files = dir('UMIcounts_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g1/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit_g1.tsv', '', files)))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g1 = B

files = dir('UMIcounts_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g2/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit_g2.tsv', '', files)))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g2 = B

genes = read.table('Sl_12.gff', sep = '\t', quote = "")[,c(1,5)]
annots2 = strsplit(read.table('Sl_12.gff', sep = '\t', quote = "")[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
annots2 = sub(';', '', sub(' ', '', unlist(lapply(annots2, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))
genes[,3] = annots2
genes2 = genes[grepl('ID=gene-', genes[,3]),]
genes = genes2[order(genes2[,2]),] #order by position
genes = genes[order(genes[,1]),] #order by chr
genes = genes[!duplicated(genes[,3]),]
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]

D = D[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]

save(D,g1,g2,genes, file = "12_2024_Sl.RData")
q()



###Copying this to my local computer
scp sapelo2:/scratch/jms53460/12_2024_Sl/12_2024_Sl.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'

###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('12_2024_Sl.RData')

summary(colSums(D))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#   1201    3070    3998   19824    6302  374652

plotScaleBar = ggplot() + scale_x_continuous(expand=c(0,0), limits = c(-10, max(genes[,2])/10^6 + 10), breaks = seq(0,300,50)) + theme(panel.background = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.line.x=element_line(), plot.margin = margin(0,0,0,0,'cm')) + xlab('Chromosome position (Mb)')
plotChr2 = function (cell, chr = 1, pad = 3) 
{
    Cdat = data.frame(f_col0 = AlleleFrac[, cell], Chr = floor(as.numeric(rownames(AlleleFrac))/10^6), 
        Position = (as.numeric(rownames(AlleleFrac))%%10^6) + 
            0.5)
    Cdat = Cdat[Cdat$Chr == chr, ]
    ggplot(Cdat) + geom_rect(data = data.frame(xmin = -10, xmax = max(genes[,2])/10^6 + 10, 
        ymin = 0, ymax = 1), aes(xmin = xmin, xmax = xmax, 
        ymin = ymin, ymax = ymax), fill = "#EEEEEE") + geom_point(aes(y = f_col0, 
        x = Position), cex = 3) + geom_hline(yintercept = 0.5, 
        linetype = "dashed") + theme(panel.background = element_blank(), 
        axis.title = element_blank(), panel.border = element_blank(), 
        panel.grid = element_blank(), axis.ticks.x = element_blank(), 
        axis.text.x = element_blank()) + scale_y_continuous(breaks = seq(0, 
        1, 0.25), labels = c("0%", "", "50%", "", "100%"), limits = c(-0.4, 
        1.05)) + scale_x_continuous(expand = c(0, 0)) + annotate("segment", 
        x = -pad, xend = -pad, y = 0, yend = 1) + theme(plot.margin = margin(0, 
        0, 0.15, 0, "cm"))
}


plotCell2 = function (cell) 
{
    annotate_figure(ggarrange(plotChr2(cell, chr = 1), plotChr2(cell, 
        chr = 2), plotChr2(cell, chr = 3), plotChr2(cell, chr = 4), 
        plotChr2(cell, chr = 5), plotChr2(cell, chr = 6), plotChr2(cell, chr = 7), plotChr2(cell, chr = 8), 
        plotChr2(cell, chr = 9), plotChr2(cell, chr = 10), plotChr2(cell, chr = 11), plotChr2(cell, chr = 12),
        plotScaleBar, ncol = 1, nrow = 13, 
        align = "v", heights = c(rep(1, 12), 0.4)), left = text_grob("          % Transcripts from lycopersicum allele", 
        rot = 90, size = 10), top = cell)
}


BIN2 = function (xx, bin = 10^6) 
{
    bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1)))
    colnames(out2) = colnames(g1)
    rownames(out2) = names(out)
    return(out2)
}

genes[,1] = sub('chr', '', genes[, 1])

library(ggplot2)
library(ggpubr)
g1_bin = BIN2(g1)
g2_bin = BIN2(g2)
g1_frac = g1_bin/(g1_bin + g2_bin)
AlleleFrac = g1_frac
AlleleFrac[(g1_bin+g2_bin) < 10] = NA #remove bins with <10 genoinformative transcripts
#AlleleFrac2 = AlleleFrac[,which(colSums(is.na(AlleleFrac)) <= 50)]
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 10000)] ###66/168 (24/192 were no cell controls) pass >= 5000, 31/168 pass >= 10000

g1_gene_frac = g1/(g1+g2)
AlleleFrac = g1_gene_frac
AlleleFrac[(g1+g2) < 3] = NA #remove genes with <5 genoinformative transcripts
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 10000)] ###66/168 (24/192 were no cell controls) pass >= 5000, 31/168 pass >= 10000
plotAlleles('S14-25_10s')


plotChr2 = function (cell, chr = 1, pad = 3) 
{
    Cdat = data.frame(f_col0 = AlleleFrac[, cell], Chr = genes[,1], 
        Position = genes[,2]/10^6)
    Cdat = Cdat[Cdat$Chr == chr, ]
    ggplot(Cdat) + geom_rect(data = data.frame(xmin = -10, xmax = max(genes[,2])/10^6 + 10, 
        ymin = 0, ymax = 1), aes(xmin = xmin, xmax = xmax, 
        ymin = ymin, ymax = ymax), fill = "#EEEEEE") + geom_point(aes(y = f_col0, 
        x = Position), cex = 3) + geom_hline(yintercept = 0.5, 
        linetype = "dashed") + theme(panel.background = element_blank(), 
        axis.title = element_blank(), panel.border = element_blank(), 
        panel.grid = element_blank(), axis.ticks.x = element_blank(), 
        axis.text.x = element_blank()) + scale_y_continuous(breaks = seq(0, 
        1, 0.25), labels = c("0%", "", "50%", "", "100%"), limits = c(-0.4, 
        1.05)) + scale_x_continuous(expand = c(0, 0)) + annotate("segment", 
        x = -pad, xend = -pad, y = 0, yend = 1) + theme(plot.margin = margin(0, 
        0, 0.15, 0, "cm"))
}

plotCell3 = function (cell) 
{
    annotate_figure(ggarrange(plotChr2(cell, chr = 1), plotChr2(cell, 
        chr = 2), plotChr2(cell, chr = 3), plotChr2(cell, chr = 4), 
        plotChr2(cell, chr = 5), plotChr2(cell, chr = 6), plotChr2(cell, 
            chr = 7), plotChr2(cell, chr = 8), plotChr2(cell, chr = 9), 
        plotChr2(cell, chr = 10), plotChr2(cell, chr = 11), plotChr2(cell, 
            chr = 12), plotScaleBar, ncol = 1, nrow = 13, align = "v", 
        heights = c(rep(1, 12), 0.4)), left = text_grob("          % Transcripts from lycopersicum allele", 
        rot = 90, size = 10), top = cell)
}

plotCell3('S14-25_10s')

summary(colSums(D > 5))
> summary(colSums(D > 5))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#  31.00   83.75  109.00  375.85  173.50 4832.00

library('ComplexHeatmap')

FracMono = 100*colMeans(abs(AlleleFrac2 - .5) >= .3, na.rm=T)

D_subset = D[, which(colSums(D) >= 10000)]
summary(colSums(D_subset))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#  10052   17490   35418  102220  183549  374652

D_subset2 = D[,which(colSums(D >= 10) >= 100)]
summary(colSums(D_subset2))
AlleleFrac3 = AlleleFrac[,colnames(D_subset2)] ###47/168 


Heatmap(AlleleFrac2, cluster_rows=F, cluster_columns=F, use_raster=F, name = 'AlleleFrac2', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Heatmap(AlleleFrac3, cluster_rows=F, cluster_columns=F, use_raster=F, name = 'AlleleFrac2', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
FracMono2 = 100*colMeans(abs(AlleleFrac3 - .5) >= .3, na.rm=T)


Heatmap(cor(D_subset, use = 'pairwise.complete.obs', method = 'pearson'), name = 'UMI_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Heatmap(cor(D, use = 'pairwise.complete.obs', method = 'pearson'), name = 'UMI_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))


cd /scratch/jms53460/12_2024_Sl
cp /home/jms53460/Sl_N-masked_genome2* .
cp /home/jms53460/Sl_14.gff .


#!/bin/bash
#SBATCH --job-name=Hisat2                                                 # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=70gb                                                        # Total memory for job
#SBATCH --time=12:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/Hs2.out                     # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/Hs2.err                      # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl

#module load fastp/0.23.2-GCC-11.3.0
mkdir hisat2_out2
cp hisat2_out/*fastq.gz hisat2_out2
cp /scratch/jms53460/12_18_2024_Sl/hisat2_out/*fastq.gz hisat2_out2
#for file in Demultiplexed/*s.fastq.gz; do
#	file2="${file:14:-9}"

#if [ ! -f "hisat2_out/""$file2"".bam" ]; then

#	fastp -w 6 -i "$file" -o "hisat2_out/""$file2"".fastq.gz" -y -x -3 -a AAAAAAAAAAAA

#fi
#done

ml HISAT2/3n-20201216-gompi-2022a
ml SAMtools/1.16.1-GCC-11.3.0
for file in hisat2_out2/*s.fastq.gz
do
	file2="${file:12:-9}"

if [ ! -f "hisat2_out2/""$file2"".bam" ]; then

	hisat2 -p 6 --dta -x Sl_N-masked_genome2_index -U "hisat2_out2/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out2/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out2/""$file2""_unsorted.bam" -o "hisat2_out2/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out2/""$file2""_s.bam"
	
fi
done


###Running SNPsplit

#!/bin/bash
#SBATCH --job-name=SNPsplit                                                      # Job name
#SBATCH --partition=batch                                                           # Partition (queue) name
#SBATCH --ntasks=1                                                                  # Single task job
#SBATCH --cpus-per-task=6                                                           # Number of cores per task
#SBATCH --mem=70gb                                                                  # Total memory for job
#SBATCH --time=24:00:00                                                              # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/SNPsplit.out                       # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/SNPsplit.err                        # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                                # Where to send mail
#SBATCH --mail-type=END,FAIL                                                        # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl
mkdir SNPsplit2
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
for file in "hisat2_out2/"*_s.bam
do
    file2="${file:12:-6}"

    SNPsplit --conflicting -o SNPsplit2 --snp_file Sl_SNPs.tab "$file"
    samtools sort -@ 6 SNPsplit2/"$file2"_s.allele_flagged.bam -o SNPsplit2/"$file2"_SNPsplit.bam
    
done

for file in "SNPsplit2/"*_s.genome1.bam
do
    file2="${file:10:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit2/"$file2"_SNPsplit_g1.bam
done

for file in "SNPsplit2/"*_s.genome2.bam
do
    file2="${file:10:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit2/"$file2"_SNPsplit_g2.bam
done

mkdir featurecounts2
mkdir bams2
mkdir UMIcounts2
mkdir UMIcounts2_g1
mkdir UMIcounts2_g2
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate /home/jms53460/subread-env

featureCounts -T 6 -s 1 -a Sl_14.gff -t 'gene' -g 'ID' -o featurecounts2/read_counts.tab --readExtension5 500 -R BAM SNPsplit2/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a Sl_14.gff -t 'gene' -g 'ID' -o featurecounts2/read_counts_g1.tab --readExtension5 500 -R BAM SNPsplit2/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a Sl_14.gff -t 'gene' -g 'ID' -o featurecounts2/read_counts_g2.tab --readExtension5 500 -R BAM SNPsplit2/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts2/"*SNPsplit.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts2/${file2}.tsv"
    fi
done

for file in "featurecounts2/"*g1.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts2_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts2_g1/${file2}.tsv"
    fi
done

for file in "featurecounts2/"*g2.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts2_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts2_g2/${file2}.tsv"
    fi
done


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('Sl_14.gff', sep = '\t', quote = "")[,9], ';')
annots = annots[grep('ID=gene-', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('ID=', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts2/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit.tsv', '', files)))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
D = B

files = dir('UMIcounts2_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts2_g1/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit_g1.tsv', '', files)))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g1 = B

files = dir('UMIcounts2_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts2_g2/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit_g2.tsv', '', files)))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g2 = B

genes = read.table('Sl_14.gff', sep = '\t', quote = "")[,c(1,5)]
annots2 = strsplit(read.table('Sl_14.gff', sep = '\t', quote = "")[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
annots2 = sub(';', '', sub(' ', '', unlist(lapply(annots2, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))
genes[,3] = annots2
genes2 = genes[grepl('ID=gene-', genes[,3]),]
genes = genes2[order(genes2[,2]),] #order by position
genes = genes[order(genes[,1]),] #order by chr
genes = genes[!duplicated(genes[,3]),]
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]

D = D[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]

save(D,g1,g2,genes, file = "12_2024_Sl_2.RData")
q()



###Copying this to my local computer
scp sapelo2:/scratch/jms53460/12_2024_Sl/12_2024_Sl_2.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'

###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('12_2024_Sl_2.RData')

setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')

load('11_2024_Sl_2.RData')
D_11_2024_2 = D
g1_11_2024_2 = g1
g2_11_2024_2 = g2

load('12_2024_Sl_2.RData')
M_2 = D[,1:32]
M_g1_2 = g1[,1:32]
M_g2_2 = g2[,1:32]
D_12_2024_2 = D[,33:752]
g1_12_2024_2 = g1[,33:752]
g2_12_2024_2 = g2[,33:752]
D = cbind(D_11_2024_2,D_12_2024_2)
g1 = cbind(g1_11_2024_2,g1_12_2024_2)
g2 = cbind(g2_11_2024_2,g2_12_2024_2)

genes[,1] = sub('chr', '', genes[, 1])


library(readxl)
Sl_Stages <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Sl_Stages.xlsx")
library(tidyverse)
Sl_Stages = arrange(Sl_Stages, Bud_order)

#Sl_meta <- Sl_meta[rep(row.names(Sl_meta), times = 8), ]
#Sl_meta = arrange(Sl_meta, Bud_order)
#Sl_meta$Sample = c(paste(rep('S1-8_', times = 32), 1:32, rep('s', times=32), sep=''), paste(rep('S14-25_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S26-37_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S62-73_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S74-79_', times = 48), 1:48, rep('s', times=48), sep=''), paste(rep('S80-91_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S92-103_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S104-115_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S116-127_', times = 96), 1:96, rep('s', times=96), sep=''))
#write.csv(Sl_meta, "Sl_meta.csv")

Sl_meta <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Sl_meta.xlsx")
rownames(Sl_meta) = Sl_meta$Sample

stages = as.character(Sl_meta$Stage)
stages = factor(stages, levels = c('tetrad','UM', 'UM/BM', 'BM'))
tetrads = Sl_meta$Sample[which(Sl_meta$Stage == 'tetrad')]
UMs = Sl_meta$Sample[which(Sl_meta$Stage == 'UM')]
UM_BMs = Sl_meta$Sample[which(Sl_meta$Stage == 'UM/BM')]
BMs = Sl_meta$Sample[which(Sl_meta$Stage == 'BM')]


Sl_meta_stageblind = Sl_meta[,c(1:7,9:12)]
No_cell = Sl_meta_stageblind$Sample[which(Sl_meta_stageblind$No_cell_well == 'Y')]
summary(colSums(D[,No_cell]))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#    162    1333    2268    3325    3959   20942  ##w/o mito and chloro
summary(colSums(D[,No_cell]))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    169    1380    2340    3470    4079   22280  ##w/ mito and chloro

D = D[,Sl_meta_stageblind$Sample]
g1 = g1[,Sl_meta_stageblind$Sample]
g2 = g2[,Sl_meta_stageblind$Sample]

D_Sl = D
g1_Sl = g1
g2_Sl = g2

D_Sl_chr = D_Sl[1:41262,]
D_Sl_org = D_Sl[41263:41476,]

#UMI counts assigned to mitochondria and chloroplast genes for each sample or no cell control
summary(colSums(D[41263:41476,]))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    0.0    39.0    85.0   287.0   226.2  6150.0

#Ratio of UMIs assigned to mito and chloro genes / total UMIs for each sample or no cell control
summary(colSums(D[41263:41476,])/colSums(D))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01979 0.03811 0.04355 0.06509 0.14575

#Ratio of UMIs assigned to mito and chloro genes / total UMIs for no cell controls
summary(colSums(D[41263:41476,No_cell])/colSums(D[,No_cell]))
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
0.001242 0.024981 0.043441 0.048550 0.067588 0.132983

#Ratio of UMIs assigned to mito and chloro genes / total UMIs for each sample (NOT including no cell controls)
summary(colSums(D[41263:41476,-which(colnames(D) %in% No_cell)])/colSums(D[,-which(colnames(D) %in% No_cell)]))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01942 0.03768 0.04287 0.06470 0.14575

D_subset = D[, which(colSums(D) >= 10000)]
D_subset2 = D_subset[, -which(colnames(D_subset) %in% No_cell)]

options(scipen=999)
summary(colSums(D_subset2[41263:41476,])/colSums(D_subset2))


check how many features and how much mapping to S92-103_14s, 10, 48, 9, and S74-79_4s in chloroplasts and mitochondria
assigned to features vs intergenic (unassigned no features)
S74-79_4s: 235435 intergenic,   55761 genic,    13645 UMIs,     0.24 genic/inter (no cell)
S92-103_9s: 63752 intergenic,   92580 genic,    20942 UMIs,     1.45 genic/inter (no cell)
S92-103_10s: 25933 intergenic,  90731 genic,    15511 UMIs,     3.50 genic/inter (doesn't correlate w/ no cell)
S92-103_14s: 49105 intergenic,  147682 genic,   25764, UMIs,    3.01 genic/inter (doesn't correlate w/ no cell)
S92-103_48s: 86753 intergenic,  58381 genic,    20362 UMIs,     0.67 genic/inter (correlates w/ no cell)
S14-25_10s: 324600 intergenic,  3111174 genic,  374652 UMIs,    9.58 genic/inter
S14-25_11s: 1646 intergenic,    7173 genic,     4223 UMIs,      4.36 genic/inter
S14-25_12s: 11212 intergenic,   104200 genic,   17158 UMIs,     9.29 genic/inter
S14-25_13s: 1516 intergenic,    8410 genic,     3696 UMIs,      5.55 genic/inter
S14-25_14s: 2301 intergenic,    15263 genic,    5336 UMIs,      6.63 genic/inter
S14-25_15s: 2456 intergenic,    12572 genic,    4561 UMIs,      5.12 genic/inter (no cell)


###Produce table with all the matching spike-ins in demultiplexed files.
cd /scratch/jms53460/11_2024_Sl
cp /home/jms53460/96spike_in_barcodes.txt .
mkdir spike_ins
for file in "Demultiplexed/"*s.fastq*
do
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | grep -F -f /scratch/jms53460/11_2024_Sl/96spike_in_barcodes.txt | sort | uniq -c | sort -nr | head -n 96 > spike_ins/"${file:14:-9}".txt
done

mkdir spike_ins2
for file in spike_ins/*s.txt
do
    awk '{print $1,$2}' $file OFS="" > spike_ins2/${file:10:-4}.tsv
done

#did this in 11_2024_Sl, 12_2024_Sl, and 12_18_2024_Sl
cd /scratch/jms53460/12_2024_Sl
cp /scratch/jms53460/11_2024_Sl/spike_ins2/* spike_ins2
cp /scratch/jms53460/12_18_2024_Sl/spike_ins2/* spike_ins2


ml R/4.3.1-foss-2022a
R
spike_in_list = read.delim('96spike_in_barcodes.txt', header=F)
spike_in_list = spike_in_list[c(1:96),]
names(spike_in_list) = unlist(lapply(spike_in_list, function(xx) { xx[1] }))
files = dir('spike_ins2')
A = matrix(NA, nrow = length(spike_in_list), ncol = length(files))
rownames(A) = names(spike_in_list)
colnames(A) = files
for (f in files) {
    xx = read.table(paste('spike_ins2/', f, sep = ''), sep = '', header = F, row.names = 2)
    A[,f] = xx[match(names(spike_in_list),rownames(xx)),1]
}

#for loop will not run, says no lines available in input. I think one or more tsv files is empty. Now I check
for (f in files) {
    print(f)
    print(head(read.table(paste('spike_ins2/', f, sep = ''), sep = '', header = F, row.names = 2)))
}
#I hit the error on "S1-8_A267-277_S3_L002_25s.tsv". I'll remove that file from the directory and retry
q()
rm 

R
spike_in_list = read.delim('96spike_in_barcodes.txt', header=F)
spike_in_list = spike_in_list[c(1:96),]
names(spike_in_list) = unlist(lapply(spike_in_list, function(xx) { xx[1] }))
files = dir('spike_ins2')
A = matrix(NA, nrow = length(spike_in_list), ncol = length(files))
rownames(A) = names(spike_in_list)
colnames(A) = files
for (f in files) {
    xx = read.table(paste('spike_ins2/', f, sep = ''), sep = '', header = F, row.names = 2)
    A[,f] = xx[match(names(spike_in_list),rownames(xx)),1]
}
A[is.na(A)] = 0
colnames(A) = sub('A267-277_S3_L002_', '', sub('S190_L007_', '', sub('S189_L007_', '', sub('.tsv', '', files))))
Spike_ins_Sl_M = A[,1:32]
Spike_ins_Sl = A[,33:783]
S1_8_25s = rep(0, 96)
Spike_ins_Sl = cbind(Spike_ins_Sl[,1:16], S1_8_25s, Spike_ins_Sl[,17:751])
colnames(Spike_ins_Sl) = sub('S1_8_25s', 'S1-8_25s', colnames(Spike_ins_Sl))
save(Spike_ins_Sl, Spike_ins_Sl_M, file = '11-12_2024_Sl_Spike_ins.RData')
q()

###Copying this to my local computer
scp sapelo2:/scratch/jms53460/12_2024_Sl/11-12_2024_Sl_Spike_ins.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'


###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('11-12_2024_Sl_Spike_ins.RData')

Spike_ins_Sl = Spike_ins_Sl[,Sl_meta_stageblind$Sample]

Barcode = as.numeric(gsub("s","", gsub(".*_","", colnames(Spike_ins_Sl))))

Spike_ins_Sl_frac = Spike_ins_Sl
for (x in 1:length(colnames(Spike_ins_Sl))) {
    for (z in 1:96){
        Spike_ins_Sl_frac[z,x] = Spike_ins_Sl[z,x]/sum(Spike_ins_Sl[,x])
    }
}

Spike_ins_Sl_frac_correct = Spike_ins_Sl[1,]
for (x in 1:length(colnames(Spike_ins_Sl))) {
    Spike_ins_Sl_frac_correct[x] = Spike_ins_Sl_frac[Barcode[x],x]
}

library('ComplexHeatmap')
Heatmap(Spike_ins_Sl, cluster_rows=F, cluster_columns=F)


#!/bin/bash
#SBATCH --job-name=Features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=150gb                                                            # Total memory for job
#SBATCH --time=24:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/Features_UMIs.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/Features_UMIs.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl
mkdir UMIcounts3
module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4

for file in "featurecounts2/"*SNPsplit.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts3/${file2}.tsv" ]; then

        umi_tools count --per-contig -I "bams2/$file2" -S "UMIcounts3/${file2}.tsv"
    
    fi
done


mv featurecounts2/S6* featurecounts3
mv featurecounts2/S7* featurecounts3
mv featurecounts2/S8* featurecounts3
mv featurecounts2/S9* featurecounts3


 #!/bin/bash
#SBATCH --job-name=Features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=1                                                     # Number of cores per task
#SBATCH --mem=150gb                                                            # Total memory for job
#SBATCH --time=24:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_2024_Sl/Features_UMIs.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_2024_Sl/Features_UMIs.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_2024_Sl
mkdir UMIcounts3
module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4

for file in "featurecounts3/"*SNPsplit.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts3/${file2}.tsv" ]; then

        umi_tools count --per-contig -I "bams2/$file2" -S "UMIcounts3/${file2}.tsv"
    
    fi
done

umi_tools count --per-contig -I "bams2/S80-91_50s_SNPsplit" -S "UMIcounts3/S80-91_50s_SNPsplit.tsv"


cp /scratch/jms53460/11_2024_Sl/UMIcounts3/* UMIcounts3
"S14-25_10s" "S26-37_41s"
ml R/4.3.1-foss-2022a
R
files = dir('UMIcounts3')
A = matrix(NA, nrow = 14, ncol = length(files))
rownames(A) = c('chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chrM', 'chrC')
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts3/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(rownames(A),rownames(xx)),1]
}
colnames(A) = sub('A267-277_S3_L002_', '', sub('S190_L007_', '', sub('S189_L007_', '', sub('_SNPsplit.tsv', '', files))))
A[is.na(A)] = 0
Sl_total_UMIs_M = A[,1:32]
Sl_total_UMIs = A[,33:784]
save(Sl_total_UMIs, Sl_total_UMIs_M, file = "Sl_total_UMIs.RData")
q()



###Copying this to my local computer
scp sapelo2:/scratch/jms53460/12_2024_Sl/Sl_total_UMIs.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'

###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')

load('Sl_total_UMIs.RData')
Sl_total_UMIs = Sl_total_UMIs[,Sl_meta_stageblind$Sample]


Spike_ins_total = colSums(Spike_ins_Sl) 
Genic_chr_UMIs = colSums(D_Sl[1:41262,]) 
Genic_M_C_UMIs = colSums(D_Sl[41263:41476,])
Total_chr_UMIs = colSums(Sl_total_UMIs[1:12,])
Intergenic_chr_UMIs = (colSums(Sl_total_UMIs[1:12,])-colSums(D_Sl[1:41262,]))
Frac_genic_chr_UMIs = Genic_chr_UMIs/colSums(Sl_total_UMIs[1:12,])

Sl_qc = t(data.frame(Spike_in_frac_correct = Spike_ins_Sl_frac_correct, Spike_ins_total, Genic_chr_UMIs, Genic_M_C_UMIs, Total_chr_UMIs, Intergenic_chr_UMIs, Frac_genic_chr_UMIs))

plot(Sl_qc['Spike_in_frac_correct',], Sl_qc['Spike_ins_total',])
plot(Sl_qc['Spike_in_frac_correct',], Sl_qc['Genic_chr_UMIs',])
plot(Sl_qc['Intergenic_chr_UMIs',])
names(which(Sl_qc['Intergenic_chr_UMIs',] < 0))
[1] "S14-25_10s"   "S14-25_18s"   "S14-25_25s"   "S26-37_41s"   "S26-37_42s"
[6] "S80-91_57s"   "S80-91_61s"   "S116-127_86s"
> colSums(D_Sl[,names(which(Sl_qc['Intergenic_chr_UMIs',] < 0))])
  S14-25_10s   S14-25_18s   S14-25_25s   S26-37_41s   S26-37_42s   S80-91_57s 
      374772       260305       272070       351779       222311       262532
  S80-91_61s S116-127_86s 
      295618       278433
> Sl_qc['Intergenic_chr_UMIs',names(which(Sl_qc['Intergenic_chr_UMIs',] < 0))]
  S14-25_10s   S14-25_18s   S14-25_25s   S26-37_41s   S26-37_42s   S80-91_57s 
      -80659        -6472       -34327       -97390       -15742       -39357
  S80-91_61s S116-127_86s
      -23053       -15106


plot(Sl_qc['Total_chr_UMIs',], Sl_qc['Genic_chr_UMIs',])
points(Sl_qc['Total_chr_UMIs',No_cell], Sl_qc['Genic_chr_UMIs',No_cell], pch = 19, cex = 1, col = 'red2')

plot(Sl_qc['Intergenic_chr_UMIs',], Sl_qc['Genic_chr_UMIs',])
points(Sl_qc['Intergenic_chr_UMIs',No_cell], Sl_qc['Genic_chr_UMIs',No_cell], pch = 19, cex = 1, col = 'red2')

plot(Sl_qc['Frac_genic_chr_UMIs',], Sl_qc['Genic_chr_UMIs',])
points(Sl_qc['Frac_genic_chr_UMIs',No_cell], Sl_qc['Genic_chr_UMIs',No_cell], pch = 19, cex = 1, col = 'red2')

plot(Sl_qc['Frac_genic_chr_UMIs',], Sl_qc['Genic_chr_UMIs',], log='y')

Trending--subset of genes, or across whole genome
