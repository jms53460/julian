#Processing and analyzing data from Dec 18th 2024 sequencing run
ssh jms53460@xfer.gacrc.uga.edu
mkdir /scratch/jms53460/12_18_2024_Sl
cd /scratch/jms53460/12_18_2024_Sl
mkdir Raw_Data
cp /work/bnlab/Dec18th2024seq/24323FL-02-01-112* .
mv 24323FL-02-01-112_S111_L003_R1_001.fastq.gz Raw_Data/S62-73_R1_001.fastq.gz
mv 24323FL-02-01-112_S111_L003_R2_001.fastq.gz Raw_Data/S62-73_R2_001.fastq.gz
cp /work/bnlab/Dec18th2024seq/24323FL-02-01-113* .
mv 24323FL-02-01-113_S112_L003_R1_001.fastq.gz Raw_Data/S74-79_R1_001.fastq.gz
mv 24323FL-02-01-113_S112_L003_R2_001.fastq.gz Raw_Data/S74-79_R2_001.fastq.gz
cp /work/bnlab/Dec18th2024seq/24323FL-02-01-114* .
mv 24323FL-02-01-114_S113_L003_R1_001.fastq.gz Raw_Data/Meiocytes_R1_001.fastq.gz
mv 24323FL-02-01-114_S113_L003_R2_001.fastq.gz Raw_Data/Meiocytes_R2_001.fastq.gz
cp /work/bnlab/Dec18th2024seq/24323FL-02-01-115* .
mv 24323FL-02-01-115_S114_L003_R1_001.fastq.gz Raw_Data/S80-91_R1_001.fastq.gz
mv 24323FL-02-01-115_S114_L003_R2_001.fastq.gz Raw_Data/S80-91_R2_001.fastq.gz
cp /work/bnlab/Dec18th2024seq/24323FL-02-01-116* .
mv 24323FL-02-01-116_S115_L003_R1_001.fastq.gz Raw_Data/S92-103_R1_001.fastq.gz
mv 24323FL-02-01-116_S115_L003_R2_001.fastq.gz Raw_Data/S92-103_R2_001.fastq.gz
cp /work/bnlab/Dec18th2024seq/24323FL-02-01-117* .
mv 24323FL-02-01-117_S116_L003_R1_001.fastq.gz Raw_Data/S104-115_R1_001.fastq.gz
mv 24323FL-02-01-117_S116_L003_R2_001.fastq.gz Raw_Data/S104-115_R2_001.fastq.gz
cp /work/bnlab/Dec18th2024seq/24323FL-02-01-118* .
mv 24323FL-02-01-118_S117_L003_R1_001.fastq.gz Raw_Data/S116-127_R1_001.fastq.gz
mv 24323FL-02-01-118_S117_L003_R2_001.fastq.gz Raw_Data/S116-127_R2_001.fastq.gz

#checking that the renamed files are what I think they are using zcat | head and looking at the indexes
 S62-73 ACTCCATC+GATCAAGG
 S74-79 GTTGACCT+CAGTGCTT
 Meiocytes CGTGTGTA+CCAACGAA
 S80-91 ACGACTTG+AACAGCGA
 S92-103 CACTAGCT+TCGGATTC
 S104-115 ACTAGGAG+TATGGCAC
 S116-127 GTAGGAGT+GTCCTAAG

cp /home/jms53460/CELSeq_barcodes.txt /scratch/jms53460/12_18_2024_Sl/
cp /home/jms53460/Sl_12.gff /scratch/jms53460/12_18_2024_Sl/
cp /home/jms53460/Sl_N-masked_genome* /scratch/jms53460/12_18_2024_Sl/
cp /home/jms53460/Sl_SNPs.tab /scratch/jms53460/12_18_2024_Sl/

scp sapelo2:/scratch/jms53460/12_18_2024_Sl/Raw_Data/* 'D:\12_18_2024_Sl_At_Data'



#Demultiplex data in a way that it is nearly ready for upload with SRA.

#!/bin/bash
#SBATCH --job-name=Dm                                                     # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=12:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_18_2024_Sl/Dm.out                   # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_18_2024_Sl/Dm.err                    # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_18_2024_Sl/
mkdir Demultiplexed
ml Miniconda3/23.5.2-0
source activate /home/jms53460/Fastq-Multx

for file in Raw_Data/*_R1_*.gz; do
    filename=$(basename "$file")
    file2=$(echo "$filename" | sed 's/_R1.*//' | sed 's/_R2_001.fastq.gz//')

    if [ ! -f "Demultiplexed/""$file2""_1s.fastq.gz" ]; then
        module load fastp/0.23.2-GCC-11.3.0
	    fastp -w 6 -i "$file" -I "Raw_Data/""$file2""_R2_001.fastq.gz" -o "Demultiplexed/umi_""$file2""_R1.fastq.gz" -O "Demultiplexed/umi_""$file2""_R2.fastq.gz" -A -Q -L -G --umi --umi_loc read2 --umi_len 10 --umi_prefix UMI

	    fastq-multx -b -B "CELSeq_barcodes.txt" -m 0 "Demultiplexed/umi_""$file2""_R2.fastq.gz" "Demultiplexed/umi_""$file2""_R1.fastq.gz" "Raw_Data/""$file2""_R2_001.fastq.gz" -o "Demultiplexed/""$file2""_%_R2.fastq.gz" "Demultiplexed/""$file2""_%.fastq.gz" "Demultiplexed/""$file2""_%_umi.fastq.gz" # Split read 2 file by CELseq barcodes. Require perfect match to barcode in expected location

    fi
done
conda deactivate


#Move the empty files
mkdir Empty
mv Demultiplexed/Meiocytes_1* Empty
mv Demultiplexed/Meiocytes_2* Empty
mv Demultiplexed/Meiocytes_3* Empty
mv Demultiplexed/Meiocytes_4* Empty
mv Empty/Meiocytes_49s* Demultiplexed
mv Demultiplexed/Meiocytes_5s* Empty
mv Demultiplexed/Meiocytes_6s* Empty
mv Demultiplexed/Meiocytes_7s* Empty
mv Demultiplexed/Meiocytes_8s* Empty
mv Demultiplexed/Meiocytes_9s* Empty
mv Demultiplexed/S74-79_49s* Empty
mv Demultiplexed/S74-79_5* Empty
mv Demultiplexed/S74-79_6* Empty
mv Demultiplexed/S74-79_7* Empty
mv Demultiplexed/S74-79_8* Empty
mv Demultiplexed/S74-79_9* Empty
mv Empty/S74-79_5s* Demultiplexed
mv Empty/S74-79_6s* Demultiplexed
mv Empty/S74-79_7s* Demultiplexed
mv Empty/S74-79_8s* Demultiplexed
mv Empty/S74-79_9s* Demultiplexed

#Move the files with Arabidopsis meiocyte data (81s to 96s)
mkdir /scratch/jms53460/12_18_2024_At
mkdir /scratch/jms53460/12_18_2024_At/Demultiplexed
mv Demultiplexed/Meiocytes_8* /scratch/jms53460/12_18_2024_At/Demultiplexed
mv Demultiplexed/Meiocytes_9* /scratch/jms53460/12_18_2024_At/Demultiplexed
mv /scratch/jms53460/12_18_2024_At/Demultiplexed/Meiocytes_80s* Demultiplexed


#!/bin/bash
#SBATCH --job-name=Hisat2                                                 # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=12:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_18_2024_Sl/Hs2.out                  # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_18_2024_Sl/Hs2.err                   # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_18_2024_Sl

module load fastp/0.23.2-GCC-11.3.0
mkdir hisat2_out
for file in Demultiplexed/*s.fastq.gz; do
	file2="${file:14:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	fastp -w 6 -i "$file" -o "hisat2_out/""$file2"".fastq.gz" -y -x -3 -a AAAAAAAAAAAA

fi
done

ml HISAT2/3n-20201216-gompi-2022a
ml SAMtools/1.16.1-GCC-11.3.0
for file in hisat2_out/*s.fastq.gz
do
	file2="${file:11:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	hisat2 -p 6 --dta -x Sl_N-masked_genome_index -U "hisat2_out/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out/""$file2""_unsorted.bam" -o "hisat2_out/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out/""$file2""_s.bam"
	
fi
done


###Running SNPsplit

#!/bin/bash
#SBATCH --job-name=SNPsplit                                                         # Job name
#SBATCH --partition=batch                                                           # Partition (queue) name
#SBATCH --ntasks=1                                                                  # Single task job
#SBATCH --cpus-per-task=6                                                           # Number of cores per task
#SBATCH --mem=50gb                                                                  # Total memory for job
#SBATCH --time=6:00:00                                                              # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_18_2024_Sl/SNPsplit.out                       # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_18_2024_Sl/SNPsplit.err                        # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                                # Where to send mail
#SBATCH --mail-type=END,FAIL                                                        # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_18_2024_Sl
mkdir SNPsplit
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
for file in "hisat2_out/"*_s.bam
do
    file2="${file:11:-6}"

    SNPsplit --conflicting -o SNPsplit --snp_file Sl_SNPs.tab "$file"
    samtools sort -@ 6 SNPsplit/"$file2"_s.allele_flagged.bam -o SNPsplit/"$file2"_SNPsplit.bam
    
done

for file in "SNPsplit/"*_s.genome1.bam
do
    file2="${file:9:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit/"$file2"_SNPsplit_g1.bam
done

for file in "SNPsplit/"*_s.genome2.bam
do
    file2="${file:9:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit/"$file2"_SNPsplit_g2.bam
done


#!/bin/bash
#SBATCH --job-name=Features_UMIs                                              # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=12:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/12_18_2024_Sl/Features_UMIs.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/12_18_2024_Sl/Features_UMIs.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/12_18_2024_Sl
mkdir featurecounts
mkdir bams
mkdir UMIcounts
mkdir UMIcounts_g1
mkdir UMIcounts_g2
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate /home/jms53460/subread-env

featureCounts -T 6 -s 1 -a Sl_12.gff -t 'gene' -g 'ID' -o featurecounts/read_counts.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a Sl_12.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g1.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a Sl_12.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g2.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts/"*SNPsplit.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g1.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g1/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g2.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g2/${file2}.tsv"
    fi
done


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('Sl_12.gff', sep = '\t', quote = "")[,9], ';')
annots = annots[grep('ID=gene-', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('ID=', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('_SNPsplit.tsv', '', files)
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
D = B

files = dir('UMIcounts_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g1/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('_SNPsplit_g1.tsv', '', files)
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g1 = B

files = dir('UMIcounts_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g2/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('_SNPsplit_g2.tsv', '', files)
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g2 = B

genes = read.table('Sl_12.gff', sep = '\t', quote = "")[,c(1,5)]
annots2 = strsplit(read.table('Sl_12.gff', sep = '\t', quote = "")[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
annots2 = sub(';', '', sub(' ', '', unlist(lapply(annots2, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))
genes[,3] = annots2
genes2 = genes[grepl('ID=gene-', genes[,3]),]
genes = genes2[order(genes2[,2]),] #order by position
genes = genes[order(genes[,1]),] #order by chr
genes = genes[!duplicated(genes[,3]),]
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]


save(D,g1,g2,genes, file = "12_18_2024_Sl.RData")
q()



###Copying this to my local computer
scp sapelo2:/scratch/jms53460/12_18_2024_Sl/12_18_2024_Sl.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'

###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('12_18_2024_Sl.RData')

D = D[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]

summary(colSums(D))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#   1201    3070    3998   19824    6302  374652 #192
summary(colSums(D))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#    38    1097    1858   10089    4197  295550  #560

plotScaleBar = ggplot() + scale_x_continuous(expand=c(0,0), limits = c(-10, max(genes[,2])/10^6 + 10), breaks = seq(0,300,50)) + theme(panel.background = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.line.x=element_line(), plot.margin = margin(0,0,0,0,'cm')) + xlab('Chromosome position (Mb)')
plotChr2 = function (cell, chr = 1, pad = 3) 
{
    Cdat = data.frame(f_col0 = AlleleFrac[, cell], Chr = floor(as.numeric(rownames(AlleleFrac))/10^6), 
        Position = (as.numeric(rownames(AlleleFrac))%%10^6) + 
            0.5)
    Cdat = Cdat[Cdat$Chr == chr, ]
    ggplot(Cdat) + geom_rect(data = data.frame(xmin = -10, xmax = max(genes[,2])/10^6 + 10, 
        ymin = 0, ymax = 1), aes(xmin = xmin, xmax = xmax, 
        ymin = ymin, ymax = ymax), fill = "#EEEEEE") + geom_point(aes(y = f_col0, 
        x = Position), cex = 3) + geom_hline(yintercept = 0.5, 
        linetype = "dashed") + theme(panel.background = element_blank(), 
        axis.title = element_blank(), panel.border = element_blank(), 
        panel.grid = element_blank(), axis.ticks.x = element_blank(), 
        axis.text.x = element_blank()) + scale_y_continuous(breaks = seq(0, 
        1, 0.25), labels = c("0%", "", "50%", "", "100%"), limits = c(-0.4, 
        1.05)) + scale_x_continuous(expand = c(0, 0)) + annotate("segment", 
        x = -pad, xend = -pad, y = 0, yend = 1) + theme(plot.margin = margin(0, 
        0, 0.15, 0, "cm"))
}


plotCell2 = function (cell) 
{
    annotate_figure(ggarrange(plotChr2(cell, chr = 1), plotChr2(cell, 
        chr = 2), plotChr2(cell, chr = 3), plotChr2(cell, chr = 4), 
        plotChr2(cell, chr = 5), plotChr2(cell, chr = 6), plotChr2(cell, chr = 7), plotChr2(cell, chr = 8), 
        plotChr2(cell, chr = 9), plotChr2(cell, chr = 10), plotChr2(cell, chr = 11), plotChr2(cell, chr = 12),
        plotScaleBar, ncol = 1, nrow = 13, 
        align = "v", heights = c(rep(1, 12), 0.4)), left = text_grob("          % Transcripts from lycopersicum allele", 
        rot = 90, size = 10), top = cell)
}

correlation of expression and allele fraction after binning

BIN2 = function (xx, bin = 10^6) 
{
    bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1)))
    colnames(out2) = colnames(g1)
    rownames(out2) = names(out)
    return(out2)
}

genes[,1] = sub('chr', '', genes[, 1])

library(ggplot2)
library(ggpubr)
g1_bin = BIN2(g1)
g2_bin = BIN2(g2)
g1_frac = g1_bin/(g1_bin + g2_bin)
AlleleFrac = g1_frac
AlleleFrac[(g1_bin+g2_bin) < 10] = NA #remove bins with <10 genoinformative transcripts
#AlleleFrac2 = AlleleFrac[,which(colSums(is.na(AlleleFrac)) <= 50)]
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 10000)] ###66/168 (24/192 were no cell controls) pass >= 5000, 31/168 pass >= 10000

g1_gene_frac = g1/(g1+g2)
AlleleFrac = g1_gene_frac
AlleleFrac[(g1+g2) < 10] = NA #remove genes with <10 genoinformative transcripts
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 10000)] ###66/168 (24/192 were no cell controls) pass >= 5000, 31/168 pass >= 10000
plotAlleles('Meiocytes_49s')


plotChr2 = function (cell, chr = 1, pad = 3) 
{
    Cdat = data.frame(f_col0 = AlleleFrac[, cell], Chr = genes[,1], 
        Position = genes[,2]/10^6)
    Cdat = Cdat[Cdat$Chr == chr, ]
    ggplot(Cdat) + geom_rect(data = data.frame(xmin = -10, xmax = max(genes[,2])/10^6 + 10, 
        ymin = 0, ymax = 1), aes(xmin = xmin, xmax = xmax, 
        ymin = ymin, ymax = ymax), fill = "#EEEEEE") + geom_point(aes(y = f_col0, 
        x = Position), cex = 3) + geom_hline(yintercept = 0.5, 
        linetype = "dashed") + theme(panel.background = element_blank(), 
        axis.title = element_blank(), panel.border = element_blank(), 
        panel.grid = element_blank(), axis.ticks.x = element_blank(), 
        axis.text.x = element_blank()) + scale_y_continuous(breaks = seq(0, 
        1, 0.25), labels = c("0%", "", "50%", "", "100%"), limits = c(-0.4, 
        1.05)) + scale_x_continuous(expand = c(0, 0)) + annotate("segment", 
        x = -pad, xend = -pad, y = 0, yend = 1) + theme(plot.margin = margin(0, 
        0, 0.15, 0, "cm"))
}

plotCell3 = function (cell) 
{
    annotate_figure(ggarrange(plotChr2(cell, chr = 1), plotChr2(cell, 
        chr = 2), plotChr2(cell, chr = 3), plotChr2(cell, chr = 4), 
        plotChr2(cell, chr = 5), plotChr2(cell, chr = 6), plotChr2(cell, 
            chr = 7), plotChr2(cell, chr = 8), plotChr2(cell, chr = 9), 
        plotChr2(cell, chr = 10), plotChr2(cell, chr = 11), plotChr2(cell, 
            chr = 12), plotScaleBar, ncol = 1, nrow = 13, align = "v", 
        heights = c(rep(1, 12), 0.4)), left = text_grob("          % Transcripts from lycopersicum allele", 
        rot = 90, size = 10), top = cell)
}

plotCell3('S104-115_10s')


summary(colSums(D > 5))
> summary(colSums(D > 5))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#  31.00   83.75  109.00  375.85  173.50 4832.00

library('ComplexHeatmap')

FracMono = 100*colMeans(abs(AlleleFrac2 - .5) >= .3, na.rm=T)

D_subset = D[, which(colSums(D) >= 10000)]
summary(colSums(D_subset))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#  10052   17490   35418  102220  183549  374652

D_subset2 = D[,which(colSums(D >= 10) >= 100)]
summary(colSums(D_subset2))
AlleleFrac3 = AlleleFrac[,colnames(D_subset2)] ###82 


Heatmap(AlleleFrac2, cluster_rows=F, cluster_columns=F, use_raster=F, name = 'AlleleFrac2', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Heatmap(AlleleFrac3, cluster_rows=F, cluster_columns=F, use_raster=F, name = 'AlleleFrac2', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
FracMono2 = 100*colMeans(abs(AlleleFrac3 - .5) >= .3, na.rm=T)


Heatmap(cor(D_subset, use = 'pairwise.complete.obs', method = 'pearson'), name = 'UMI_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Heatmap(cor(D_subset[,18:80], use = 'pairwise.complete.obs', method = 'pearson'), name = 'UMI_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Heatmap(cor(D, use = 'pairwise.complete.obs', method = 'pearson'), name = 'UMI_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))



setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')

load('11_2024_Sl.RData')
D_11_2024 = D
g1_11_2024 = g1
g2_11_2024 = g2

load('12_2024_Sl.RData')
D_12_2024 = D
g1_12_2024 = g1
g2_12_2024 = g2

load('12_18_2024_Sl.RData')
D = D[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]
M = D[,1:32]
M_g1 = g1[,1:32]
M_g2 = g2[,1:32]
D_12_18_2024 = D[,33:560]
g1_12_18_2024 = g1[,33:560]
g2_12_18_2024 = g2[,33:560]
D = cbind(D_11_2024,D_12_2024,D_12_18_2024)
g1 = cbind(g1_11_2024,g1_12_2024,g1_12_18_2024)
g2 = cbind(g2_11_2024,g2_12_2024,g2_12_18_2024)

genes[,1] = sub('chr', '', genes[, 1])


library(readxl)
Sl_Stages <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Sl_Stages.xlsx")
library(tidyverse)
Sl_Stages = arrange(Sl_Stages, Bud_order)

#Sl_meta <- Sl_meta[rep(row.names(Sl_meta), times = 8), ]
#Sl_meta = arrange(Sl_meta, Bud_order)
#Sl_meta$Sample = c(paste(rep('S1-8_', times = 32), 1:32, rep('s', times=32), sep=''), paste(rep('S14-25_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S26-37_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S62-73_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S74-79_', times = 48), 1:48, rep('s', times=48), sep=''), paste(rep('S80-91_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S92-103_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S104-115_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('S116-127_', times = 96), 1:96, rep('s', times=96), sep=''))
#write.csv(Sl_meta, "Sl_meta.csv")

Sl_meta <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Sl_meta.xlsx")
rownames(Sl_meta) = Sl_meta$Sample

stages = as.character(Sl_meta$Stage)
stages = factor(stages, levels = c('tetrad','UM', 'UM/BM', 'BM'))

Sl_meta_stageblind = Sl_meta[,c(1:7,9:12)]
No_cell = Sl_meta_stageblind$Sample[which(Sl_meta_stageblind$No_cell_well == 'Y')]
summary(colSums(D[,No_cell]))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#    162    1333    2268    3325    3959   20942

Small = Sl_meta_stageblind$Sample[which(Sl_meta_stageblind$Small == 'Y')] #51 small
summary(colSums(D[,Small]))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#    428    1184    2297    2615    3454    9259

D = D[,Sl_meta_stageblind$Sample]
g1 = g1[,Sl_meta_stageblind$Sample]
g2 = g2[,Sl_meta_stageblind$Sample]

plotScaleBar = ggplot() + scale_x_continuous(expand=c(0,0), limits = c(-10, max(genes[,2])/10^6 + 10), breaks = seq(0,300,50)) + theme(panel.background = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.line.x=element_line(), plot.margin = margin(0,0,0,0,'cm')) + xlab('Chromosome position (Mb)')
g1_gene_frac = g1/(g1+g2)
AlleleFrac = g1_gene_frac
AlleleFrac[(g1+g2) < 10] = NA #remove genes with <10 genoinformative transcripts
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 10000)] #99 samples have >= 10,000 UMIs

library(ggplot2)
library(ggpubr)

plotChr2 = function (cell, chr = 1, pad = 3) 
{
    Cdat = data.frame(f_col0 = AlleleFrac[, cell], Chr = genes[,1], 
        Position = genes[,2]/10^6)
    Cdat = Cdat[Cdat$Chr == chr, ]
    ggplot(Cdat) + geom_rect(data = data.frame(xmin = -10, xmax = max(genes[,2])/10^6 + 10, 
        ymin = 0, ymax = 1), aes(xmin = xmin, xmax = xmax, 
        ymin = ymin, ymax = ymax), fill = "#EEEEEE") + geom_point(aes(y = f_col0, 
        x = Position), cex = 3) + geom_hline(yintercept = 0.5, 
        linetype = "dashed") + theme(panel.background = element_blank(), 
        axis.title = element_blank(), panel.border = element_blank(), 
        panel.grid = element_blank(), axis.ticks.x = element_blank(), 
        axis.text.x = element_blank()) + scale_y_continuous(breaks = seq(0, 
        1, 0.25), labels = c("0%", "", "50%", "", "100%"), limits = c(-0.4, 
        1.05)) + scale_x_continuous(expand = c(0, 0)) + annotate("segment", 
        x = -pad, xend = -pad, y = 0, yend = 1) + theme(plot.margin = margin(0, 
        0, 0.15, 0, "cm"))
}

plotCell3 = function (cell) 
{
    annotate_figure(ggarrange(plotChr2(cell, chr = 1), plotChr2(cell, 
        chr = 2), plotChr2(cell, chr = 3), plotChr2(cell, chr = 4), 
        plotChr2(cell, chr = 5), plotChr2(cell, chr = 6), plotChr2(cell, 
            chr = 7), plotChr2(cell, chr = 8), plotChr2(cell, chr = 9), 
        plotChr2(cell, chr = 10), plotChr2(cell, chr = 11), plotChr2(cell, 
            chr = 12), plotScaleBar, ncol = 1, nrow = 13, align = "v", 
        heights = c(rep(1, 12), 0.4)), left = text_grob("          % Transcripts from lycopersicum allele", 
        rot = 90, size = 10), top = cell)
}

plotCell3('S104-115_10s')

library('ComplexHeatmap')

D_subset = D[, which(colSums(D) >= 10000)] #99/658 (15.0%)
summary(colSums(D_subset))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#  10052   17490   35418  102220  183549  374652

Heatmap(cor(D_subset, use = 'pairwise.complete.obs', method = 'pearson'), name = 'UMI_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))

#remove no cell controls that made it through 10,000 UMI cut off
AlleleFrac3 = as.data.frame(AlleleFrac2) %>% select(-c(No_cell[which(No_cell %in% colnames(AlleleFrac2))]))

FracMono = 100*colMeans(abs(AlleleFrac3 - .5) >= .3, na.rm=T)
plot(FracMono, cex = 3, pch=20)

pseudocount = 1*10^6/quantile(colSums(D), p = .1)
A2 = sweep(D, 2, colSums(D), '/')*10^6  # Transcripts per million normalization
A2b = log(A2+pseudocount,10)  # Log transform
A3 = A2b[rowSums(A2[,colnames(AlleleFrac3)] > 0) >= 20,colnames(AlleleFrac3)]
A3 = A3[rank(-apply(A3,1,sd)) <= 1000,]
PCs = prcomp(t(A3))

###
ords = order(PCs$x[,1])

Heatmap(cor(A3[,ords], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono[ords], UMIcounts = log(colSums(D[,colnames(AlleleFrac3)][,ords]),10)),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T, show_row_names = FALSE, show_column_names = FALSE)


#How many total samples at each stage:
length(which(Sl_meta$Stage == "tetrad"))*7/8 #35
summary(colSums(D[,which(Sl_meta$Stage == "tetrad")]))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#   1148    3893    8967    9763   14631   26023
length(which(Sl_meta$Stage == "UM"))*7/8 #329
summary(colSums(D[,which(Sl_meta$Stage == "UM")]))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#     31    1038    1938    3016    3677   46342
length(which(Sl_meta$Stage == "UM/BM"))*7/8 #21
summary(colSums(D[,which(Sl_meta$Stage == "UM/BM")]))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#    736    1914    2520   10394    3574  109494
length(which(Sl_meta$Stage == "BM"))*7/8 #273
summary(colSums(D[,which(Sl_meta$Stage == "BM")]))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#     17    1386    2704   24818    6402  374652

#How many samples with >10,000 UMIs at each stage / total samples at each stage:
length(which(Sl_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac3))] == "tetrad")) #15/35, 0.43
length(which(Sl_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac3))] == "UM")) #8/329, 0.024
length(which(Sl_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac3))] == "UM/BM")) #3/21, 0.14
length(which(Sl_meta$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac3))] == "BM")) #69/273, 0.25

#How many UMIs for each no cell control by stage--tetrad and UM seem most susceptible to this type of contamination
summary(colSums(D[,No_cell[which(Sl_meta[No_cell,8] == "tetrad")]])) #5
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#   3976    4867    9585   10274   11998   20942
summary(colSums(D[,No_cell[which(Sl_meta[No_cell,8] == "UM")]])) #45
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#    463    1345    2098    3499    4230   20247
summary(colSums(D[,No_cell[which(Sl_meta[No_cell,8] == "UM/BM")]])) #3
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#    880    1591    2302    1904    2416    2531
summary(colSums(D[,No_cell[which(Sl_meta[No_cell,8] == "BM")]])) #37
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#    162    1256    1894    2289    3278    4628


#I want to set things up so I can compare the no cell control of each anther with the real samples of the associated anther
NC_vs_samples = matrix(data=0, nrow = 8, ncol = 90)
rownames(NC_vs_samples) = c('No_cell', 'Samp1', 'Samp2', 'Samp3', 'Samp4', 'Samp5', 'Samp6', 'Samp7')
batch = c(rep('S14-25', times = 12), rep('S26-37', times = 12), rep('S62-73', times = 12), rep('S74-79', times = 6), rep('S80-91', times = 12), rep('S92-103', times = 12), rep('S104-115', times = 12), rep('S116-127', times = 12))
celseq_primer = c(rep(c('1-8s', '9-16s', '17-24s', '25-32s', '33-40s', '41-48s', '49-56s', '57-64s', '65-72s', '73-80s', '81-88s', '89-96s'), times = 3), rep(c('1-8s', '9-16s', '17-24s', '25-32s', '33-40s', '41-48s'), times = 1), rep(c('1-8s', '9-16s', '17-24s', '25-32s', '33-40s', '41-48s', '49-56s', '57-64s', '65-72s', '73-80s', '81-88s', '89-96s'), times = 4))
colnames(NC_vs_samples) = paste(batch, '_', celseq_primer, sep = '')

D_trim = D[,33:752]
D_trim = as.data.frame(D_trim) %>% select(-all_of(No_cell))

NC_vs_samples[1,] = colSums(D[,No_cell])
NC_vs_samples[2:8,] = colSums(D_trim)

Heatmap(NC_vs_samples, cluster_rows=F, cluster_columns=F)

over_5x_nc = numeric(0)
for (x in 1:90){
    y = which(NC_vs_samples[2:8,x] >= 5*NC_vs_samples[1,x])
    over_5x_nc = append(over_5x_nc, colnames(D_trim[y+7*(x-1)])) 
}
over_5x_nc

over_3x_nc = numeric(0)
for (x in 1:90){
    y = which(NC_vs_samples[2:8,x] >= 3*NC_vs_samples[1,x])
    over_3x_nc = append(over_3x_nc, colnames(D_trim[y+7*(x-1)])) 
}
over_3x_nc
over_3x_nc_5000umis = names(which(colSums(D[,over_3x_nc]) >= 5000))
colSums(D[,colnames(AlleleFrac3[,which(!(colnames(AlleleFrac3) %in% over_3x_nc_5000umis))])]) #17 samples that were in AlleleFrac3 are not in over_3x_nc_5000umis. 5 of these are from S1-8 which were excluded due to lacking no cell controls

length(which(Sl_meta[over_3x_nc_5000umis,8] == "tetrad")) #4/35, 0.11 ###15/35, 0.43 in AlleleFrac3
length(which(Sl_meta[over_3x_nc_5000umis,8] == "UM")) #17/329, 0.05 ###8/329, 0.024 in AlleleFrac3
length(which(Sl_meta[over_3x_nc_5000umis,8] == "UM/BM")) #4/21, 0.19 ###3/21, 0.14 in AlleleFrac3
length(which(Sl_meta[over_3x_nc_5000umis,8] == "BM")) #69/273, 0.25 ###69/273, 0.25 in AlleleFrac3


A4 = A2b[rowSums(A2[,colnames(AlleleFrac)] > 0) >= 20,over_3x_nc_5000umis]
A4 = A4[rank(-apply(A4,1,sd)) <= 1000,]
PCs2 = prcomp(t(A4))


FracMono2 = 100*colMeans(abs(AlleleFrac[,over_3x_nc_5000umis] - .5) >= .3, na.rm=T)
plot(FracMono2, cex = 3, pch=20)


###
ords2 = order(PCs2$x[,1])

Heatmap(cor(A4[,ords2], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono2[ords2], UMIcounts = log(colSums(D[,over_3x_nc_5000umis][,ords2]),10)),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T, show_row_names = FALSE, show_column_names = FALSE)


Heatmap(cor(log10(sweep(D,2,colSums(D),'/')*10^6+100)))
> zz=D[,grepl('S92-103',colnames(D))]
> zz2=sweep(zz,2,colSums(zz),'/')*10^6
> Heatmap(cor(log10(zz2+100)))
zz=D[,grepl('S92-103',colnames(D))]
Heatmap(cor(log10(sweep(zz,2,colSums(zz),'/')[,colSums(zz) >= 10000]*10^6+100)))
zx=colSums(D)[No_cell]
> zx[zx>10000]
  S74-79_4s  S92-103_2s  S92-103_9s S92-103_66s
      13645       20247       20942       11998
> zz=D[,grepl('S74-79',colnames(D))]                     
        1093         1514         1536         1472         1256         1440
> zx=colSums(D)[No_cell]
> zx[zx>10000]
  S74-79_4s  S92-103_2s  S92-103_9s S92-103_66s
      13645       20247       20942       11998
> zz=D[,grepl('S74-79',colnames(D))]
      13645       20247       20942       11998
> zz=D[,grepl('S74-79',colnames(D))]
> Heatmap(cor(log10(sweep(zz,2,colSums(zz),'/')[,colSums(zz) >= 10000]*10^6+100)))
> zz=D[,grepl('S74-79',colnames(D))|grepl('S92-103',colnames(D))]
> Heatmap(cor(log10(sweep(zz,2,colSums(zz),'/')[,colSums(zz) >= 10000]*10^6+100)))
> pairs(unique(D[,c('S92-103_14s','S92-103_10s','S92-103_48s','S92-103_9s','S74-79_4s')])+1,pch=.3,log='xy')
> head(rownames(D))
> head(rownames(D))
[1] "ID=gene-LOC104645797" "ID=gene-GAD3"         "ID=gene-LOC101263636"
[4] "ID=gene-SOS1"         "ID=gene-LOC101263144" "ID=gene-LOC101247456"
> zz=colSums(D)
> plot(quantile(zz[order(zz)]))
> plot((zz[order(zz)]))        
> plot((zz[order(zz)]),(1:length(zz))/length(zz))
> plot((zz[order(zz)]),(1:length(zz))/length(zz), type='l')
> plot((zz[order(zz)]),(1:length(zz))/length(zz), type='l',lwd=2)
> zz=zz[order(zz)]
> zz=zz[order(-zz)]
> plot(zz,(1:length(zz))/length(zz), type='l',lwd=2)             
> zz=zz[order(zz)] 
> lines(zz[No_cell],(1:length(No_cell))/length(No_cell),col='red',lwd=2,lty-2)
Error in plot.xy(xy.coords(x, y), type = type, ...) : 
  object 'lty' not found
> lines(zz[No_cell],(1:length(No_cell))/length(No_cell),col='red',lwd=2,lty=2)
zz=zz[order(zz)]                                   
> 
plot(zz,(1:length(zz))/length(zz), type='l',lwd=2) 
> lines(zz[No_cell],(1:length(No_cell))/length(No_cell),col='red',lwd=2,lty=2)
> plot(zz,(1:length(zz))/length(zz), type='l',lwd=2) 
> lines(zz[names(zz) %in% No_cell],(1:length(No_cell))/length(No_cell),col='red',lwd=2,lty=2)
> plot(zz,(1:length(zz))/length(zz), type='l',lwd=2,log='x')
> lines(zz[names(zz) %in% No_cell],(1:length(No_cell))/length(No_cell),col='red',lwd=2,lty=2)
> abline(v=10000,lty=2)
> abline(v=5000,lty=2) 
> abline(v=25000,lty=2)


colSums(D[41263:41476,]) #all the mitochondrial and plastid genes are 0 because I had mapped to genome excluding mitochondria and plastid



