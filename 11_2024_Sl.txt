###Processing and analyzing the tomato sequencing data from 11_2024

#download Solanum lycopersicum and Solanum pimpinellifolium genomes
#downloaded Sl genome and gff and Sp genome from NCBI
ssh jms53460@xfer.gacrc.uga.edu
curl -s https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/036/512/215/GCF_036512215.1_SLM_r2.1/GCF_036512215.1_SLM_r2.1_genomic.fna.gz > Sl_genome.fa.gz
curl -s https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/036/512/215/GCF_036512215.1_SLM_r2.1/GCF_036512215.1_SLM_r2.1_genomic.gff.gz > Sl.gff.gz
curl -s https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/034/621/305/GCA_034621305.1_SDAU_Spim_LA1589_1.0/GCA_034621305.1_SDAU_Spim_LA1589_1.0_genomic.fna.gz > Sp_genome.fa.gz

ssh sapelo2
zcat Sl_genome.fa.gz | grep -n Solanum
#10409686:>NC_035963.1 Solanum lycopersicum bio-material TGRC:LA1421 mitochondrion, complete genome 
zcat Sl_genome.fa.gz | head -10409685 > Sl_genome_trim.fa
sed 's/NC_090800.*/chr1/' Sl_genome_trim.fa > Sl_genome_1.fa
sed 's/NC_090801.*/chr2/' Sl_genome_1.fa > Sl_genome_2.fa
sed 's/NC_090802.*/chr3/' Sl_genome_2.fa > Sl_genome_3.fa
sed 's/NC_090803.*/chr4/' Sl_genome_3.fa > Sl_genome_4.fa
sed 's/NC_090804.*/chr5/' Sl_genome_4.fa > Sl_genome_5.fa
sed 's/NC_090805.*/chr6/' Sl_genome_5.fa > Sl_genome_6.fa
sed 's/NC_090806.*/chr7/' Sl_genome_6.fa > Sl_genome_7.fa
sed 's/NC_090807.*/chr8/' Sl_genome_7.fa > Sl_genome_8.fa
sed 's/NC_090808.*/chr9/' Sl_genome_8.fa > Sl_genome_9.fa
sed 's/NC_090809.*/chr10/' Sl_genome_9.fa > Sl_genome_10.fa
sed 's/NC_090810.*/chr11/' Sl_genome_10.fa > Sl_genome_11.fa
sed 's/NC_090811.*/chr12/' Sl_genome_11.fa > Sl_genome_12.fa

zcat Sp_genome.fa.gz | grep -n Solanum
#10296895:>JAWZUQ010000013.1 Solanum pimpinellifolium cultivar LA1589 Unplaced_contig_1, whole genome shotgun sequence
zcat Sp_genome.fa.gz | head -10296894 > Sp_genome_trim.fa
sed 's/CM067864.*/chr1/' Sp_genome_trim.fa > Sp_genome_1.fa
sed 's/CM067865.*/chr2/' Sp_genome_1.fa > Sp_genome_2.fa
sed 's/CM067866.*/chr3/' Sp_genome_2.fa > Sp_genome_3.fa
sed 's/CM067867.*/chr4/' Sp_genome_3.fa > Sp_genome_4.fa
sed 's/CM067868.*/chr5/' Sp_genome_4.fa > Sp_genome_5.fa
sed 's/CM067869.*/chr6/' Sp_genome_5.fa > Sp_genome_6.fa
sed 's/CM067870.*/chr7/' Sp_genome_6.fa > Sp_genome_7.fa
sed 's/CM067871.*/chr8/' Sp_genome_7.fa > Sp_genome_8.fa
sed 's/CM067872.*/chr9/' Sp_genome_8.fa > Sp_genome_9.fa
sed 's/CM067873.*/chr10/' Sp_genome_9.fa > Sp_genome_10.fa
sed 's/CM067874.*/chr11/' Sp_genome_10.fa > Sp_genome_11.fa
sed 's/CM067875.*/chr12/' Sp_genome_11.fa > Sp_genome_12.fa

cp /home/jms53460/Sl.gff.gz /scratch/jms53460/11_2024_Sl/
cp /home/jms53460/CELSeq_barcodes.txt /scratch/jms53460/11_2024_Sl/
cp /home/jms53460/Sp_genome_12.fa /scratch/jms53460/11_2024_Sl/
cp /home/jms53460/Sl_genome_12.fa /scratch/jms53460/11_2024_Sl/

gzip -d Sl.gff.gz
sed 's/NC_090800.1/chr1/' Sl.gff > Sl_1.gff
sed 's/NC_090801.1/chr2/' Sl_1.gff > Sl_2.gff
sed 's/NC_090802.1/chr3/' Sl_2.gff > Sl_3.gff
sed 's/NC_090803.1/chr4/' Sl_3.gff > Sl_4.gff
sed 's/NC_090804.1/chr5/' Sl_4.gff > Sl_5.gff
sed 's/NC_090805.1/chr6/' Sl_5.gff > Sl_6.gff
sed 's/NC_090806.1/chr7/' Sl_6.gff > Sl_7.gff
sed 's/NC_090807.1/chr8/' Sl_7.gff > Sl_8.gff
sed 's/NC_090808.1/chr9/' Sl_8.gff > Sl_9.gff
sed 's/NC_090809.1/chr10/' Sl_9.gff > Sl_10.gff
sed 's/NC_090810.1/chr11/' Sl_10.gff > Sl_11.gff
sed 's/NC_090811.1/chr12/' Sl_11.gff > Sl_12.gff
cp Sl_12.gff /home/jms53460


#!/bin/bash
#SBATCH --job-name=Sl_minimap_syri                                         # Job name
#SBATCH --partition=batch                                                  # Partition (queue) name
#SBATCH --ntasks=1                                                         # Single task job
#SBATCH --cpus-per-task=6                                                  # Number of cores per task
#SBATCH --mem=350gb                                                        # Total memory for job
#SBATCH --time=24:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/11_2024_Sl/Sl_minimap_syri.out          # Location of standard output file
#SBATCH --error=/scratch/jms53460/11_2024_Sl/Sl_minimap_syri.err           # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                       # Where to send mail
#SBATCH --mail-type=END,FAIL                                               # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/11_2024_Sl

ml minimap2/2.28-GCCcore-12.3.0
minimap2 -t 6 -ax asm10 --eqx Sl_genome_12.fa Sp_genome_12.fa > Sp_aligned_to_Sl_trim.sam

ml SyRI/1.6.3
syri -c Sp_aligned_to_Sl_trim.sam -r Sl_genome_12.fa -q Sp_genome_12.fa -k -F S


###Syri was not working when I was trying to run it before the break, but when I tried it again after returning, it worked. Maybe there was something in my environment messing things up before?

###Now I will convert the vcf to a tsv file and edit it to be a SNP file ready for SNPsplit

#!/bin/bash
#SBATCH --job-name=Sl_vcf2tsvpy                                           # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=1                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=6:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/11_2024_Sl/Zm_vcf2tsvpy.out        # Location of standard output file
#SBATCH --error=/scratch/jms53460/11_2024_Sl/Zm_vcf2tsvpy.err         # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/11_2024_Sl
ml Miniconda3/23.5.2-0
source activate /home/jms53460/vcf2tsvpy
vcf2tsvpy --input_vcf syri.vcf --out_tsv Sl_vcf_table.tsv 
conda deactivate


###Selected columns from the vcf_table
awk '{print $3,$1,$2,$6,$4,$5}' Sl_vcf_table.tsv OFS="\t" > Sl_variants.tsv
grep -i "chr" Sl_variants.tsv > Sl_variants2.tsv
grep -i "SNP" Sl_variants2.tsv > Sl_snps.tsv

###Alter the table to match required SNP file format
ml R/4.3.2-foss-2022b
R
Sl_snps <- read.csv("/scratch/jms53460/11_2024_Sl/Sl_snps.tsv", sep="")
Sl_SNPs = Sl_snps[,(1:4)]
Sl_SNPs[,5] = paste(Sl_snps[,5], "/", Sl_snps[,6], sep = "")
colnames(Sl_SNPs) = c("ID", "Chr", "Position", "SNP value", "Ref/SNP")
Sl_SNPs$"SNP value" = 1
write.table(Sl_SNPs, file = 'Sl_SNPs.tab', col.names = TRUE, row.names = FALSE, sep = '\t', quote = FALSE)
q()



#!/bin/bash
#SBATCH --job-name=Sl_nmask                                               # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=1                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=12:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/11_2024_Sl/Sl_nmask.out                # Location of standard output file
#SBATCH --error=/scratch/jms53460/11_2024_Sl/Sl_nmask.err                 # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/11_2024_Sl
ml BEDTools/2.30.0-GCC-12.2.0
bedtools maskfasta -fi Sl_genome_12.fa -fo Sl_N-masked_genome.fa -bed syri.vcf -fullHeader


cp Sl_N-masked_genome.fa /home/jms53460
cp Sl_SNPs.tab /home/jms53460


#!/bin/bash
#SBATCH --job-name=Sl_hisat2                                              # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                       # Total memory for job
#SBATCH --time=6:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/11_2024_Sl/Sl_hs2.out                  # Location of standard output file
#SBATCH --error=/scratch/jms53460/11_2024_Sl/Sl_hs2.err                   # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/11_2024_Sl

module load fastp/0.23.2-GCC-11.3.0
mkdir hisat2_out
for file in Demultiplexed/*s.fastq.gz; do
	file2="${file:14:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	fastp -w 6 -i "$file" -o "hisat2_out/""$file2"".fastq.gz" -y -x -3 -a AAAAAAAAAAAA

fi
done

ml HISAT2/3n-20201216-gompi-2022a
hisat2-build -p 6 Sl_N-masked_genome.fa Sl_N-masked_genome_index

ml SAMtools/1.16.1-GCC-11.3.0
for file in hisat2_out/*s.fastq.gz
do
	file2="${file:11:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	hisat2 -p 6 --dta -x Sl_N-masked_genome_index -U "hisat2_out/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out/""$file2""_unsorted.bam" -o "hisat2_out/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out/""$file2""_s.bam"
	
fi
done


cp Sl_N-masked_genome_index* /home/jms53460


###Running SNPsplit

#!/bin/bash
#SBATCH --job-name=SNPsplit                                                      # Job name
#SBATCH --partition=batch                                                           # Partition (queue) name
#SBATCH --ntasks=1                                                                  # Single task job
#SBATCH --cpus-per-task=6                                                           # Number of cores per task
#SBATCH --mem=50gb                                                                  # Total memory for job
#SBATCH --time=6:00:00                                                              # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/11_2024_Sl/SNPsplit.out                       # Location of standard output file
#SBATCH --error=/scratch/jms53460/11_2024_Sl/SNPsplit.err                        # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                                # Where to send mail
#SBATCH --mail-type=END,FAIL                                                        # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/11_2024_Sl
mkdir SNPsplit
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
for file in "hisat2_out/"*_s.bam
do
    file2="${file:11:-6}"

    SNPsplit --conflicting -o SNPsplit --snp_file Sl_SNPs.tab "$file"
    samtools sort -@ 6 SNPsplit/"$file2"_s.allele_flagged.bam -o SNPsplit/"$file2"_SNPsplit.bam
    
done

for file in "SNPsplit/"*_s.genome1.bam
do
    file2="${file:9:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit/"$file2"_SNPsplit_g1.bam
done

for file in "SNPsplit/"*_s.genome2.bam
do
    file2="${file:9:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit/"$file2"_SNPsplit_g2.bam
done


#!/bin/bash
#SBATCH --job-name=Features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=6:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/11_2024_Sl/Features_UMIs.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/11_2024_Sl/Features_UMIs.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/11_2024_Sl
mkdir featurecounts
mkdir bams
mkdir UMIcounts
mkdir UMIcounts_g1
mkdir UMIcounts_g2
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate /home/jms53460/subread-env

featureCounts -T 6 -s 1 -a Sl_12.gff -t 'gene' -g 'ID' -o featurecounts/read_counts.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a Sl_12.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g1.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a Sl_12.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g2.tab --readExtension5 500 -R BAM SNPsplit/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts/"*SNPsplit.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g1.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g1/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g2.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g2/${file2}.tsv"
    fi
done


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('Sl_12.gff', sep = '\t', quote = "")[,9], ';')
annots = annots[grep('ID=gene-', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('ID=', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('A267-277_S3_L002_', '', sub('_SNPsplit.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
D = B

files = dir('UMIcounts_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g1/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('A267-277_S3_L002_', '', sub('_SNPsplit_g1.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g1 = B

files = dir('UMIcounts_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g2/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('A267-277_S3_L002_', '', sub('_SNPsplit_g2.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g2 = B

genes = read.table('Sl_12.gff', sep = '\t', quote = "")[,c(1,5)]
annots2 = strsplit(read.table('Sl_12.gff', sep = '\t', quote = "")[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
annots2 = sub(';', '', sub(' ', '', unlist(lapply(annots2, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))
genes[,3] = annots2
genes2 = genes[grepl('ID=gene-', genes[,3]),]
genes = genes2[order(genes2[,2]),] #order by position
genes = genes[order(genes[,1]),] #order by chr
genes = genes[!duplicated(genes[,3]),]
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]

D = D[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]

save(D,g1,g2,genes, file = "11_2024_Sl.RData")
q()



###Copying this to my local computer
scp sapelo2:/scratch/jms53460/11_2024_Sl/11_2024_Sl.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'

###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('11_2024_Sl.RData')


plotCell2 = function (cell) 
{
    annotate_figure(ggarrange(plotChr(cell, chr = 1), plotChr(cell, 
        chr = 2), plotChr(cell, chr = 3), plotChr(cell, chr = 4), 
        plotChr(cell, chr = 5), plotChr(cell, chr = 6), plotChr(cell, chr = 7), plotChr(cell, chr = 8), 
        plotChr(cell, chr = 9), plotChr(cell, chr = 10), plotChr(cell, chr = 11), plotChr(cell, chr = 12),
        plotScaleBar, ncol = 1, nrow = 13, 
        align = "v", heights = c(rep(1, 12), 0.4)), left = text_grob("          % Transcripts from lycopersicum allele", 
        rot = 90, size = 10), top = cell)
}


BIN2 = function (xx, bin = 10^6) 
{
    bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1)))
    colnames(out2) = colnames(g1)
    rownames(out2) = names(out)
    return(out2)
}

genes[,1] = sub('chr', '', genes[, 1])

library(ggplot2)
library(ggpubr)
g1_bin = BIN2(g1)
g2_bin = BIN2(g2)
g1_frac = g1_bin/(g1_bin + g2_bin)
AlleleFrac = g1_frac
AlleleFrac[(g1_bin+g2_bin) < 10] = NA #remove bins with <10 genoinformative transcripts
#AlleleFrac2 = AlleleFrac[,which(colSums(is.na(AlleleFrac)) <= 50)]
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 5000)] ###5/32 pass >= 5000 or 10000

library('ComplexHeatmap')

FracMono = 100*colMeans(abs(AlleleFrac2 - .5) >= .3, na.rm=T)

Heatmap(AlleleFrac2, cluster_rows=F)                   
Heatmap(cor(D))



zcat Sl_genome.fa.gz | grep -n Solanum
gzip -d Sl_genome.fa.gz
cp Sl_genome.fa /scratch/jms53460/11_2024_Sl/
sed 's/NC_090800.*/chr1/' Sl_genome.fa > Sl_genome_1.fa
sed 's/NC_090801.*/chr2/' Sl_genome_1.fa > Sl_genome_2.fa
sed 's/NC_090802.*/chr3/' Sl_genome_2.fa > Sl_genome_3.fa
sed 's/NC_090803.*/chr4/' Sl_genome_3.fa > Sl_genome_4.fa
sed 's/NC_090804.*/chr5/' Sl_genome_4.fa > Sl_genome_5.fa
sed 's/NC_090805.*/chr6/' Sl_genome_5.fa > Sl_genome_6.fa
sed 's/NC_090806.*/chr7/' Sl_genome_6.fa > Sl_genome_7.fa
sed 's/NC_090807.*/chr8/' Sl_genome_7.fa > Sl_genome_8.fa
sed 's/NC_090808.*/chr9/' Sl_genome_8.fa > Sl_genome_9.fa
sed 's/NC_090809.*/chr10/' Sl_genome_9.fa > Sl_genome_10.fa
sed 's/NC_090810.*/chr11/' Sl_genome_10.fa > Sl_genome_11.fa
sed 's/NC_090811.*/chr12/' Sl_genome_11.fa > Sl_genome_12.fa
sed 's/NC_035963.*/chrM/' Sl_genome_12.fa > Sl_genome_13.fa
sed 's/NC_007898.*/chrC/' Sl_genome_13.fa > Sl_genome_14.fa


sed 's/NC_035963.1/chrM/' Sl_12.gff > Sl_13.gff
sed 's/NC_007898.3/chrC/' Sl_13.gff > Sl_14.gff

cp Sl_genome_14.fa /home/jms53460
cp Sl_14.gff /home/jms53460



#!/bin/bash
#SBATCH --job-name=Sl_nmask                                               # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=1                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=12:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/11_2024_Sl/Sl_nmask.out                # Location of standard output file
#SBATCH --error=/scratch/jms53460/11_2024_Sl/Sl_nmask.err                 # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/11_2024_Sl
ml BEDTools/2.30.0-GCC-12.2.0
bedtools maskfasta -fi Sl_genome_14.fa -fo Sl_N-masked_genome2.fa -bed syri.vcf -fullHeader


cp Sl_N-masked_genome2.fa /home/jms53460


#!/bin/bash
#SBATCH --job-name=Sl_hisat2                                              # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                       # Total memory for job
#SBATCH --time=6:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/11_2024_Sl/Sl_hs2.out                  # Location of standard output file
#SBATCH --error=/scratch/jms53460/11_2024_Sl/Sl_hs2.err                   # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/11_2024_Sl

#module load fastp/0.23.2-GCC-11.3.0
mkdir hisat2_out2
cp hisat2_out/*fastq.gz hisat2_out2
#for file in Demultiplexed/*s.fastq.gz; do
#	file2="${file:14:-9}"

#if [ ! -f "hisat2_out/""$file2"".bam" ]; then

#	fastp -w 6 -i "$file" -o "hisat2_out/""$file2"".fastq.gz" -y -x -3 -a AAAAAAAAAAAA

#fi
#done

ml HISAT2/3n-20201216-gompi-2022a
hisat2-build -p 6 Sl_N-masked_genome2.fa Sl_N-masked_genome2_index

ml SAMtools/1.16.1-GCC-11.3.0
for file in hisat2_out2/*s.fastq.gz
do
	file2="${file:12:-9}"

if [ ! -f "hisat2_out2/""$file2"".bam" ]; then

	hisat2 -p 6 --dta -x Sl_N-masked_genome2_index -U "hisat2_out2/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out2/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out2/""$file2""_unsorted.bam" -o "hisat2_out2/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out2/""$file2""_s.bam"
	
fi
done


cp Sl_N-masked_genome2* /home/jms53460


###Running SNPsplit

#!/bin/bash
#SBATCH --job-name=SNPsplit                                                      # Job name
#SBATCH --partition=batch                                                           # Partition (queue) name
#SBATCH --ntasks=1                                                                  # Single task job
#SBATCH --cpus-per-task=6                                                           # Number of cores per task
#SBATCH --mem=50gb                                                                  # Total memory for job
#SBATCH --time=6:00:00                                                              # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/11_2024_Sl/SNPsplit.out                       # Location of standard output file
#SBATCH --error=/scratch/jms53460/11_2024_Sl/SNPsplit.err                        # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                                # Where to send mail
#SBATCH --mail-type=END,FAIL                                                        # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/11_2024_Sl
mkdir SNPsplit2
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
for file in "hisat2_out2/"*_s.bam
do
    file2="${file:12:-6}"

    SNPsplit --conflicting -o SNPsplit2 --snp_file Sl_SNPs.tab "$file"
    samtools sort -@ 6 SNPsplit2/"$file2"_s.allele_flagged.bam -o SNPsplit2/"$file2"_SNPsplit.bam
    
done

for file in "SNPsplit2/"*_s.genome1.bam
do
    file2="${file:10:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit2/"$file2"_SNPsplit_g1.bam
done

for file in "SNPsplit2/"*_s.genome2.bam
do
    file2="${file:10:-14}"
    samtools sort -@ 6 "$file" -o SNPsplit2/"$file2"_SNPsplit_g2.bam
done


#!/bin/bash
#SBATCH --job-name=Features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=6:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/11_2024_Sl/Features_UMIs.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/11_2024_Sl/Features_UMIs.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/11_2024_Sl
mkdir featurecounts2
mkdir bams2
mkdir UMIcounts2
mkdir UMIcounts2_g1
mkdir UMIcounts2_g2
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate /home/jms53460/subread-env

featureCounts -T 6 -s 1 -a Sl_14.gff -t 'gene' -g 'ID' -o featurecounts2/read_counts.tab --readExtension5 500 -R BAM SNPsplit2/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a Sl_14.gff -t 'gene' -g 'ID' -o featurecounts2/read_counts_g1.tab --readExtension5 500 -R BAM SNPsplit2/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a Sl_14.gff -t 'gene' -g 'ID' -o featurecounts2/read_counts_g2.tab --readExtension5 500 -R BAM SNPsplit2/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts2/"*SNPsplit.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts2/${file2}.tsv"
    fi
done

for file in "featurecounts2/"*g1.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts2_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts2_g1/${file2}.tsv"
    fi
done

for file in "featurecounts2/"*g2.bam*
do
    file2="${file:15:-22}"
    if [ ! -f "UMIcounts2_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams2/$file2"
        samtools index "bams2/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams2/$file2" -S "UMIcounts2_g2/${file2}.tsv"
    fi
done


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('Sl_14.gff', sep = '\t', quote = "")[,9], ';')
annots = annots[grep('ID=gene-', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('ID=', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts2/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('A267-277_S3_L002_', '', sub('_SNPsplit.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
D = B

files = dir('UMIcounts2_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts2_g1/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('A267-277_S3_L002_', '', sub('_SNPsplit_g1.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g1 = B

files = dir('UMIcounts2_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts2_g2/', f, sep = ''), sep = '\t', quote="", header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('A267-277_S3_L002_', '', sub('_SNPsplit_g2.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g2 = B

genes = read.table('Sl_14.gff', sep = '\t', quote = "")[,c(1,5)]
annots2 = strsplit(read.table('Sl_14.gff', sep = '\t', quote = "")[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
annots2 = sub(';', '', sub(' ', '', unlist(lapply(annots2, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))
genes[,3] = annots2
genes2 = genes[grepl('ID=gene-', genes[,3]),]
genes = genes2[order(genes2[,2]),] #order by position
genes = genes[order(genes[,1]),] #order by chr
genes = genes[!duplicated(genes[,3]),]
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]

D = D[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]

save(D,g1,g2,genes, file = "11_2024_Sl_2.RData")
q()



###Copying this to my local computer
scp sapelo2:/scratch/jms53460/11_2024_Sl/11_2024_Sl_2.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'

###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('11_2024_Sl_2.RData')
