qlogin #I do this every time I log onto the cluster

###Rerunning SNPsplit_genome_preparation so I can keep the chloroplast and mitochondria sequences this time (I discarded them last time)

#!/bin/bash
#SBATCH --job-name=At_SNPsplit_genome_prep                                # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=1                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=6:00:00                                                    # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/4_2024_At_Spike_ins/At_SNPsplit_gp.out # Location of standard output file
#SBATCH --error=/scratch/jms53460/4_2024_At_Spike_ins/At_SNPsplit_gp.err  # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/4_2024_At_Spike_ins
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1

SNPsplit_genome_preparation --vcf_file At_vcf.gz --reference_genome Col_genome_dir --strain Ler_0 --skip_filtering --genome_build Col


###Merge the N-masked chromosome files
cd /scratch/jms53460/4_2024_At_Spike_ins
cat Ler_0_N-masked/*.fa >> Ler_0_N-masked/merged.fa
grep 'N' Ler_0_N-masked/merged.fa | head
grep '>' Ler_0_N-masked/merged.fa | head #looks like it worked
#Note: NC_037304.1 Arabidopsis thaliana ecotype Col-0 mitochondrion, complete genome
#Note: NC_000932.1 Arabidopsis thaliana chloroplast, complete genome


cp -r /scratch/jms53460/4_2024_At_Spike_ins/Ler_0_N-masked /home/jms53460
mkdir /scratch/jms53460/7-8_2024_At
cp -r /home/jms53460/Ler_0_N-masked /scratch/jms53460/7-8_2024_At
cp /home/jms53460/CELSeq_barcodes.txt /scratch/jms53460/7-8_2024_At/
mkdir /scratch/jms53460/7-8_2024_At/Raw_Data

cp /scratch/jms53460/4_2024_At_Spike_ins/TAIR10.1_Col_5.gff /scratch/jms53460/7-8_2024_At


###Downloaded raw data from Duke onto the cluster

#Checked that the i7 XGEN sequences match what I expect with zcat (R1 file) | head
A182-193: 2H ATCCAGAG
A194-205: 4D GATTACCG
A206-217: 4E GCACAACT
A218-229: 4F GCGTCATT
A230-241: 4G ATCCGGTA
A242-253: 4H CGTTGCAA

###Install fastq-multx
ml Miniconda3/23.5.2-0
conda create -p /scratch/jms53460/7-8_2024_At/Fastq-Multx -c bioconda fastq-multx -y 
source activate /scratch/jms53460/7-8_2024_At/Fastq-Multx
fastq-multx
conda deactivate


ml purge
ml Miniconda3/4.12.0
conda create -p subread-env -y
source activate ./subread-env/
conda install -c bioconda subread -y
subread-align
conda deactivate


###Demultiplex the raw data

#!/bin/bash
#SBATCH --job-name=At_demultiplex                                         # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=100gb                                                       # Total memory for job
#SBATCH --time=12:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7-8_2024_At/At_dm.out                  # Location of standard output file
#SBATCH --error=/scratch/jms53460/7-8_2024_At/At_dm.err                   # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7-8_2024_At
mkdir Demultiplexed
ml Miniconda3/23.5.2-0
source activate /scratch/jms53460/7-8_2024_At/Fastq-Multx

for file in Raw_Data/*_R1_*.gz; do
    filename=$(basename "$file")
    file2=$(echo "$filename" | sed 's/_R1.*//' | sed 's/_R2_001.fastq.gz//')

    if [ ! -f "Demultiplexed/""$file2""_dT-1s.fastq.gz" ]; then
        module load fastp/0.23.2-GCC-11.3.0
	    fastp -w 6 -i "$file" -I "Raw_Data/""$file2""_R2_001.fastq.gz" -o "Demultiplexed/umi_""$file2""_R1.fastq.gz" -O "Demultiplexed/umi_""$file2""_R2.fastq.gz" -A -Q -L -G --umi --umi_loc read2 --umi_len 10 --umi_prefix UMI

	    fastq-multx -b -B "CELSeq_barcodes.txt" -m 0 "Demultiplexed/umi_""$file2""_R2.fastq.gz" "Demultiplexed/umi_""$file2""_R1.fastq.gz" -o "Demultiplexed/""$file2""_%_R2.fastq.gz" "Demultiplexed/""$file2""_%.fastq.gz"  # Split read 2 file by CELseq barcodes. Require perfect match to barcode in expected location

	    find "Demultiplexed/" -name "umi_*" -delete
	    find "Demultiplexed/" -name "*_R2*" -delete
    fi
done
conda deactivate

ml HISAT2/3n-20201216-gompi-2022a
hisat2-build -p 6 Ler_0_N-masked/merged.fa Ler_0_N-masked/merged_hisat2_index
mkdir hisat2_out

for file in "Demultiplexed/"*.fastq*
do
	file2="${file:14:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	module load fastp/0.23.2-GCC-11.3.0
	fastp -w 6 -i "$file" -o "hisat2_out/""$file2"".fastq.gz" -y -x -3 -a AAAAAAAAAAAA

fi
done


###Takes ~30 mins per file pair (set of 96)


#Map to genome (hisat2), .bam output (samtools view), sort (samtools sort), index (samtools index)

#!/bin/bash
#SBATCH --job-name=At_hisat2                                              # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=50gb                                                        # Total memory for job
#SBATCH --time=24:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7-8_2024_At/At_hs2.out                 # Location of standard output file
#SBATCH --error=/scratch/jms53460/7-8_2024_At/At_hs2.err                  # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7-8_2024_At
ml HISAT2/3n-20201216-gompi-2022a
ml SAMtools/1.16.1-GCC-11.3.0
for file in "hisat2_out/"*s.fastq*
do
	file2="${file:11:-9}"

if [ ! -f "hisat2_out/""$file2"".bam" ]; then

	hisat2 -p 6 --dta -x Ler_0_N-masked/merged_hisat2_index -U "hisat2_out/""$file2"".fastq.gz" | samtools view -bS -> "hisat2_out/""$file2""_unsorted.bam"
	samtools sort -@ 6 "hisat2_out/""$file2""_unsorted.bam" -o "hisat2_out/""$file2""_s.bam"
    samtools index -@ 6 "hisat2_out/""$file2""_s.bam"
	
fi
done


###Takes ~20 mins per set of 96


cp /scratch/jms53460/4_2024_At_Spike_ins/Ler_SNPs.tab .

###Running SNPsplit

#!/bin/bash
#SBATCH --job-name=At_SNPsplit_stringtie                                            # Job name
#SBATCH --partition=batch                                                           # Partition (queue) name
#SBATCH --ntasks=1                                                                  # Single task job
#SBATCH --cpus-per-task=6                                                           # Number of cores per task
#SBATCH --mem=50gb                                                                  # Total memory for job
#SBATCH --time=12:00:00                                                             # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7-8_2024_At/At_SNPsplit_stringtie.out            # Location of standard output file
#SBATCH --error=/scratch/jms53460/7-8_2024_At/At_SNPsplit_stringtie.err             # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                                # Where to send mail
#SBATCH --mail-type=END,FAIL                                                        # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7-8_2024_At
ml SAMtools/1.16.1-GCC-11.3.0
ml SNPsplit/0.6.0-GCC-11.3.0-Perl-5.34.1
for file in "hisat2_out/"*_s.bam
do
    file2="${file:11:-6}"

    SNPsplit --conflicting -o At_SNPsplit --snp_file Ler_SNPs.tab "$file"
    samtools sort -@ 6 At_SNPsplit/"$file2"_s.allele_flagged.bam -o At_SNPsplit/"$file2"_SNPsplit.bam
    
done

for file in "At_SNPsplit/"*_s.genome1.bam
do
    file2="${file:12:-14}"
    samtools sort -@ 6 "$file" -o At_SNPsplit/"$file2"_SNPsplit_g1.bam
done

for file in "At_SNPsplit/"*_s.genome2.bam
do
    file2="${file:12:-14}"
    samtools sort -@ 6 "$file" -o At_SNPsplit/"$file2"_SNPsplit_g2.bam
done

ml StringTie/2.2.1-GCC-11.3.0
for file in "hisat2_out/"*_s.bam
do
    file2="${file:11:-6}"

    stringtie At_SNPsplit/"$file2"_SNPsplit.bam -p 6 -G TAIR10.1_Col_5.gff --rf -o stringtie_out/"$file2".gtf
done    


#Merge stringtie transcripts
ls -1 "stringtie_out/"*.gtf | gawk '{print $0}' > mergelist.txt
# Merge GTF files
stringtie --merge -p 6 -G TAIR10.1_Col_5.gff -o "stringtie_out/stringtie_merged.gtf" mergelist.txt


###Stringtie was not working how I expected (no gtf files or mergelist were made but the merged gtf appeared)
###I realized I don't need it anyways so I stopped the script and continued with the next step


#!/bin/bash
#SBATCH --job-name=At_features_UMIs                                           # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=12:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7-8_2024_At/At_features_UMIs.out           # Location of standard output file
#SBATCH --error=/scratch/jms53460/7-8_2024_At/At_features_UMIs.err            # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7-8_2024_At
mkdir featurecounts
mkdir bams
mkdir UMIcounts
mkdir UMIcounts_g1
mkdir UMIcounts_g2
ml purge_dups/1.2.5-foss-2021b
ml Miniconda3/23.5.2-0
source activate ./subread-env/

featureCounts -T 6 -s 1 -a TAIR10.1_Col_5.gff -t 'gene' -g 'ID' -o featurecounts/read_counts.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit.bam
featureCounts -T 6 -s 1 -a TAIR10.1_Col_5.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g1.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit_g1.bam
featureCounts -T 6 -s 1 -a TAIR10.1_Col_5.gff -t 'gene' -g 'ID' -o featurecounts/read_counts_g2.tab --readExtension5 500 -R BAM At_SNPsplit/*_SNPsplit_g2.bam

conda deactivate

for file in "featurecounts/"*SNPsplit.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g1.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g1/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g1/${file2}.tsv"
    fi
done

for file in "featurecounts/"*g2.bam*
do
    file2="${file:14:-22}"
    if [ ! -f "UMIcounts_g2/${file2}.tsv" ]; then

        module load SAMtools/1.16.1-GCC-11.3.0
        samtools sort -@ 6 "$file" -o "bams/$file2"
        samtools index "bams/$file2"

        module load UMI-tools/1.1.2-foss-2022a-Python-3.10.4
        umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS -I "bams/$file2" -S "UMIcounts_g2/${file2}.tsv"
    fi
done


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('TAIR10.1_Col_5.gff', sep = '\t')[,9], ';')
annots = annots[grep('ID=gene-', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('ID=', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit.tsv', '', files))
A[is.na(A)] = 0
A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
C = B

files = dir('UMIcounts_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g1/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g1.tsv', '', files))
A[is.na(A)] = 0
A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g1 = B

files = dir('UMIcounts_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g2/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g2.tsv', '', files))
A[is.na(A)] = 0
A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g2 = B

genes = read.table('TAIR10.1_Col_5.gff', sep = '\t')[,c(1,5)]
annots2 = strsplit(read.table('TAIR10.1_Col_5.gff', sep = '\t')[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
annots2 = sub(';', '', sub(' ', '', unlist(lapply(annots2, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))
genes[,3] = annots2
genes2 = genes[grepl('ID=gene-', genes[,3]),]
genes = genes2[order(genes2[,3]),]
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]

save(C,g1,g2,genes, file = "7-8_2024_At.RData")
q()


###Copying this to my local computer
scp sapelo2:/scratch/jms53460/7-8_2024_At/7-8_2024_At.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'


###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('7-8_2024_At.RData')

plotCell2 = function (cell) 
{
    annotate_figure(ggarrange(plotChr(cell, chr = 1), plotChr(cell, 
        chr = 2), plotChr(cell, chr = 3), plotChr(cell, chr = 4), 
        plotChr(cell, chr = 5), plotScaleBar, ncol = 1, nrow = 6, 
        align = "v", heights = c(rep(1, 5), 0.4)), left = text_grob("          % Transcripts from Col-0 allele", 
        rot = 90, size = 10), top = cell)
}

library(readxl)
X7_8_2024_At_Stages <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/7-8_2024_At_Stages.xlsx")
View(X7_8_2024_At_Stages)

At_Stages <- X7_8_2024_At_Stages[rep(row.names(X7_8_2024_At_Stages), times = 8), ]
library(tidyverse)
At_Stages = arrange(At_Stages, Bud_order)
At_Stages$Sample = c(paste(rep('A155-168_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A182-193_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A194-205_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A206-217_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A218-229_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A230-241_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A242-253_', times = 96), 1:96, rep('s', times=96), sep=''))
stages = as.character(At_Stages$Stage)
stages = factor(stages, levels = c('UM', 'UM/BM', 'BM', 'BM/Tri', 'Tri'))

genes1 = genes[which(genes[,1] == 1),]
genes1 = genes1[order(genes1[,2]),]
genes2 = genes[which(genes[,1] == 2),]
genes2 = genes2[order(genes2[,2]),]
genes3 = genes[which(genes[,1] == 3),]
genes3 = genes3[order(genes3[,2]),]
genes4 = genes[which(genes[,1] == 4),]
genes4 = genes4[order(genes4[,2]),]
genes5 = genes[which(genes[,1] == 5),]
genes5 = genes5[order(genes5[,2]),]
genes = rbind(genes1, genes2, genes3, genes4, genes5)

g1_new = as.data.frame(matrix(data=0, nrow = nrow(genes), ncol = ncol(C)))
rownames(g1_new) = rownames(genes)
colnames(g1_new) = colnames(C)
g1_new[which(rownames(genes) %in% rownames(g1)),] = g1[which(rownames(g1) %in% rownames(genes)),]

g2_new = as.data.frame(matrix(data=0, nrow = nrow(genes), ncol = ncol(C)))
rownames(g2_new) = rownames(genes)
colnames(g2_new) = colnames(C)
g2_new[which(rownames(genes) %in% rownames(g2)),] = g2[which(rownames(g2) %in% rownames(genes)),]

colnames(g1_new) = sub('_S94', '', colnames(g1_new))
colnames(g1_new) = sub('_S33_L005', '', colnames(g1_new))
colnames(g1_new) = sub('_S34_L005', '', colnames(g1_new))
colnames(g1_new) = sub('_S35_L005', '', colnames(g1_new))
colnames(g1_new) = sub('_S36_L005', '', colnames(g1_new))
colnames(g1_new) = sub('_S37_L005', '', colnames(g1_new))
colnames(g1_new) = sub('_S38_L005', '', colnames(g1_new))
colnames(g2_new) = colnames(g1_new)
colnames(C) = colnames(g1_new)
g1_new = g1_new[,At_Stages$Sample]
g2_new = g2_new[,At_Stages$Sample]
C = C[,At_Stages$Sample]

hist(colSums(C), breaks=5000) #Most samples have very few UMIs. There might be a hint of separation around 12,000 UMIs
abline(v=12000)

#Cells are labeled by 96-cell batch and cell barcode. (A155-168_10s)
#Batches: A155-168, A182-193, A194-205, A206-217, A218-229, A230-241, A242-253

BIN2 = function (xx, bin = 10^6) 
{
    bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1_new)))
    colnames(out2) = colnames(g1_new)
    rownames(out2) = names(out)
    return(out2)
}

library(ggplot2)
library(ggpubr)
g1_bin = BIN2(g1_new)
g2_bin = BIN2(g2_new)
g1_frac = g1_bin/(g1_bin + g2_bin)
AlleleFrac = g1_frac
AlleleFrac[(g1_bin+g2_bin) < 10] = NA #remove bins with <10 genoinformative transcripts
AlleleFrac2 = AlleleFrac[,which(colSums(is.na(AlleleFrac)) <= 50)]

summary(colSums(C[,colnames(AlleleFrac2)])) #UMIs per sample
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   3820    6582    9224   14390   15657   88262

summary(colSums(C[,colnames(AlleleFrac2)] > 0))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1650    2596    3108    3319    3897    6357

plotCell2('A155-168_61s')

library('ComplexHeatmap')

Heatmap(cor(AlleleFrac2, use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Heatmap(cor(AlleleFrac2[,names(which(colSums(C) >= 10000))], use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Heatmap(cor(AlleleFrac2[,names(which(colSums(C) >= 20000))], use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))

svg('AlleleFrac2_cor.svg', width = 30, height = 30)
Heatmap(cor(AlleleFrac2, use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T)
dev.off()

#Plotting the ones that are highly correlated together. 
svg('7-8_2024_At_correlated_AlleleFrac2.svg', width = 60, height = 8)
ggarrange(plotCell2('A155-168_26s'), plotCell2('A218-229_68s'), plotCell2('A218-229_48s'), plotCell2('A230-241_47s'), plotCell2('A194-205_75s'), plotCell2('A194-205_7s'), plotCell2('A206-217_21s'), plotCell2('A182-193_48s'), plotCell2('A194-205_19s'), plotCell2('A242-253_5s'), plotCell2('A155-168_28s'), plotCell2('A194-205_86s'), plotCell2('A182-193_53s'), plotCell2('A218-229_44s'), plotCell2('A182-193_55s'), plotCell2('A218-229_86s'), plotCell2('A218-229_62s'), plotCell2('A218-229_60s'), plotCell2('A155-168_77s'), plotCell2('A230-241_85s'), plotCell2('A182-193_85s'), plotCell2('A194-205_77s'), plotCell2('A194-205_78s'), plotCell2('A155-168_61s'), plotCell2('A182-193_25s'), plotCell2('A218-229_12s'), plotCell2('A230-241_32s'), plotCell2('A194-205_79s'), plotCell2('A206-217_64s'), plotCell2('A182-193_60s'), plotCell2('A230-241_55s'), ncol = 31, align = 'v')
dev.off()

svg('7-8_2024_At_example_chr_plots.svg', width = 15, height = 6)
ggarrange(plotCell2('A194-205_44s'), plotCell2('A194-205_86s'), plotCell2('A182-193_60s'), plotCell2('A218-229_19s'), plotCell2('A242-253_61s'), plotCell2('A230-241_90s'), ncol = 6, align = 'v')
dev.off()


FracMono = 100*colMeans(abs(AlleleFrac2 - .5) >= .3, na.rm=T)
FracMono_over10000 = 100*colMeans(abs(AlleleFrac2[,names(which(colSums(C) >= 10000))] - .5) >= .3, na.rm=T)
FracMono_over20000 =100*colMeans(abs(AlleleFrac[,names(which(colSums(C) >= 20000))] - .5) >= .3, na.rm=T)

Heatmap(FracMono, name = 'FracMono', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Heatmap(FracMono_over10000, name = 'FracMono', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Heatmap(FracMono_over20000, name = 'FracMono', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))

ratio = AlleleFrac
ratio[(g1_bin+g2_bin) < 10] = NA  # Remove measurements with under 10 genoinformative transcripts
ord_ratio = ratio[,order(stages)]
ord_ratio2 = ord_ratio[,which(colSums(is.na(ord_ratio)) <= 50)]
ord_ratio_mono = 100*colMeans(abs(ord_ratio2 - .5) >= .3, na.rm=T)
ord_ratio_mono_over10000 = 100*colMeans(abs(ord_ratio2[,names(which(colSums(C[,order(stages)]) >= 10000))] - .5) >= .3, na.rm=T)
ord_ratio_mono_over12000 = 100*colMeans(abs(ord_ratio2[,names(which(colSums(C[,order(stages)]) >= 12000))] - .5) >= .3, na.rm=T)
ord_ratio_mono_over20000 = 100*colMeans(abs(ord_ratio2[,names(which(colSums(C[,order(stages)]) >= 20000))] - .5) >= .3, na.rm=T)


Heatmap(ord_ratio2, name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
Heatmap(ord_ratio_mono, name = 'FracMono', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)
Heatmap(ord_ratio_mono_over10000, name = 'FracMono', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)
Heatmap(ord_ratio_mono_over12000, name = 'FracMono', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)
Heatmap(ord_ratio_mono_over20000, name = 'FracMono', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)

FracMono = 100*colMeans(abs(AlleleFrac2 - .5) >= .3, na.rm=T)

ord_AlleleFrac = AlleleFrac[,order(stages)]
ord_FracMono = 100*colMeans(abs(ord_AlleleFrac - .5) >= .3, na.rm=T)
ord_FracMono_over10000 = 100*colMeans(abs(ord_AlleleFrac[,(which(colSums(C[,order(stages)]) >= 10000))] - .5) >= .3, na.rm=T)
ord_FracMono_over20000 =100*colMeans(abs(ord_AlleleFrac[,names(which(colSums(C[,order(stages)]) >= 20000))] - .5) >= .3, na.rm=T)

Heatmap(AlleleFrac2, name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
Heatmap(AlleleFrac2[,which(colnames(AlleleFrac2) %in% At_Stages$Sample[which(At_Stages$Stage == 'UMe')])], name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)
Heatmap(AlleleFrac2[,which(colnames(AlleleFrac2) %in% At_Stages$Sample[which(At_Stages$Stage == 'UM')])], name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)
Heatmap(AlleleFrac2[,which(colnames(AlleleFrac2) %in% At_Stages$Sample[which(At_Stages$Stage == 'UM/BM')])], name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)
Heatmap(AlleleFrac2[,which(colnames(AlleleFrac2) %in% At_Stages$Sample[which(At_Stages$Stage == 'BM')])], name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)
Heatmap(AlleleFrac2[,which(colnames(AlleleFrac2) %in% At_Stages$Sample[which(At_Stages$Stage == 'BM/Tri')])], name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)
Heatmap(AlleleFrac2[,which(colnames(AlleleFrac2) %in% At_Stages$Sample[which(At_Stages$Stage == 'Tri')])], name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)

Heatmap(ord_AlleleFrac, name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
Heatmap(ord_AlleleFrac[,which(colnames(ord_AlleleFrac) %in% colnames(AlleleFrac2))], name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)

Heatmap(cor(ord_AlleleFrac, use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
Heatmap(cor(ord_AlleleFrac[,which(colnames(ord_AlleleFrac) %in% colnames(AlleleFrac2))], use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)

Heatmap(ord_FracMono, name = 'FracMono', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)
svg('ord_FracMono_in_AlleleFrac2.svg', width = 5, height = 30)
Heatmap(ord_FracMono[which(colnames(ord_AlleleFrac) %in% colnames(AlleleFrac2))], name = 'FracMono', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)
dev.off()
Heatmap(ord_FracMono_over10000, name = 'FracMono', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)
Heatmap(ord_FracMono_over20000, name = 'FracMono', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)

Mono_Allele_Frac = ord_AlleleFrac[,which(names(ord_FracMono) %in% names(which(FracMono > 70)))]
Mono_Allele_Frac_UM = Mono_Allele_Frac[,which(colnames(Mono_Allele_Frac) %in% At_Stages$Sample[which(At_Stages$Stage == 'UM')])]
Mono_Allele_Frac_BM = Mono_Allele_Frac[,which(colnames(Mono_Allele_Frac) %in% At_Stages$Sample[which(At_Stages$Stage == 'BM')])]
Mono_Allele_Frac_Tri = Mono_Allele_Frac[,which(colnames(Mono_Allele_Frac) %in% At_Stages$Sample[which(At_Stages$Stage == 'Tri')])]

Heatmap(Mono_Allele_Frac, name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
Heatmap(Mono_Allele_Frac_UM, name = 'AlleleFrac_UM', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)
Heatmap(Mono_Allele_Frac_BM, name = 'AlleleFrac_BM', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)
Heatmap(Mono_Allele_Frac_Tri, name = 'AlleleFrac_Tri', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)

Heatmap(rowMeans(Mono_Allele_Frac, na.rm=T), name = 'Allele_bias', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
Heatmap(rowMeans(Mono_Allele_Frac_UM, na.rm=T), name = 'Allele_UM_bias', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)
Heatmap(rowMeans(Mono_Allele_Frac_BM, na.rm=T), name = 'Allele_BM_bias', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)
Heatmap(rowMeans(Mono_Allele_Frac_Tri, na.rm=T), name = 'Allele_Tri_bias', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=T)
Allele_bias = as.matrix(data.frame(bias = rowMeans(Mono_Allele_Frac, na.rm=T), 
    UM_bias = rowMeans(Mono_Allele_Frac_UM, na.rm=T),
    BM_bias = rowMeans(Mono_Allele_Frac_BM, na.rm=T),
    Tri_bias = rowMeans(Mono_Allele_Frac_Tri, na.rm=T)))
Heatmap(Allele_bias, name = 'Allele_bias', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)

head(200*(abs(Mono_Allele_Frac - .5)))
Heatmap(rowMeans(200*(abs(Mono_Allele_Frac - .5)), na.rm=T), name = 'Mono_bias', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
Heatmap(rowMeans(200*(abs(Mono_Allele_Frac_UM - .5)), na.rm=T), name = 'Mono_UM_bias', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
Heatmap(rowMeans(200*(abs(Mono_Allele_Frac_BM - .5)), na.rm=T), name = 'Mono_BM_bias', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
Heatmap(rowMeans(200*(abs(Mono_Allele_Frac_Tri - .5)), na.rm=T), name = 'Mono_Tri_bias', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
Mono_bias = as.matrix(data.frame(bias = rowMeans(200*(abs(Mono_Allele_Frac - .5)), na.rm=T), 
    UM_bias = rowMeans(200*(abs(Mono_Allele_Frac_UM - .5)), na.rm=T),
    BM_bias = rowMeans(200*(abs(Mono_Allele_Frac_BM - .5)), na.rm=T),
    Tri_bias = rowMeans(200*(abs(Mono_Allele_Frac_Tri - .5)), na.rm=T)))
Heatmap(Mono_bias, name = 'Mono_bias', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)


for (x in names(ord_FracMono_over20000)){
    print(paste('plotCell2(', x, ')', ',', sep=''))
}


ratio = AlleleFrac
binUse = which(abs(rowMeans(g1_bin/(g1_bin+g2_bin), na.rm=T) - .5) < .4)  # Exclude bins with >90% of all transcripts mapping to the same allele across all samples

ratioHist = function(cell = NULL, vals = NULL) {
	if (is.null(vals)) { vals = ratio[,paste(cell)] } 
	gghistogram(data.frame(ratio = vals[binUse]), x = 'ratio', fill = 'black', bins = 15) + theme(strip.background = element_blank(), strip.text.x = element_blank(), legend.position = 'none') + scale_y_continuous(expand = c(0,0)) + xlab('% Transcripts with Col-0 allele') + ylab('Genes') + scale_x_continuous(breaks = seq(0,1,.1), labels=c('0', rep('',4), '0.5', rep('',4), '1.0')) }

ratioHist('A242-253_13s')

hist(AlleleFrac)

svg('FracMono_hist.svg', width=3.5, height=4)
hist(FracMono, xlab = '% of bins with monoallelic expression', ylab = '# of samples', main = 'Monoallelic expression in 
Arabidopsis pollen precursors')
dev.off()

svg('AlleleFrac_hist.svg', width=3.5, height=4)
hist(AlleleFrac2, xlab = 'Fraction of transcripts
from Col-0 allele', ylab = '# of bins', main = 'All samples')
dev.off()

svg('AlleleFrac_UM_hist.svg', width=3.5, height=4)
hist(AlleleFrac2[,which(colnames(AlleleFrac2) %in% At_Stages$Sample[which(At_Stages$Stage == 'UM')])], xlab = 'Fraction of transcripts
from Col-0 allele', ylab = '# of bins', main = 'Unicellular microspores')
dev.off()

svg('AlleleFrac_BM_hist.svg', width=3.5, height=4)
hist(AlleleFrac2[,which(colnames(AlleleFrac2) %in% At_Stages$Sample[which(At_Stages$Stage == 'BM')])], xlab = 'Fraction of transcripts
from Col-0 allele', ylab = '# of bins', main = 'Bicellular microspores')
dev.off()

svg('AlleleFrac_Tri_hist.svg', width=3.5, height=4)
hist(AlleleFrac2[,which(colnames(AlleleFrac2) %in% At_Stages$Sample[which(At_Stages$Stage == 'Tri')])], xlab = 'Fraction of transcripts
from Col-0 allele', ylab = '# of bins', main = 'Tricellular pollen')
dev.off()



hist(AlleleFrac2[,which(colnames(AlleleFrac2) %in% At_Stages$Sample[which(At_Stages$Stage == 'UM')])])
hist(AlleleFrac2[,which(colnames(AlleleFrac2) %in% At_Stages$Sample[which(At_Stages$Stage == 'BM')])])
hist(AlleleFrac2[,which(colnames(AlleleFrac2) %in% At_Stages$Sample[which(At_Stages$Stage == 'Tri')])])




Heatmap(cor(ratio[which(abs(rowMeans(g1_bin/(g1_bin+g2_bin), na.rm=T) - .5) < .4),], use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
Heatmap(cor(ratio[which(abs(rowMeans(g1_bin/(g1_bin+g2_bin), na.rm=T) - .5) < .4),which(colSums(C) >= 10000)], use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac_cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))


pseudocount = 1*10^6/quantile(colSums(C), p = .1)
minmax = function(x) {
	sweep(x - log(pseudocount, 10), 1, apply(x - log(pseudocount, 10), 1, max), '/')
}

A2 = sweep(C, 2, colSums(C), '/')*10^6  # Transcripts per million normalization
A2b = log(A2+pseudocount,10)  # Log transform
A3 = A2b[rowSums(A2[,colnames(AlleleFrac2)] > 0) >= 20,colnames(AlleleFrac2)]
A3 = A3[rank(-apply(A3,1,sd)) <= 1000,]
PCs = prcomp(t(A3))

Heatmap(cor(A2b, use = 'pairwise.complete.obs', method = 'pearson'), name = 'norm_log_UMIs', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T)
svg('ord_A2b_in_AlleleFrac2.svg', width = 30, height = 30)
Heatmap(cor(A2b[,colnames(ord_AlleleFrac[,which(colnames(ord_AlleleFrac) %in% colnames(AlleleFrac2))])], use = 'pairwise.complete.obs', method = 'pearson'), name = 'norm_log_UMIs', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
dev.off()

###
ords = order(PCs$x[,1])
library('seriation')

#From Brad's code:
o1 = seriate(dist(t(scale(t(A3[,ords]))), method = "OLO"))
o1 = seriate(dist(A3[,ords]), method = "OLO")
o2 = seriate(dist(t(A3[,ords])), method = "OLO")
Heatmap(cor(A3[,ords], use = 'pairwise.complete.obs', method = 'pearson'), name = 'norm_log_UMIs', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono[ords], UMIcounts = log(colSums(C[,colnames(AlleleFrac2)][,ords]),10),
    Stage = At_Stages$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))][ords],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), row_order = get_order(t(o2)), column_order = get_order(o2), show_row_names = FALSE, show_column_names = FALSE)

Heatmap(cor(A3[,ords], use = 'pairwise.complete.obs', method = 'pearson'), name = 'norm_log_UMIs', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono[ords], UMIcounts = log(colSums(C[,colnames(AlleleFrac2)][,ords]),10),
    Stage = At_Stages$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))][ords],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), show_row_names = FALSE, show_column_names = FALSE, row_dend_reorder = TRUE, column_dend_reorder = TRUE)



svg('A2b_in_AlleleFrac2.svg', width = 6, height = 5)
Heatmap(cor(A3[,ords], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono[ords], UMIcounts = log(colSums(C[,colnames(AlleleFrac2)][,ords]),10),
    Stage = At_Stages$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))][ords],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T, show_row_names = FALSE, show_column_names = FALSE)
dev.off()


svg('A2b_in_AlleleFrac2_names.svg', width = 35, height = 5)
Heatmap(cor(A3[,ords], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono[ords], UMIcounts = log(colSums(C[,colnames(AlleleFrac2)][,ords]),10),
    Stage = At_Stages$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))][ords],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T, show_row_names = FALSE, show_column_names = TRUE)
dev.off()
###


Ambi_samples = names(which(FracMono[names(which(FracMono > 40))] < 60))
Heatmap(AlleleFrac2[,Ambi_samples], name = 'Ambi_samples_Allele_Frac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)
Mono_samples = names(which(FracMono >= 70))
Heatmap(AlleleFrac2[,Mono_samples], name = 'Mono_samples_Allele_Frac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)
Bi_samples = names(which(FracMono <= 30))
Heatmap(AlleleFrac2[,Bi_samples], name = 'Bi_samples_Allele_Frac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)



###require genes to be expressed in at least 20 cells

Heatmap(cor(A2b[,names(ord_ratio_mono_over10000)], use = 'pairwise.complete.obs', method = 'pearson'), name = 'norm_log_UMIs', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
Heatmap(cor(A2b[,names(ord_ratio_mono_over12000)], use = 'pairwise.complete.obs', method = 'pearson'), name = 'norm_log_UMIs', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T)
Heatmap(cor(A2b[,names(ord_ratio_mono_over20000)], use = 'pairwise.complete.obs', method = 'pearson'), name = 'norm_log_UMIs', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T)

A2d = A2b[rowSums(C[,colnames(A2b)] >= 10) >= 10, ]  # For pseudotime analysis, require each gene to have at least 10 UMIs in at least 10 cells
fano = apply(A2d, 1, var)/rowMeans(A2d)  # fano factor is a measure of gene variance
hmat = A2d[rank(-fano[rownames(A2d)]) <= 500,order(stages)]

#fano = apply(A2b, 1, var)/rowMeans(A2b)  # fano factor is a measure of gene variance
#hmat = A2b[rank(-fano[rownames(A2b)]) <= 500,order(stages)]

Heatmap(minmax(hmat), name = 'hmat', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T)
Heatmap(minmax(hmat[,names(ord_ratio_mono_over10000)]), name = 'hmat', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F)
Heatmap(minmax(hmat[,names(ord_ratio_mono_over12000)]), name = 'hmat', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F)
Heatmap(minmax(hmat[,names(ord_ratio_mono_over20000)]), name = 'hmat', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F)

Heatmap(minmax(hmat[,colnames(ord_AlleleFrac[,which(colnames(ord_AlleleFrac) %in% colnames(AlleleFrac2))])]), name = 'hmat', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F)


save(C, file = "7-8_2024_At_2.RData")




###Checking spike-in barcodes in the raw data (before demultiplexing)

#!/bin/bash
#SBATCH --job-name=At_spike-ins                                               # Job name
#SBATCH --partition=batch                                                     # Partition (queue) name
#SBATCH --ntasks=1                                                            # Single task job
#SBATCH --cpus-per-task=6                                                     # Number of cores per task
#SBATCH --mem=50gb                                                            # Total memory for job
#SBATCH --time=12:00:00                                                       # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7-8_2024_At/At_spike-ins.out           # Location of standard output file
#SBATCH --error=/scratch/jms53460/7-8_2024_At/At_spike-ins.err            # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                          # Where to send mail
#SBATCH --mail-type=END,FAIL                                                  # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7-8_2024_At
mkdir spike_ins
for file in Raw_Data/*R1*
do
    file2="${file:9:-13}"
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | sort | uniq -c | sort -nr | head -n 100 > spike_ins/raw_"$file2".txt
done

grep -F -f /scratch/jms53460/7-8_2024_At/96spike_in_barcodes.txt spike_ins/raw_A206-217_S35_L005_R1.txt | wc -l
#I made a text file with the 96 spike-in barcode sequences (96spike_in_barcodes.txt). 
#Maximum found was 91 matching barcodes within the top 100 for each raw data file

cd /scratch/jms53460/7-8_2024_At
###Check demultiplexed files for matching spike-ins.
for file in "Demultiplexed/"*.fastq*
do
    echo ""
    echo "$file"
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | grep -F -f /scratch/jms53460/7-8_2024_At/96spike_in_barcodes.txt | sort | uniq -c | sort -nr | head -n 4
done


###Finding how many spike-ins were detected in total and how many unique spike-ins were found for each sample
for file in "Demultiplexed/"*.fastq*
do
    echo ""
    echo "$file"
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | grep -F -f /scratch/jms53460/7-8_2024_At/96spike_in_barcodes.txt | wc -l
done

for file in "Demultiplexed/"*.fastq*
do
    echo ""
    echo "$file"
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | grep -F -f /scratch/jms53460/7-8_2024_At/96spike_in_barcodes.txt | sort | uniq -c | sort -nr | wc -l
done


###Produce table with all the matching spike-ins in demultiplexed files.
cd /scratch/jms53460/7-8_2024_At
mkdir spike_ins2
for file in "Demultiplexed/"*s.fastq*
do
    zcat "$file" | sed -n '2~4p' | grep TGCAAATAGGCGGCC | sed -n -e 's/AAAAAAAAAA.*/AAAA/p' | sort | uniq | sed -n -e 's/^.*TGCAAATAGGCGGCC//p' | cut -c1-12 | grep -F -f /scratch/jms53460/7-8_2024_At/96spike_in_barcodes.txt | sort | uniq -c | sort -nr | head -n 96 > spike_ins2/"${file:14:-9}".txt
done

mkdir spike_ins3
for file in spike_ins2/*s.txt
do
    awk '{print $1,$2}' $file OFS="" > spike_ins3/${file:10:-4}.tsv
done

cd /scratch/jms53460/7-8_2024_At
ml R/4.3.1-foss-2022a
R
spike_in_list = read.delim('96spike_in_barcodes.txt', header=F)
spike_in_list = spike_in_list[c(1:96),]
names(spike_in_list) = unlist(lapply(spike_in_list, function(xx) { xx[1] }))
files = dir('spike_ins3')
A = matrix(NA, nrow = length(spike_in_list), ncol = length(files))
rownames(A) = names(spike_in_list)
colnames(A) = files
for (f in files) {
    xx = read.table(paste('spike_ins3/', f, sep = ''), sep = '', header = F, row.names = 2)
    A[,f] = xx[match(names(spike_in_list),rownames(xx)),1]
}

load('7-8_2024_At_2.RData')


order = c(11,22,33,44,55,66,77,88,96,1:10,12:21,23:32,34:43,45:54,56:65,67:76,78:87,89:95)
B = A[,c(order,order+96,order+96*2,order+96*3,order+96*4,order+96*5,order+96*6)]
B[is.na(B)] = 0

colnames(B) = colnames(C)

B2 = B
for (y in 0:6) {
    for (x in (1+96*y):(96+96*y)) {
        for (z in (1:96)){
            B2[z,x] = B[z,x]/sum(B[,x])
        }
    }
}

B3 = B[1,]
for (x in 1:96){
    for (y in 0:6){
        B3[x+96*y] = B2[x,x+96*y]
    }
}


Spike_ins = B
Spike_ins_frac = B2
Spike_ins_frac_correct = B3
save(Spike_ins, Spike_ins_frac, Spike_ins_frac_correct, file = '7-8_2024_At_Spike_ins.RData')
q()

###Copying this to my local computer
scp sapelo2:/scratch/jms53460/7-8_2024_At/7-8_2024_At_Spike_ins.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'


###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('7-8_2024_At_Spike_ins.RData')

plot(data.frame(Spike_ins_frac_correct, colSums(D)))
Spike_ins_vs_UMIs = data.frame(Spike_ins_frac_correct[colnames(AlleleFrac2)], colSums(D[,colnames(AlleleFrac2)]))
plot(Spike_ins_vs_UMIs)
plot(data.frame(colSums(D[,colnames(AlleleFrac2)]), colSums(Spike_ins[,colnames(AlleleFrac2)])))
hist(Spike_ins_frac[which(Spike_ins_frac > 0.1)])

z = Spike_ins
svg('Spike_ins_cor.svg', width=10, height=80)
Heatmap(cor(Spike_ins), name = 'cor(Spike_ins)', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100))
dev.off()

Heatmap(cor(log(Spike_ins+1)))

plot(data.frame(Spike_ins_frac_correct[colnames(AlleleFrac2)], FracMono))

Spike_ins_d = Spike_ins
rownames(Spike_ins_d) = c(1:96)
for (x in 1:672){
    Spike_ins_d[,x] = Spike_ins[order(Spike_ins[,x], decreasing=TRUE),x]
}
Spike_ins_d[,1] = Spike_ins[order(Spike_ins[,1], decreasing=TRUE),1]
second_spike_in = Spike_ins_d[2,]/Spike_ins_d[1,]

sus_spike_ins = names(which(second_spike_in[which(second_spike_in > 0.01)] < 1))
second_spike_in[sus_spike_ins]
sus_spike_ins[which(sus_spike_ins %in% colnames(AlleleFrac2))]

colnames(Spike_ins[,seq(67,ncol(Spike_ins),96)])

Heatmap(Spike_ins[,c(seq(4,ncol(Spike_ins),96), seq(11,ncol(Spike_ins),96), seq(13,ncol(Spike_ins),96), seq(20,ncol(Spike_ins),96), seq(24,ncol(Spike_ins),96), seq(26,ncol(Spike_ins),96), seq(35,ncol(Spike_ins),96), seq(44,ncol(Spike_ins),96), seq(55,ncol(Spike_ins),96), seq(67,ncol(Spike_ins),96), seq(69,ncol(Spike_ins),96), seq(76,ncol(Spike_ins),96), seq(88,ncol(Spike_ins),96))], name = 'Spike_ins', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)

Spike_ins[,seq(20,ncol(Spike_ins),96)] #20 has somewhat low spike-in amounts, inconsistent contamination
Heatmap(Spike_ins[,seq(20,ncol(Spike_ins),96)], name = 'Spike_ins', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)

Spike_ins[23,seq(24,ncol(Spike_ins),96)]/Spike_ins[24,seq(24,ncol(Spike_ins),96)]
second_spike_in[seq(24,ncol(Spike_ins),96)]
Spike_ins[78,seq(35,ncol(Spike_ins),96)]/Spike_ins[35,seq(35,ncol(Spike_ins),96)]
second_spike_in[seq(35,ncol(Spike_ins),96)] #Not perfectly consistent, maybe spike-in cross contam happened during prep for A182-193 and A194-205, which I prepped same day?
Spike_ins[94,seq(55,ncol(Spike_ins),96)]/Spike_ins[55,seq(55,ncol(Spike_ins),96)]
second_spike_in[seq(55,ncol(Spike_ins),96)]
Spike_ins[69,seq(67,ncol(Spike_ins),96)]/Spike_ins[67,seq(67,ncol(Spike_ins),96)]
second_spike_in[seq(67,ncol(Spike_ins),96)]
Spike_ins[84,seq(76,ncol(Spike_ins),96)]/Spike_ins[76,seq(76,ncol(Spike_ins),96)]
second_spike_in[seq(76,ncol(Spike_ins),96)]

plot(colSums(Spike_ins[,sus_spike_ins]), colSums(D[,sus_spike_ins]))
#remove samples whose spike-ins are consistently contaminated by the same spike-in:
#24 (except A155-168_24s), 55, 67, 76
sus_spike_ins2 = sus_spike_ins[-c(17,21,29,31:33,40:42,44:47,49:52,54:57,61,63,64)] 
plot(colSums(Spike_ins[,sus_spike_ins2]), colSums(D[,sus_spike_ins2]))
sus_spike_ins3 = names(which(colSums(D[,sus_spike_ins2]) > 10000))
plot(colSums(Spike_ins[,sus_spike_ins3]), colSums(D[,sus_spike_ins3]))
plot(colSums(Spike_ins[,sus_spike_ins3]), second_spike_in[sus_spike_ins3])
plot(colSums(D[,sus_spike_ins3]), second_spike_in[sus_spike_ins3])
plot(colSums(Spike_ins), second_spike_in)

Heatmap(AlleleFrac[,sus_spike_ins3], name = 'Spike_ins', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)

Heatmap(AlleleFrac[,c('A155-168_3s', 'A155-168_2s', 'A155-168_4s', 'A155-168_13s', 'A155-168_12s', 'A155-168_26s', 'A155-168_73s', 'A155-168_75s', 'A155-168_44s', 'A155-168_92s', 'A155-168_69s', 'A155-168_14s', 'A155-168_88s', 'A182-193_11s', 'A182-193_20s', 'A182-193_35s', 'A182-193_78s', 'A194-205_35s', 'A194-205_78s', 'A206-217_20s', 'A206-217_22s', 'A218-229_20s', 'A230-241_20s', 'A230-241_23s')], col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)

sus_spike_ins4 = 

AlleleFrac3 = AlleleFrac2[,which(colnames(AlleleFrac2) %in% names(which(Spike_ins_frac_correct > 0.85)))]
hist(AlleleFrac3[,which(colnames(AlleleFrac3) %in% At_Stages$Sample[which(At_Stages$Stage == 'Tri')])])
hist(AlleleFrac3[,which(colnames(AlleleFrac3) %in% At_Stages$Sample[which(At_Stages$Stage == 'BM')])])
hist(AlleleFrac3[,which(colnames(AlleleFrac3) %in% At_Stages$Sample[which(At_Stages$Stage == 'UM')])])

names(which(Spike_ins_frac_correct[colnames(AlleleFrac2)] < 0.6))


plotCell2('A182-193_66s')
plotCell2('A194-205_72s')
plotCell2('A194-205_75s')
plotCell2('A218-229_72s')
plotCell2('A218-229_73s')
plotCell2('A218-229_75s')
plotCell2('A230-241_72s')
plotCell2('A230-241_73s')
plotCell2('A230-241_75s')
plotCell2('A242-253_66s')
plotCell2('A242-253_75s')

"A155-168_20s", "A242-253_89s"

#Most of these are biallelic but some are monoallelic. 
#The barcodes for the spike-ins of 66s and 72s as well as 73s and 75s are identical pairs
#R assigned exactly half the matching spike-ins to each of a pair, thus ~50% Spike_ins_frac_correct for these

summary(Spike_ins_frac_correct) #min 0, median 0.9423, mean 0.9042, max 0.9851

names(which(Spike_ins_frac_correct < 0.2))
sum(C[,"A182-193_72s"]) #2186 UMIs, 0.096 Spike_ins_frac_correct
sum(C[,"A182-193_80s"]) #1292 UMIs, 0.043 Spike_ins_frac_correct
sum(C[,"A182-193_88s"]) #973 UMIs, 0.039 Spike_ins_frac_correct
sum(C[,"A182-193_96s"]) #718 UMIs, 0.044 Spike_ins_frac_correct
sum(C[,"A194-205_60s"]) #48 UMIs, 0.0 Spike_ins_frac_correct
sum(C[,"A242-253_56s"]) #80 UMIs, 0.0 Spike_ins_frac_correct

#The spike-ins that failed were all different ones, and based on the low UMIs, it was the library that failed
#Interestingly, 5/6 of the failed spike-ins were the 8th of their celseq primer set.


Heatmap(AlleleFrac[,c(seq(67,ncol(Spike_ins),96),seq(69,ncol(Spike_ins),96))], name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)

primer_order = order(rep(1:96, 7))
AlleleFrac_by_primer = AlleleFrac[,primer_order]

svg('AlleleFrac_by_primer.svg', width=60, height=10)
Heatmap(AlleleFrac_by_primer[,which(colnames(AlleleFrac_by_primer) %in% colnames(AlleleFrac2))], name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
dev.off()

svg('AlleleFrac_by_primer_cor.svg', width=60, height=10)
Heatmap(cor(AlleleFrac_by_primer[,which(colnames(AlleleFrac_by_primer) %in% colnames(AlleleFrac2))], use = 'pairwise.complete.obs', method = 'pearson'), name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
dev.off()


Heatmap(colSums(C[,primer_order]), cluster_rows=F)


plot(data.frame(colSums(C[,colnames(AlleleFrac2)]), FracMono))
summary(colSums(C[,which(colnames(C) %in% At_Stages$Sample[which(At_Stages$Stage == 'Tri')])]))
summary(colSums(C[,which(colnames(C) %in% At_Stages$Sample[which(At_Stages$Stage == 'BM')])]))
summary(colSums(C[,which(colnames(C) %in% At_Stages$Sample[which(At_Stages$Stage == 'UM')])]))


AlleleFrac3 = AlleleFrac
summary(colsums(is.na(AlleleFrac3))) #helpful to check before and after setting values to NA to make sure it works
AlleleFrac3[,which(colSums(is.na(AlleleFrac)) >= 50)] = NA
FracMono_all = 100*colMeans(abs(AlleleFrac3 - .5) >= .3, na.rm=T)


for (x in 0:95){
    print(names(FracMono_all[primer_order[(1+7*x)]]))
    print(summary(colSums(C[,primer_order[(1+7*x):(7+7*x)]])))
}



for (x in 0:83){
    print(names(FracMono_all[(1+8*x)]))
    print(summary(FracMono_all[(1+8*x):(8+8*x)]))
}

Anther_data = matrix(data=0, nrow = 84, ncol = 5)
colnames(Anther_data) = c('Fail_QC', 'Monoallelic', 'Biallelic', 'Ambiguous', 'Bud')
batch = c(rep('A155-168', times = 12), rep('A182-193', times = 12), rep('A194-205', times = 12), rep('A206-217', times = 12), rep('A218-229', times = 12), rep('A230-241', times = 12), rep('A242-253', times = 12))
celseq_primer = rep(c('1-8s', '9-16s', '17-24s', '25-32s', '33-40s', '41-48s', '49-56s', '57-64s', '65-72s', '73-80s', '81-88s', '89-96s'), times = 7)
rownames(Anther_data) = paste(batch, '_', celseq_primer, sep = '')
Anther_data[,5] = X7_8_2024_At_Stages$Bud

for (x in 0:83){
    Anther_data[x+1,1] = sum(is.na(FracMono_all[(1+8*x):(8+8*x)]))
}
for (x in 0:83){
    Anther_data[x+1,2] = sum((FracMono_all[(1+8*x):(8+8*x)] > 70), na.rm=TRUE)
}
for (x in 0:83){
    Anther_data[x+1,3] = sum((FracMono_all[(1+8*x):(8+8*x)] < 30), na.rm=TRUE)
}
for (x in 0:83){
    Anther_data[x+1,4] = sum(FracMono_all[(names(which(FracMono_all[(1+8*x):(8+8*x)] >= 30)))] <= 70, na.rm=TRUE)
}

sum(rowSums(Anther_data[,1:4]) == 8) #84, so it looks like this worked okay


Bud_stages = as.character(X7_8_2024_At_Stages$Stage)
Bud_stages = factor(Bud_stages, levels = c('UM', 'UM/BM', 'BM', 'BM/Tri', 'Tri'))
order(Bud_stages)

Heatmap(Anther_data[,1:4], name = '#samples', 
    right_annotation = rowAnnotation(Stage = X7_8_2024_At_Stages$Stage,
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, row_order = order(Bud_stages), cluster_columns=F, show_row_names = TRUE, show_column_names = TRUE)


library(tidyverse)
At_Size_sorted = At_Stages
colnames(At_Size_sorted) = c('Date_collected', 'Plant', 'Sample', 'Xgen_primer', 'Bud', 'Bud_size', 'Anther_length', 'Stage', 'Bud_order')
At_Size_sorted = arrange(At_Size_sorted, Bud_size)
AlleleFrac_by_size = AlleleFrac[,At_Size_sorted$Sample]
AlleleFrac_by_size = AlleleFrac_by_size[,which(colSums(is.na(AlleleFrac_by_size)) <= 50)]

Heatmap(AlleleFrac_by_size, name = 'AlleleFrac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)


sizes = as.character(At_Size_sorted$Bud_size)
order(sizes)


#Prepare demultiplexed data so it is ready for upload with SRA. Backup data on external hard drive

#!/bin/bash
#SBATCH --job-name=At_demultiplex                                         # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=100gb                                                       # Total memory for job
#SBATCH --time=12:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7-8_2024_At/At_dm2.out                  # Location of standard output file
#SBATCH --error=/scratch/jms53460/7-8_2024_At/At_dm2.err                   # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7-8_2024_At
mkdir Demultiplexed2
ml Miniconda3/23.5.2-0
source activate /scratch/jms53460/7-8_2024_At/Fastq-Multx

for file in Raw_Data/*_R1_*.gz; do
    filename=$(basename "$file")
    file2=$(echo "$filename" | sed 's/_R1.*//' | sed 's/_R2_001.fastq.gz//')

	    fastq-multx -b -B "CELSeq_barcodes.txt" -m 0 "Raw_Data/""$file2""_R2_001.fastq.gz" "Raw_Data/""$file2""_R1_001.fastq.gz" -o "Demultiplexed2/""$file2""_%_R2_001.fastq.gz" "Demultiplexed2/""$file2""_%_R1_001.fastq.gz"  # Split read 2 file by CELseq barcodes. Require perfect match to barcode in expected location
	    
        module load fastp/0.23.2-GCC-11.3.0
        fastp -w 6 -i "Demultiplexed2/""$file2""_%_R1_001.fastq.gz" -I "Demultiplexed2/""$file2""_%_R2_001.fastq.gz" -o "Demultiplexed2/""$file2""_R1.fastq.gz" -O "Demultiplexed2/""$file2""_R2.fastq.gz" -A -Q -L -G --umi --umi_loc read2 --umi_len 10 --umi_prefix UMI

done
conda deactivate


#!/bin/bash
#SBATCH --job-name=At_demultiplex                                         # Job name
#SBATCH --partition=batch                                                 # Partition (queue) name
#SBATCH --ntasks=1                                                        # Single task job
#SBATCH --cpus-per-task=6                                                 # Number of cores per task
#SBATCH --mem=100gb                                                       # Total memory for job
#SBATCH --time=12:00:00                                                   # Time limit hrs:min:sec
#SBATCH --output=/scratch/jms53460/7-8_2024_At/At_dm3.out                  # Location of standard output file
#SBATCH --error=/scratch/jms53460/7-8_2024_At/At_dm3.err                   # Location of error log file
#SBATCH --mail-user=jms53460@uga.edu                                      # Where to send mail
#SBATCH --mail-type=END,FAIL                                              # Mail events (BEGIN, END, FAIL, ALL)

cd /scratch/jms53460/7-8_2024_At
module load fastp/0.23.2-GCC-11.3.0

for file in Demultiplexed2/*_R1_*.gz; do
    file2="${file:0:-15}"

        module load fastp/0.23.2-GCC-11.3.0
        fastp -w 6 -i $file -I "$file2""R2_001.fastq.gz" -o "$file2""_R1.fastq.gz" -O "$file2""_R2.fastq.gz" -A -Q -L -G --umi --umi_loc read2 --umi_len 10 --umi_prefix UMI

done



scp sapelo2:/scratch/jms53460/7-8_2024_At/Demultiplexed2/*001.fastq.gz 'C:\Users\julia\OneDrive\Desktop\Grad School\Nelms lab\Bioinformatics\7-8_2024_At_Data'


scp sapelo2:/scratch/jms53460/7-8_2024_At/Demultiplexed2/*001.fastq.gz 'D:\7-8_2024_At_Data'


ml R/4.3.1-foss-2022a
R
annots = strsplit(read.table('TAIR10.1_Col_5.gff', sep = '\t', quote = "")[,9], ';')
annots = annots[grep('ID=gene-', annots)]
names(annots) = unlist(lapply(annots, function(xx) { xx[1] }))
names(annots) = sub('ID=', '', names(annots))
annots = annots[!duplicated(names(annots))]
annots = sub(';', '', sub(' ', '', unlist(lapply(annots, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))

files = dir('UMIcounts')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
D = B

files = dir('UMIcounts_g1')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g1/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g1.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g1 = B

files = dir('UMIcounts_g2')
A = matrix(NA, nrow = length(annots), ncol = length(files))
rownames(A) = annots
colnames(A) = files
for (f in files) {
	xx = read.table(paste('UMIcounts_g2/', f, sep = ''), sep = '\t', header=T, row.names=1)
	A[,f] = xx[match(names(annots),rownames(xx)),1]
}
colnames(A) = sub('L003_', '', sub('_SNPsplit_g2.tsv', '', files))
A[is.na(A)] = 0
#A = A[rowSums(A) > 0,]

B = A[order(rownames(A)),]
B2 = B
B = B[!duplicated(rownames(B)),]
for (g in unique(rownames(B)[duplicated(rownames(B))])) {
	B[g,] = colSums(B2[rownames(B2) %in% g,])
}
g2 = B

genes = read.table('TAIR10.1_Col_5.gff', sep = '\t', quote = "")[,c(1,5)]
annots2 = strsplit(read.table('TAIR10.1_Col_5.gff', sep = '\t', quote = "")[,9], ';')
names(annots2) = unlist(lapply(annots2, function(xx) { xx[1] }))
annots2 = sub(';', '', sub(' ', '', unlist(lapply(annots2, function(xx) { sub('.+ ', '', if (length(xx) == 3) { xx[3] } else { xx[1] }) }))))
genes[,3] = annots2
genes2 = genes[grepl('ID=gene-', genes[,3]),]
genes = genes2[order(genes2[,2]),] #order by position
genes = genes[order(genes[,1]),] #order by chr
genes = genes[!duplicated(genes[,3]),]
colnames(genes) = c('Chr', 'Position', 'Gene')
rownames(genes) = genes[,3]

save(D,g1,g2,genes, file = "7-8_2024_At_3.RData")
q()



###Copying this to my local computer
scp sapelo2:/scratch/jms53460/7-8_2024_At/7-8_2024_At_3.RData 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R'


###In local R terminal
setwd('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R')
load('C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/Julian R instance.rda') #This has data from the first 48 Arabidopsis samples I sequenced alongside functions and such that were used for analysis
load('7-8_2024_At_3.RData')

plotCell2 = function (cell) 
{
    annotate_figure(ggarrange(plotChr(cell, chr = 1), plotChr(cell, 
        chr = 2), plotChr(cell, chr = 3), plotChr(cell, chr = 4), 
        plotChr(cell, chr = 5), plotScaleBar, ncol = 1, nrow = 6, 
        align = "v", heights = c(rep(1, 5), 0.4)), left = text_grob("          % Transcripts from Col-0 allele", 
        rot = 90, size = 10), top = cell)
}

library(readxl)
X7_8_2024_At_Stages <- read_excel("C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics/R/7-8_2024_At_Stages.xlsx")
View(X7_8_2024_At_Stages)

At_Stages <- X7_8_2024_At_Stages[rep(row.names(X7_8_2024_At_Stages), times = 8), ]
library(tidyverse)
At_Stages = arrange(At_Stages, Bud_order)
At_Stages$Sample = c(paste(rep('A155-168_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A182-193_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A194-205_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A206-217_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A218-229_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A230-241_', times = 96), 1:96, rep('s', times=96), sep=''), paste(rep('A242-253_', times = 96), 1:96, rep('s', times=96), sep=''))
stages = as.character(At_Stages$Stage)
stages = factor(stages, levels = c('UM', 'UM/BM', 'BM', 'BM/Tri', 'Tri'))

D = D[rownames(genes),]
g1 = g1[rownames(genes),]
g2 = g2[rownames(genes),]

colnames(D) = sub('_S94', '', colnames(D))
colnames(D) = sub('_S33_L005', '', colnames(D))
colnames(D) = sub('_S34_L005', '', colnames(D))
colnames(D) = sub('_S35_L005', '', colnames(D))
colnames(D) = sub('_S36_L005', '', colnames(D))
colnames(D) = sub('_S37_L005', '', colnames(D))
colnames(D) = sub('_S38_L005', '', colnames(D))
colnames(g1) = colnames(D)
colnames(g2) = colnames(D)
D = D[,At_Stages$Sample]
g1 = g1[,At_Stages$Sample]
g2 = g2[,At_Stages$Sample]

hist(colSums(D), breaks=5000) #Most samples have very few UMIs. There might be a hint of separation around 25,000 UMIs
abline(v=26000)

#Cells are labeled by 96-cell batch and cell barcode. (A155-168_10s)
#Batches: A155-168, A182-193, A194-205, A206-217, A218-229, A230-241, A242-253

BIN2 = function (xx, bin = 10^6) 
{
    bin = as.numeric(genes[, 1]) * 10^6 + round(genes[, 2]/bin)
    out = by(xx, bin, colSums)
    out2 = t(matrix(unlist(out), nrow = ncol(g1)))
    colnames(out2) = colnames(g1)
    rownames(out2) = names(out)
    return(out2)
}

library(ggplot2)
library(ggpubr)
g1_bin = BIN2(g1)
g2_bin = BIN2(g2)
g1_frac = g1_bin/(g1_bin + g2_bin)
AlleleFrac = g1_frac
AlleleFrac[(g1_bin+g2_bin) < 10] = NA #remove bins with <10 genoinformative transcripts
#AlleleFrac2 = AlleleFrac[,which(colSums(is.na(AlleleFrac)) <= 50)]
AlleleFrac2 = AlleleFrac[,which(colSums(D) >= 10000)]

summary(colSums(D[,colnames(AlleleFrac2)])) #UMIs per sample
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  10000   13556   19442   30119   31591  194326 

summary(colSums(D[,colnames(AlleleFrac2)] > 0))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2591    4437    5472    5945    7195   12263

plotCell2('A155-168_61s')

library('ComplexHeatmap')


FracMono = 100*colMeans(abs(AlleleFrac2 - .5) >= .3, na.rm=T)

ord_AlleleFrac = AlleleFrac[,order(stages)]
ord_FracMono = 100*colMeans(abs(ord_AlleleFrac - .5) >= .3, na.rm=T)


pseudocount = 1*10^6/quantile(colSums(D), p = .1)
minmax = function(x) {
	sweep(x - log(pseudocount, 10), 1, apply(x - log(pseudocount, 10), 1, max), '/')
}

A2 = sweep(D, 2, colSums(D), '/')*10^6  # Transcripts per million normalization
A2b = log(A2+pseudocount,10)  # Log transform
A3 = A2b[rowSums(A2[,colnames(AlleleFrac2)] > 0) >= 20,colnames(AlleleFrac2)]
A3 = A3[rank(-apply(A3,1,sd)) <= 1000,]
PCs = prcomp(t(A3))

Heatmap(cor(A2b, use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T)
svg('ord_A2b_in_AlleleFrac2.svg', width = 30, height = 30)
Heatmap(cor(A2b[,colnames(ord_AlleleFrac[,which(colnames(ord_AlleleFrac) %in% colnames(AlleleFrac2))])], use = 'pairwise.complete.obs', method = 'pearson'), name = 'norm_log_UMIs', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)
dev.off()

###
ords = order(PCs$x[,1])

svg('A2b_in_AlleleFrac2.svg', width = 6, height = 5)
Heatmap(cor(A3[,ords], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono[ords], UMIcounts = log(colSums(D[,colnames(AlleleFrac2)][,ords]),10),
    Stage = At_Stages$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))][ords],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T, show_row_names = FALSE, show_column_names = FALSE)
dev.off()


ord_AlleleFrac2 = ord_AlleleFrac[,which(colnames(ord_AlleleFrac) %in% colnames(AlleleFrac2))]
At_Stages2 = as.matrix(At_Stages)
rownames(At_Stages2) = At_Stages$Sample

Heatmap(cor(A3[,colnames(ord_AlleleFrac2)], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono[colnames(ord_AlleleFrac2)], UMIcounts = log(colSums(D[,colnames(ord_AlleleFrac2)]),10),
    Stage = At_Stages2[colnames(ord_AlleleFrac2),8],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F, show_row_names = FALSE, show_column_names = FALSE)



#svg('A2b_in_AlleleFrac2_names.svg', width = 35, height = 5)
#Heatmap(cor(A3[,ords], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
#    top_annotation = HeatmapAnnotation(FracMono = FracMono[ords], UMIcounts = log(colSums(C[,colnames(AlleleFrac2)][,ords]),10),
#    Stage = At_Stages$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))][ords],
#    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
#      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T, show_row_names = FALSE, show_column_names = TRUE)
#dev.off()
###



AlleleFrac3 = AlleleFrac
summary(colsums(is.na(AlleleFrac3))) #helpful to check before and after setting values to NA to make sure it works
AlleleFrac3[,which(colSums(is.na(AlleleFrac)) >= 50)] = NA
FracMono_all = 100*colMeans(abs(AlleleFrac3 - .5) >= .3, na.rm=T)


Anther_data = matrix(data=0, nrow = 84, ncol = 5)
colnames(Anther_data) = c('Fail_QC', 'Monoallelic', 'Biallelic', 'Ambiguous', 'Bud')
batch = c(rep('A155-168', times = 12), rep('A182-193', times = 12), rep('A194-205', times = 12), rep('A206-217', times = 12), rep('A218-229', times = 12), rep('A230-241', times = 12), rep('A242-253', times = 12))
celseq_primer = rep(c('1-8s', '9-16s', '17-24s', '25-32s', '33-40s', '41-48s', '49-56s', '57-64s', '65-72s', '73-80s', '81-88s', '89-96s'), times = 7)
rownames(Anther_data) = paste(batch, '_', celseq_primer, sep = '')
Anther_data[,5] = X7_8_2024_At_Stages$Bud

for (x in 0:83){
    Anther_data[x+1,1] = sum(is.na(FracMono_all[(1+8*x):(8+8*x)]))
}
for (x in 0:83){
    Anther_data[x+1,2] = sum((FracMono_all[(1+8*x):(8+8*x)] > 70), na.rm=TRUE)
}
for (x in 0:83){
    Anther_data[x+1,3] = sum((FracMono_all[(1+8*x):(8+8*x)] < 30), na.rm=TRUE)
}
for (x in 0:83){
    Anther_data[x+1,4] = sum(FracMono_all[(names(which(FracMono_all[(1+8*x):(8+8*x)] >= 30)))] <= 70, na.rm=TRUE)
}

sum(rowSums(Anther_data[,1:4]) == 8) #84, so it looks like this worked okay


Bud_stages = as.character(X7_8_2024_At_Stages$Stage)
Bud_stages = factor(Bud_stages, levels = c('UM', 'UM/BM', 'BM', 'BM/Tri', 'Tri'))
order(Bud_stages)

Heatmap(Anther_data[,1:4], name = '#samples', 
    right_annotation = rowAnnotation(Stage = X7_8_2024_At_Stages$Stage,
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, row_order = order(Bud_stages), cluster_columns=F, show_row_names = TRUE, show_column_names = TRUE)



Ambi_samples = names(which(FracMono[names(which(FracMono > 40))] < 60))
Heatmap(AlleleFrac2[,Ambi_samples], name = 'Ambi_samples_Allele_Frac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)
Mono_samples = names(which(FracMono >= 50))
Heatmap(AlleleFrac2[,Mono_samples], name = 'Mono_samples_Allele_Frac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)
Bi_samples = names(which(FracMono <= 10))
Heatmap(AlleleFrac2[,Bi_samples], name = 'Bi_samples_Allele_Frac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)


svg('7-8_2024_ord_AlleleFrac2.svg', width = 9, height = 5)
Heatmap(ord_AlleleFrac2, name = 'Fraction of 
Col-0 Allele', top_annotation = HeatmapAnnotation(FracMono = ord_FracMono[colnames(ord_AlleleFrac2)], 
    UMIcounts = log(colSums(D[,colnames(ord_AlleleFrac2)]),10),
    Stage = At_Stages2[colnames(ord_AlleleFrac2),8],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
    col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F, show_column_names=F, show_row_names=F)
dev.off()



Heatmap(ord_FracMono, name = 'ord_FracMono', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)

FracMono2 = 100*colMeans(abs(AlleleFrac2 - .5) >= .2, na.rm=T)
Ambi_samples2 = names(which(FracMono2[names(which(FracMono2 > 30))] < 70))
Heatmap(AlleleFrac2[,Ambi_samples2], name = 'Ambi_samples_Allele_Frac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)
Mono_samples2 = names(which(FracMono2 >= 70))
Heatmap(AlleleFrac2[,Mono_samples2], name = 'Mono_samples_Allele_Frac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)
Bi_samples2 = names(which(FracMono2 <= 30))
Heatmap(AlleleFrac2[,Bi_samples2], name = 'Bi_samples_Allele_Frac', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F)



Heatmap(cor(A3[,ords], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono2[ords], UMIcounts = log(colSums(D[,colnames(AlleleFrac2)][,ords]),10),
    Stage = At_Stages$Stage[which(colnames(AlleleFrac) %in% colnames(AlleleFrac2))][ords],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T, show_row_names = FALSE, show_column_names = FALSE)


Heatmap(cor(A3[,colnames(ord_AlleleFrac2)], use = 'pairwise.complete.obs', method = 'pearson'), name = 'cor', 
    top_annotation = HeatmapAnnotation(FracMono = FracMono2[colnames(ord_AlleleFrac2)], UMIcounts = log(colSums(D[,colnames(ord_AlleleFrac2)]),10),
    Stage = At_Stages2[colnames(ord_AlleleFrac2),8],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
      col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F, show_row_names = FALSE, show_column_names = FALSE)



A2d = A2b[rowSums(D[,colnames(A2b)] >= 10) >= 10, ]  # For pseudotime analysis, require each gene to have at least 10 UMIs in at least 10 cells
fano = apply(A2d, 1, var)/rowMeans(A2d)  # fano factor is a measure of gene variance
hmat = A2d[rank(-fano[rownames(A2d)]) <= 500,order(stages)]
A3 = A2b[rowSums(A2[,colnames(AlleleFrac2)] > 0) >= 20,colnames(AlleleFrac2)]
A3 = A3[rank(-apply(A3,1,sd)) <= 1000,]
PCs = prcomp(t(A3))
ords = order(PCs$x[,1])

A4 = A2b[rowSums(A2[,colnames(ord_AlleleFrac2)] > 0) >= 20,colnames(ord_AlleleFrac2)]
A4 = A4[rank(-apply(A4,1,sd)) <= 1000,]
PCs2 = prcomp(t(A4))
ords2 = order(PCs$x[,1])
hmat2 = A2d[rank(-fano[rownames(A2d)]) <= 500,ords2]


Heatmap(minmax(hmat), name = 'hmat', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T)
Heatmap(cor(minmax(hmat), use = 'pairwise.complete.obs', method = 'pearson'), name = 'hmat', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=T)

###
svg('7-8_2024_At_express_heatmap_Stages_UMIs_FracMono.svg', width = 7, height = 5)
Heatmap(minmax(hmat[,colnames(ord_AlleleFrac2)]), name = 'expression
level (TPM)', 
top_annotation = HeatmapAnnotation(FracMono = ord_FracMono[colnames(ord_AlleleFrac2)], UMIcounts = log(colSums(D[,colnames(ord_AlleleFrac2)]),10),
    Stage = At_Stages2[colnames(ord_AlleleFrac2),8],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F, show_column_names=F, show_row_names=F)
dev.off()

svg('7-8_2024_At_express_heatmap_Stages.svg', width = 7, height = 5)
Heatmap(minmax(hmat[,colnames(ord_AlleleFrac2)]), name = 'expression
level (TPM)', 
top_annotation = HeatmapAnnotation(Stage = At_Stages2[colnames(ord_AlleleFrac2),8],
    col = list(Stage = c("UM" = "#eeeeee", "UM/BM" = "#cccccc", "BM" = "#777777", "BM/Tri" = "#444444", "Tri" = "#111111"))),
col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F, show_column_names=F, show_row_names=F)
dev.off()




Heatmap(minmax(hmat[,colnames(ord_AlleleFrac[,which(colnames(ord_AlleleFrac) %in% colnames(AlleleFrac2))])]), name = 'hmat', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=T, cluster_columns=F)

Heatmap(cor(minmax(hmat[,colnames(ord_AlleleFrac[,which(colnames(ord_AlleleFrac) %in% colnames(AlleleFrac2))])]), use = 'pairwise.complete.obs', method = 'pearson'), name = 'hmat', col = colorRampPalette(c('#0571b0','#92c5de','#f7f7f7','#f4a582','#ca0020'))(100), cluster_rows=F, cluster_columns=F)


###Download bam and bai to load into IGV
scp sapelo2:/scratch/jms53460/7-8_2024_At/hisat2_out/A242-253_S38_L005_59s_s.bam 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics'
scp sapelo2:/scratch/jms53460/7-8_2024_At/hisat2_out/A242-253_S38_L005_59s_s.bam.bai 'C:/Users/julia/OneDrive/Desktop/Grad School/Nelms lab/Bioinformatics'



save(D,g1,g2,genes,At_Stages, file = "7-8_2024_At_4.RData")
